.TH "Value" 3 "Mon Jun 5 2023" "x86Backend" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Value \- Abstract class for IR object\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Value\&.h>\fP
.PP
Inherits \fBNoCopyable\fP\&.
.PP
Inherited by \fBBaseBlock\fP, \fBConstant\fP, \fBFunction\fP, \fBGlobalVar\fP, and \fBInstruction\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBValue\fP (ValueType type_param, name_t name_param)"
.br
.ti -1c
.RI "name_t \fBget_name\fP () const"
.br
.ti -1c
.RI "virtual void \fBdump\fP () const =0"
.br
.RI "Print \fBValue\fP in human-readable format to file DUMP\&. "
.ti -1c
.RI "virtual ValueType \fBget_type\fP () const =0"
.br
.RI "Get \fBValue\fP type\&. "
.ti -1c
.RI "virtual void \fBtranslate_x86\fP (\fBContext\fP *ctx) const =0"
.br
.RI "Translate \fBValue\fP to x86 code\&. "
.ti -1c
.RI "GPRegisterNumber \fBput_to_reg\fP (\fBContext\fP *ctx) const"
.br
.RI "Puts \fBValue\fP to reg\&. "
.ti -1c
.RI "virtual void \fBset_storage\fP () const =0"
.br
.RI "Set the \fIstorage\fP "
.ti -1c
.RI "\fBStorage\fP * \fBget_storage\fP () const"
.br
.RI "Get the storage member\&. "
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "enum ValueType \fBtype\fP"
.br
.ti -1c
.RI "const name_t \fBname\fP"
.br
.ti -1c
.RI "\fBStorage\fP \fBstorage\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Abstract class for IR object\&. 
.SH "Member Function Documentation"
.PP 
.SS "virtual void Value::dump () const\fC [pure virtual]\fP"

.PP
Print \fBValue\fP in human-readable format to file DUMP\&. Print \fBValue\fP in human-readable format to file DUMP\&. PRINT_NEW_LINES regulates if printed \fBValue\fP generates extra new line chars 
.PP
Implemented in \fBInstruction\fP, \fBFunction\fP, \fBGlobalVar\fP, \fBConstant\fP, \fBBaseBlock\fP, \fBOperator\fP, \fBReturn\fP, \fBCall\fP, \fBBranch\fP, \fBLoad\fP, and \fBStore\fP\&.
.SS "\fBStorage\fP * Value::get_storage () const"

.PP
Get the storage member\&. 
.PP
\fBReturns\fP
.RS 4
Storage* 
.RE
.PP

.SS "virtual ValueType Value::get_type () const\fC [pure virtual]\fP"

.PP
Get \fBValue\fP type\&. 
.PP
\fBNote\fP
.RS 4
debug purpose only 
.RE
.PP
\fBReturns\fP
.RS 4
ValueType 
.RE
.PP

.PP
Implemented in \fBInstruction\fP, \fBFunction\fP, \fBGlobalVar\fP, \fBConstant\fP, and \fBBaseBlock\fP\&.
.SS "GPRegisterNumber Value::put_to_reg (\fBContext\fP * ctx) const"

.PP
Puts \fBValue\fP to reg\&. Depending on \fIstorage\fP field this functions puts \fBValue\fP to register 
.PP
\fBParameters\fP
.RS 4
\fIctx\fP 
.RE
.PP
\fBReturns\fP
.RS 4
GPRegisterNumber 
.RE
.PP

.SS "virtual void Value::set_storage () const\fC [pure virtual]\fP"

.PP
Set the \fIstorage\fP This functions sets \fIstorage_type\fP for value In \fBFunction\fP and \fBBaseBlock\fP this function call this this function for all objects from their ValueArr<> members 
.PP
\fBNote\fP
.RS 4
for \fBConstant\fP this function only checks \fIstorage_type\fP 
.RE
.PP

.PP
Implemented in \fBInstruction\fP, \fBFunction\fP, \fBGlobalVar\fP, \fBConstant\fP, \fBBaseBlock\fP, \fBOperator\fP, \fBReturn\fP, \fBCall\fP, \fBBranch\fP, \fBLoad\fP, and \fBStore\fP\&.
.SS "virtual void Value::translate_x86 (\fBContext\fP * ctx) const\fC [pure virtual]\fP"

.PP
Translate \fBValue\fP to x86 code\&. 
.PP
\fBParameters\fP
.RS 4
\fIctx\fP 
.RE
.PP

.PP
Implemented in \fBInstruction\fP, \fBFunction\fP, \fBGlobalVar\fP, \fBConstant\fP, \fBBaseBlock\fP, \fBOperator\fP, \fBReturn\fP, \fBCall\fP, \fBBranch\fP, \fBLoad\fP, and \fBStore\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for x86Backend from the source code\&.
