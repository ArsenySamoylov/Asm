<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="my__safety_8cpp" kind="file" language="C++">
    <compoundname>my_safety.cpp</compoundname>
    <includes refid="my__safety_8h" local="yes">my_safety.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="yes">assert.h</includes>
    <incdepgraph>
      <node id="1">
        <label>ATC/my_safety/my_safety.cpp</label>
        <link refid="my__safety_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>assert.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="2">
        <label>my_safety.h</label>
        <link refid="my__safety_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="my__safety_8cpp_1a025a9bb7f3bc1aa9b8febc2cfcfdfa6e" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int HASH_START_OFFSET</definition>
        <argsstring></argsstring>
        <name>HASH_START_OFFSET</name>
        <initializer>= 17</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/my_safety/my_safety.cpp" line="6" column="11" bodyfile="ATC/my_safety/my_safety.cpp" bodystart="6" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="my__safety_8cpp_1aeeeca6a2980286e2be13865a8568b54d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* canary_calloc</definition>
        <argsstring>(size_t number_of_elements, size_t size_of_element)</argsstring>
        <name>canary_calloc</name>
        <param>
          <type>size_t</type>
          <declname>number_of_elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size_of_element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/my_safety/my_safety.cpp" line="8" column="6" bodyfile="ATC/my_safety/my_safety.cpp" bodystart="8" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="my__safety_8cpp_1a12f2ff721e94a2be568009071a0f8ea5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* canary_realloc</definition>
        <argsstring>(void *ptr, size_t new_numbers_of_elements, size_t size_of_element)</argsstring>
        <name>canary_realloc</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>new_numbers_of_elements</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size_of_element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/my_safety/my_safety.cpp" line="34" column="6" bodyfile="ATC/my_safety/my_safety.cpp" bodystart="34" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="my__safety_8cpp_1a174e67df4ee7b5f7f1c65a21554e97ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void canary_free</definition>
        <argsstring>(void *ptr)</argsstring>
        <name>canary_free</name>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/my_safety/my_safety.cpp" line="56" column="6" bodyfile="ATC/my_safety/my_safety.cpp" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="my__safety_8cpp_1a0e59ade113663f3410017538ba308eb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int generateHash</definition>
        <argsstring>(const void *start, const void *end)</argsstring>
        <name>generateHash</name>
        <param>
          <type>const void *</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/my_safety/my_safety.cpp" line="61" column="5" bodyfile="ATC/my_safety/my_safety.cpp" bodystart="61" bodyend="72"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;my_safety.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;assert.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>HASH_START_OFFSET<sp/>=<sp/>17;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>canary_calloc(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>number_of_elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size_of_element)</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>total_size<sp/>=<sp/>number_of_elements*size_of_element;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifndef<sp/>NCANARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>total_size<sp/>+=<sp/>2*_CANARY_SIZE_;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>canary_ptr<sp/>=<sp/>calloc(1,<sp/>total_size);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifndef<sp/>NCANARY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(canary_ptr)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CANARY*<sp/>open_canary<sp/><sp/>=<sp/>(CANARY*)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canary_ptr;</highlight><highlight class="comment">//(CANARY<sp/>*)array[-1]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CANARY*<sp/>close_canary<sp/>=<sp/>(CANARY*)<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)canary_ptr<sp/>+<sp/>total_size<sp/>-<sp/>_CANARY_SIZE_);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*open_canary<sp/><sp/>=<sp/>_OPENING_CANARY_;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*close_canary<sp/>=<sp/>_CLOSING_CANARY_;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>canary_ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>canary_ptr<sp/>+<sp/><sp/>_CANARY_SIZE_);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>canary_ptr;<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>canary_realloc(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>new_numbers_of_elements,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size_of_element)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ptr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(new_numb_of_elements<sp/>&lt;<sp/>0<sp/>||<sp/>size_of_element<sp/>&lt;<sp/>0)<sp/>return<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>realloc(<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)ptr<sp/>-<sp/>_CANARY_SIZE_,<sp/>new_numbers_of_elements*size_of_element<sp/>+<sp/>2*_CANARY_SIZE_);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CANARY*<sp/>open_canary<sp/><sp/>=<sp/>(CANARY*)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CANARY*<sp/>close_canary<sp/>=<sp/>(CANARY*)<sp/>(<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>ptr<sp/>+<sp/>new_numbers_of_elements*size_of_element<sp/>+<sp/>_CANARY_SIZE_);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*open_canary<sp/><sp/>=<sp/>_OPENING_CANARY_;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*close_canary<sp/>=<sp/>_CLOSING_CANARY_;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>ptr<sp/>+<sp/>_CANARY_SIZE_);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>canary_free<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>free((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)ptr<sp/>-<sp/>_CANARY_SIZE_);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>generateHash(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>start,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>end)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!start<sp/>||<sp/>!end)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>hash<sp/>=<sp/>HASH_START_OFFSET;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ptr<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)start;<sp/>ptr<sp/>!=<sp/>end;<sp/>++ptr)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>+=<sp/>(<sp/>(hash<sp/>&lt;&lt;<sp/>5)<sp/>+<sp/>hash)<sp/>+<sp/>*ptr;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
    </programlisting>
    <location file="ATC/my_safety/my_safety.cpp"/>
  </compounddef>
</doxygen>
