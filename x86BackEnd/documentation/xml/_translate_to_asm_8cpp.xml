<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_translate_to_asm_8cpp" kind="file" language="C++">
    <compoundname>TranslateToAsm.cpp</compoundname>
    <includes refid="_translate_to_asm_8h" local="yes">TranslateToAsm.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">time.h</includes>
    <includes refid="_back_end_config_8h" local="yes">BackEndConfig.h</includes>
    <includes refid="_asm_ctx_8h" local="yes">AsmCtx.h</includes>
    <includes refid="_d_s_l_8h" local="yes">DSL.h</includes>
    <includes refid="_grammar_8h" local="yes">Grammar.h</includes>
    <includes refid="_lang_utils_8h" local="yes">LangUtils.h</includes>
    <includes refid="_log_macroses_8h" local="yes">LogMacroses.h</includes>
    <includes refid="_easy_debug_8h" local="yes">EasyDebug.h</includes>
    <includes refid="_some_stuff_8h" local="yes">SomeStuff.h</includes>
    <includes local="yes">../src/TranslatorUtils_.ars</includes>
    <includes local="yes">../src/Handlers_.ars</includes>
    <incdepgraph>
      <node id="10">
        <label>stdarg.h</label>
      </node>
      <node id="9">
        <label>stdlib.h</label>
      </node>
      <node id="7">
        <label>Tabels.h</label>
        <link refid="_tabels_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>CommonEnums.h</label>
        <link refid="_common_enums_8h_source"/>
      </node>
      <node id="18">
        <label>errno.h</label>
      </node>
      <node id="20">
        <label>Logger.h</label>
        <link refid="_logger_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>LogMacroses.h</label>
        <link refid="_log_macroses_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>LangUtils.h</label>
        <link refid="_lang_utils_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>TranslateToAsm.h</label>
        <link refid="_translate_to_asm_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>SomeStuff.h</label>
        <link refid="_some_stuff_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stddef.h</label>
      </node>
      <node id="27">
        <label>Grammar.h</label>
        <link refid="_grammar_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>NameTable.h</label>
        <link refid="_name_table_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Token.h</label>
        <link refid="_token_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>EasyDebug.h</label>
        <link refid="_easy_debug_8h_source"/>
      </node>
      <node id="1">
        <label>src/Legacy/TranslateToAsm.cpp</label>
        <link refid="_translate_to_asm_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>DSL.h</label>
        <link refid="_d_s_l_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>string.h</label>
      </node>
      <node id="28">
        <label>TokenTypes.h</label>
        <link refid="_token_types_8h_source"/>
      </node>
      <node id="3">
        <label>Program.h</label>
        <link refid="_program_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>LogConfig.h</label>
        <link refid="_log_config_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>time.h</label>
      </node>
      <node id="11">
        <label>math.h</label>
      </node>
      <node id="17">
        <label>iostream</label>
      </node>
      <node id="14">
        <label>AsmCtx.h</label>
        <link refid="_asm_ctx_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>tostring.h</label>
        <link refid="tostring_8h_source"/>
      </node>
      <node id="26">
        <label>Utils.h</label>
        <link refid="_utils_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>FunctionLogger.h</label>
        <link refid="_function_logger_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>../src/TranslatorUtils_.ars</label>
      </node>
      <node id="13">
        <label>BackEndConfig.h</label>
        <link refid="_back_end_config_8h_source"/>
      </node>
      <node id="33">
        <label>../src/Handlers_.ars</label>
      </node>
      <node id="25">
        <label>LinuxColors.h</label>
        <link refid="_linux_colors_8h_source"/>
      </node>
      <node id="8">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_translate_to_asm_8cpp_1a1dd0b95ed74a675b695561d46ad72bff" prot="public" static="no">
        <name>ASM_SEPARATOR</name>
        <initializer>assprint(&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n&quot;);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/TranslateToAsm.cpp" line="1" column="9" bodyfile="src/Legacy/TranslateToAsm.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_translate_to_asm_8cpp_1afd06df93f8a163ace23629821e0868a8" prot="public" static="yes" mutable="no">
        <type>FILE *</type>
        <definition>FILE* ASM_FILE</definition>
        <argsstring></argsstring>
        <name>ASM_FILE</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/TranslateToAsm.cpp" line="20" column="13" bodyfile="src/Legacy/TranslateToAsm.cpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_translate_to_asm_8cpp_1a6d8a7d4e2c87b75c0df0ab25de752c14" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int STACK_FRAME_OFFSET</definition>
        <argsstring></argsstring>
        <name>STACK_FRAME_OFFSET</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/TranslateToAsm.cpp" line="22" column="5" bodyfile="src/Legacy/TranslateToAsm.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_translate_to_asm_8cpp_1ae843d1689b6085f884b9b3c4cddb95a2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int OpenAsmFile</definition>
        <argsstring>(const char *const name)</argsstring>
        <name>OpenAsmFile</name>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>ASM FILE///////////////////////////////////////////////////////. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/TranslateToAsm.cpp" line="184" column="12" bodyfile="src/Legacy/TranslateToAsm.cpp" bodystart="184" bodyend="202" declfile="src/Legacy/TranslateToAsm.cpp" declline="24" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_translate_to_asm_8cpp_1a30c3913e55c5203b4d4a8cb3530ecc0b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CloseAsmFile</definition>
        <argsstring>()</argsstring>
        <name>CloseAsmFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/TranslateToAsm.cpp" line="204" column="6" bodyfile="src/Legacy/TranslateToAsm.cpp" bodystart="204" bodyend="217" declfile="src/Legacy/TranslateToAsm.cpp" declline="25" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_translate_to_asm_8cpp_1adac78ea30a1f82655493397d0eb51bc9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int SetAsmFile</definition>
        <argsstring>(AsmCtx *ctx)</argsstring>
        <name>SetAsmFile</name>
        <param>
          <type><ref refid="struct_asm_ctx" kindref="compound">AsmCtx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/TranslateToAsm.cpp" line="219" column="12" bodyfile="src/Legacy/TranslateToAsm.cpp" bodystart="219" bodyend="237" declfile="src/Legacy/TranslateToAsm.cpp" declline="27" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="_translate_to_asm_8cpp_1a044d499217c5822a525c8f63f1513b6f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int AddToAsm</definition>
        <argsstring>(AsmCtx *ctx, const Token *token)</argsstring>
        <name>AddToAsm</name>
        <param>
          <type><ref refid="struct_asm_ctx" kindref="compound">AsmCtx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/TranslateToAsm.cpp" line="98" column="12" bodyfile="src/Legacy/TranslateToAsm.cpp" bodystart="98" bodyend="142" declfile="src/Legacy/TranslateToAsm.cpp" declline="28" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="_translate_to_asm_8cpp_1aaa08ee75154d6ae8d292a7bcef7a5dcd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int InitGlobalVars</definition>
        <argsstring>(const AsmCtx *ctx)</argsstring>
        <name>InitGlobalVars</name>
        <param>
          <type>const <ref refid="struct_asm_ctx" kindref="compound">AsmCtx</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/TranslateToAsm.cpp" line="144" column="12" bodyfile="src/Legacy/TranslateToAsm.cpp" bodystart="144" bodyend="181" declfile="src/Legacy/TranslateToAsm.cpp" declline="30" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="_translate_to_asm_8cpp_1a870e1da1026dc123f143ffdd51c01c49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TranslateToAsm</definition>
        <argsstring>(const Program *const program, const char *const name)</argsstring>
        <name>TranslateToAsm</name>
        <param>
          <type>const <ref refid="struct_program" kindref="compound">Program</ref> *const</type>
          <declname>program</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/TranslateToAsm.cpp" line="35" column="5" bodyfile="src/Legacy/TranslateToAsm.cpp" bodystart="35" bodyend="96"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;TranslateToAsm.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;time.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;BackEndConfig.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AsmCtx.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;DSL.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Grammar.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LangUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LogMacroses.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;EasyDebug.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SomeStuff.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FILE*<sp/>ASM_FILE<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>STACK_FRAME_OFFSET<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>OpenAsmFile<sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>name);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CloseAsmFile<sp/>();</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SetAsmFile<sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_asm_ctx" kindref="compound">AsmCtx</ref>*<sp/>ctx);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AddToAsm<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_asm_ctx" kindref="compound">AsmCtx</ref>*<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>InitGlobalVars<sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_asm_ctx" kindref="compound">AsmCtx</ref>*<sp/>ctx);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../src/TranslatorUtils_.ars&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../src/Handlers_.ars&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TranslateToAsm<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_program" kindref="compound">Program</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>program,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>name)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>$log(1)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(program,<sp/><sp/><sp/><sp/><sp/><sp/>EFAULT,<sp/>return<sp/>LFAILURE);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EFAULT,<sp/>return<sp/>LFAILURE);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assertlog(global_table,<sp/>EFAULT,<sp/>return<sp/>LFAILURE);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CHECK<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!program-&gt;root)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_message(</highlight><highlight class="stringliteral">&quot;Program<sp/>root<sp/>can&apos;t<sp/>be<sp/>NULL,<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>program-&gt;root);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!program-&gt;string_arr)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_message(</highlight><highlight class="stringliteral">&quot;Program<sp/>must<sp/>have<sp/>string<sp/>arr<sp/>to<sp/>work<sp/>properly\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(OpenAsmFile(name)<sp/>!=<sp/>SUCCESS)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_message(</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>open<sp/>%s<sp/>for<sp/>ASM<sp/>file\n&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_asm_ctx" kindref="compound">AsmCtx</ref><sp/><sp/>ctx_{};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_asm_ctx" kindref="compound">AsmCtx</ref>*<sp/>ctx<sp/>=<sp/>&amp;ctx_;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AsmCtxCtor(ctx,<sp/>program)<sp/>!=<sp/>SUCCESS)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PROGRAM(ctx)<sp/>=<sp/>program;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ADD<sp/>TO<sp/>ASM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SetAsmFile(ctx)<sp/>!=<sp/>SUCCESS)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>FAILURE_EXIT;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AddToAsm(ctx,<sp/>program-&gt;root)<sp/>!=<sp/>SUCCESS)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>FAILURE_EXIT;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;number_of_global_vars<sp/>!=<sp/>NUMBER_OF_GLOBAL_VARS(program))</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_message(</highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>global<sp/>variables<sp/>from<sp/>program<sp/>and<sp/>from<sp/>ctx<sp/>differs<sp/>(ctx:<sp/>%d,<sp/>program:<sp/>%d)\n&quot;</highlight><highlight class="normal">,<sp/>ctx-&gt;number_of_global_vars,<sp/>NUMBER_OF_GLOBAL_VARS(program))</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>FAILURE_EXIT;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(InitGlobalVars(ctx)<sp/>!=<sp/>SUCCESS)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>FAILURE_EXIT;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>CloseAsmFile();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>AsmCtxDtor(ctx);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LSUCCESS;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>FAILURE_EXIT:</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>CloseAsmFile();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>AsmCtxDtor(ctx);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AddToAsm<sp/>(<ref refid="struct_asm_ctx" kindref="compound">AsmCtx</ref>*<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>token)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>$log(3)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(ctx,<sp/>EFAULT,<sp/>return<sp/>LFAILURE);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!token)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>SUCCESS;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>$LOG_TOKEN(token,<sp/>STRING_ARR(ctx))</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>think<sp/>about<sp/>allowed<sp/>handlers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>switch<sp/>(TYPE(token))</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NAME:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NameHandler<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ctx,<sp/>token);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>INITIALIZATOR:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>VarInitialization<sp/><sp/><sp/><sp/><sp/>(ctx,<sp/>token);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FUNCTION:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FunctionHandler<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ctx,<sp/>token);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CALL:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CallHandler<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ctx,<sp/>token);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CONSTANT:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ConstantHandler<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ctx,<sp/>token);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>INSTRUCTION:<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>InstructionHandler<sp/><sp/><sp/><sp/>(ctx,<sp/>token);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>OPERATOR:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MathOperationsHandler<sp/>(ctx,<sp/>token);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NATIVE_FUNCTION:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NativeFunctionHandler<sp/>(ctx,<sp/>token);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FUNCTION_RET_TYPE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FunctionReturnHandler<sp/>(ctx,<sp/>token);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>PARAMETR:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ParametrHandler<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(ctx,<sp/>token);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ASSIGMENT:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AssigmentHandler<sp/><sp/><sp/><sp/><sp/><sp/>(ctx,<sp/>token);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STATEMENT:</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(AddToAsm(ctx,<sp/>LEFT(token))<sp/>==<sp/>SUCCESS,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RIGHT(token))</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(AddToAsm(ctx,<sp/>RIGHT(token))<sp/>==<sp/>SUCCESS,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>report_translator_error(</highlight><highlight class="stringliteral">&quot;Wrong<sp/>token<sp/>type\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>YOU_SHALL_NOT_PASS</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintToken(token,<sp/>STRING_ARR(ctx));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>InitGlobalVars<sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_asm_ctx" kindref="compound">AsmCtx</ref>*<sp/>ctx)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>$log(1)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(ctx,<sp/>EFAULT,<sp/>return<sp/>BAD_ARGUMENT);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assertlog(global_table,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EFAULT,<sp/>return<sp/>BAD_ARGUMENT);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assertlog(number_of_global_vars<sp/>&gt;=<sp/>0,<sp/>EFAULT,<sp/>return<sp/>BAD_ARGUMENT);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>STACK_FRAME_OFFSET<sp/>=<sp/>ctx-&gt;number_of_global_vars;<sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>ASM_SEPARATOR</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>assprint(&quot;\t\t:<sp/>InitGlobalVars\n\n&quot;);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>var_init_cnt<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>while(var_init_cnt<sp/>&lt;<sp/>ctx-&gt;number_of_global_vars)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_label" kindref="compound">Label</ref>*<sp/>global_var<sp/>=<sp/>ctx-&gt;global_vars-&gt;label_arr[var_init_cnt];</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wcast-qual&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>$p(global_var-&gt;global_initialization)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(VarInitialization((<ref refid="struct_asm_ctx" kindref="compound">AsmCtx</ref>*)<sp/>ctx,<sp/>global_var-&gt;global_initialization,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>==<sp/>SUCCESS,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_init_cnt++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var_init_cnt<sp/>!=<sp/>ctx-&gt;number_of_global_vars)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_message(</highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>initialized<sp/>global<sp/>var<sp/>doesn&apos;t<sp/>match<sp/>with<sp/>number<sp/>of<sp/>ctx<sp/>number<sp/>of<sp/>global<sp/>vars<sp/>(var_cnt:<sp/>%d,<sp/>ctx:<sp/>%d)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var_init_cnt,<sp/>ctx-&gt;number_of_global_vars);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>assprint(</highlight><highlight class="stringliteral">&quot;ret\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>ASM_SEPARATOR</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>OpenAsmFile<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>name)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name)<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>ASM_FILE<sp/>=<sp/>fopen<sp/>(name,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ASM_FILE)<sp/></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logf(</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>create<sp/>ASM_FILE<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>create<sp/>ASM_FILE<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>name);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>LFAILURE;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>setvbuf(ASM_FILE,<sp/>NULL,<sp/>_IONBF,<sp/>0);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/>NewYorkTime<sp/>=<sp/>time(NULL);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>assprint<sp/>(</highlight><highlight class="stringliteral">&quot;;%s\n&quot;</highlight><highlight class="normal">,<sp/>ctime(&amp;NewYorkTime));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LSUCCESS;<sp/></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CloseAsmFile()</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ASM_FILE)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>assprint(</highlight><highlight class="stringliteral">&quot;\n;end<sp/>{document}\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush<sp/>(ASM_FILE);<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose<sp/>(ASM_FILE);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>ASM_FILE<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SetAsmFile<sp/>(<ref refid="struct_asm_ctx" kindref="compound">AsmCtx</ref>*<sp/>ctx)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(ctx,<sp/>EFAULT,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BAD_ARGUMENT);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>assprint(</highlight><highlight class="stringliteral">&quot;call<sp/>:<sp/>InitGlobalVars\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>STACK_FRAME_OFFSET<sp/>=<sp/>NUMBER_OF_GLOBAL_VARS(PROGRAM(ctx));</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>assprint(</highlight><highlight class="stringliteral">&quot;\n;Setting<sp/>Stack<sp/>Frame\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>assprint(</highlight><highlight class="stringliteral">&quot;push<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>STACK_FRAME_OFFSET<sp/>+<sp/>START_RAM_ADDRESS_FOR_GLOBAL_VARS);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>assprint(</highlight><highlight class="stringliteral">&quot;pop<sp/>r%cx\n&quot;</highlight><highlight class="normal">,<sp/>VARIABLES_ADDRESS_REG<sp/>+<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>-<sp/>1);<sp/></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>assprint(</highlight><highlight class="stringliteral">&quot;\ncall<sp/>:<sp/>main\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>assprint(</highlight><highlight class="stringliteral">&quot;\nhlt\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>ASM_SEPARATOR</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
    </programlisting>
    <location file="src/Legacy/TranslateToAsm.cpp"/>
  </compounddef>
</doxygen>
