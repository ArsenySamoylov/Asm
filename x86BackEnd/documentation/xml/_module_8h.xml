<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_module_8h" kind="file" language="C++">
    <compoundname>Module.h</compoundname>
    <includes refid="_value_8h" local="yes">Value.h</includes>
    <includes refid="_instructions_8h" local="yes">Instructions.h</includes>
    <includedby refid="_ast_to_i_r_8h" local="yes">src/IR/AstToIR/AstToIR.h</includedby>
    <includedby refid="_builder_8h" local="yes">src/IR/AstToIR/Builder.h</includedby>
    <includedby refid="_dump_i_r_8h" local="yes">src/IR/DumpIR/DumpIR.h</includedby>
    <includedby refid="_module_8cpp" local="yes">src/IR/Module/Module.cpp</includedby>
    <incdepgraph>
      <node id="13">
        <label>Instructions.h</label>
        <link refid="_instructions_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Storage.h</label>
        <link refid="_storage_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cassert</label>
      </node>
      <node id="10">
        <label>TypeDefs.h</label>
        <link refid="_type_defs_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>stddef.h</label>
      </node>
      <node id="12">
        <label>RegistersUsage.h</label>
        <link refid="_registers_usage_8h_source"/>
      </node>
      <node id="4">
        <label>ValueArrTemplate.h</label>
        <link refid="_value_arr_template_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cstdio</label>
      </node>
      <node id="1">
        <label>src/IR/Module/Module.h</label>
        <link refid="_module_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cstdlib</label>
      </node>
      <node id="3">
        <label>cstddef</label>
      </node>
      <node id="2">
        <label>Value.h</label>
        <link refid="_value_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>NoCopyable.h</label>
        <link refid="_no_copyable_8h_source"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>src/IR/DumpIR/DumpIR.h</label>
        <link refid="_dump_i_r_8h_source"/>
      </node>
      <node id="3">
        <label>src/IR/AstToIR/Builder.h</label>
        <link refid="_builder_8h_source"/>
      </node>
      <node id="1">
        <label>src/IR/Module/Module.h</label>
        <link refid="_module_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/IR/AstToIR/AstToIR.h</label>
        <link refid="_ast_to_i_r_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_module" prot="public">Module</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_module_8h_1a7218d36a9589006c3f427ed8cb4845a7" prot="public" static="no" strong="no">
        <type></type>
        <name>NativeFunction</name>
        <enumvalue id="_module_8h_1a7218d36a9589006c3f427ed8cb4845a7a5bd4b30091b874497e54d41257707a61" prot="public">
          <name>Fin</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_module_8h_1a7218d36a9589006c3f427ed8cb4845a7a25590a7712988624b84e5fc560dfda9c" prot="public">
          <name>Fout</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_module_8h_1a7218d36a9589006c3f427ed8cb4845a7a54cc8639b2ae32fad159203ab1b7aa4a" prot="public">
          <name>Pow</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_module_8h_1a7218d36a9589006c3f427ed8cb4845a7a945ca84f0cf6d5f725264a980b939a9c" prot="public">
          <name>Sin</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_module_8h_1a7218d36a9589006c3f427ed8cb4845a7ac2dce1668fa917e2c23ef641a406044d" prot="public">
          <name>Cos</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Module/Module.h" line="34" column="1" bodyfile="src/IR/Module/Module.h" bodystart="35" bodyend="41"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_module_8h_1abf33450f7311ba493cd4bd0ab36cacb4" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int N_NATIVE_FUNCTIONS</definition>
        <argsstring></argsstring>
        <name>N_NATIVE_FUNCTIONS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Module/Module.h" line="43" column="18" bodyfile="src/IR/Module/Module.cpp" bodystart="67" bodyend="-1" declfile="src/IR/Module/Module.h" declline="43" declcolumn="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_module_8h_1a7a9c28420736acd6b3fe73fc4dcfa26c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_function" kindref="compound">Function</ref> *</type>
        <definition>Function* GetNativeFunction</definition>
        <argsstring>(int func_num)</argsstring>
        <name>GetNativeFunction</name>
        <param>
          <type>int</type>
          <declname>func_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Module/Module.h" line="44" column="11" bodyfile="src/IR/Module/Module.cpp" bodystart="69" bodyend="73" declfile="src/IR/Module/Module.h" declline="44" declcolumn="11"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_value_8h" kindref="compound">Value.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_instructions_8h" kindref="compound">Instructions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_elf" kindref="compound">Elf</ref>;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="class_module" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_module" kindref="compound">Module</ref></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_value_arr" kindref="compound">ValueArr&lt;GlobalVar&gt;</ref><sp/>global_vars;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_value_arr" kindref="compound">ValueArr&lt;Function&gt;</ref><sp/>functions;<sp/><sp/></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_value_arr" kindref="compound">ValueArr&lt;Constant&gt;</ref><sp/>const_pool;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_module" kindref="compound">Module</ref><sp/>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="class_module" kindref="compound">Module</ref><sp/>();</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dump<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>out_file)<sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>translate_x86<sp/><sp/><sp/><sp/>(<ref refid="struct_elf" kindref="compound">Elf</ref>*<sp/>elf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path_to_assembler_dump)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_func<sp/><sp/>(<ref refid="class_function" kindref="compound">Function</ref>*<sp/><sp/>func);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_var<sp/><sp/><sp/>(<ref refid="class_global_var" kindref="compound">GlobalVar</ref>*<sp/>var);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_const<sp/>(<ref refid="class_constant" kindref="compound">Constant</ref>*<sp/><sp/>constant);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dumpGlobalVars<sp/>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>dumpFunctions<sp/><sp/>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_function" kindref="compound">Function</ref>*<sp/>find_main<sp/>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>NativeFunction</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>Fin<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>Fout,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>Pow,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>Sin,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>Cos,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N_NATIVE_FUNCTIONS;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="class_function" kindref="compound">Function</ref>*<sp/><sp/>GetNativeFunction<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>func_num);</highlight></codeline>
    </programlisting>
    <location file="src/IR/Module/Module.h"/>
  </compounddef>
</doxygen>
