<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_translate_to_asm_8h" kind="file" language="C++">
    <compoundname>TranslateToAsm.h</compoundname>
    <includes refid="_program_8h" local="yes">Program.h</includes>
    <includedby refid="_translate_to_asm_8cpp" local="yes">src/Legacy/TranslateToAsm.cpp</includedby>
    <includedby refid="src_2main_8cpp" local="yes">src/main.cpp</includedby>
    <incdepgraph>
      <node id="6">
        <label>Tabels.h</label>
        <link refid="_tabels_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Legacy/TranslateToAsm.h</label>
        <link refid="_translate_to_asm_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="4">
        <label>NameTable.h</label>
        <link refid="_name_table_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Token.h</label>
        <link refid="_token_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Program.h</label>
        <link refid="_program_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_translate_to_asm_8h_1a5c61f5da27b9ad24aa99350837c61752" prot="public" static="no">
        <name>SHOW_VAR_NAME</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/TranslateToAsm.h" line="7" column="9" bodyfile="src/Legacy/TranslateToAsm.h" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_translate_to_asm_8h_1a250c0baba624b8a2e5069d80e95a52ba" prot="public" static="no">
        <name>PROGRAM</name>
        <param><defname>CTX</defname></param>
        <initializer>((CTX)-&gt;program)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/TranslateToAsm.h" line="9" column="9" bodyfile="src/Legacy/TranslateToAsm.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_translate_to_asm_8h_1a7ad204a49829365c740c57e83c8ac186" prot="public" static="no">
        <name>STRING_ARR</name>
        <param><defname>CTX</defname></param>
        <initializer>(PROGRAM(CTX)-&gt;string_arr)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/TranslateToAsm.h" line="10" column="9" bodyfile="src/Legacy/TranslateToAsm.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_translate_to_asm_8h_1ac01ce2935ba4595501b1f8445c864820" prot="public" static="no">
        <name>FREE_RAM_ADDRESS</name>
        <param><defname>CTX</defname></param>
        <initializer>((CTX)-&gt;free_ram_address)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/TranslateToAsm.h" line="12" column="9" bodyfile="src/Legacy/TranslateToAsm.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_translate_to_asm_8h_1a219452ab4dd5a87745689080fed72803" prot="public" static="no">
        <name>GLOBAL_VARS</name>
        <param><defname>CTX</defname></param>
        <initializer>((CTX)-&gt;global_vars)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/TranslateToAsm.h" line="13" column="9" bodyfile="src/Legacy/TranslateToAsm.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_translate_to_asm_8h_1a06f6d76497021d2990336463f86dda4b" prot="public" static="no">
        <name>PUSH_CONST</name>
        <param><defname>val</defname></param>
        <initializer>assprint(&quot;push %d\n&quot;, (int) floor(val * SOFT_CPU_PRECISION))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/TranslateToAsm.h" line="15" column="9" bodyfile="src/Legacy/TranslateToAsm.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_translate_to_asm_8h_1a920206c9f0adac3980f2c05970705840" prot="public" static="no">
        <name>PUSH_REG</name>
        <param><defname>reg</defname></param>
        <initializer>assprint(&quot;push r%cx\n&quot;, reg + &apos;a&apos; - 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/TranslateToAsm.h" line="16" column="9" bodyfile="src/Legacy/TranslateToAsm.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_translate_to_asm_8h_1a9a2bf4c41966542d01fb22e17a2597dc" prot="public" static="no">
        <name>PUSH_RAM</name>
        <param><defname>mem</defname></param>
        <initializer>assprint(&quot;push [%d]\n&quot;, mem)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/TranslateToAsm.h" line="17" column="9" bodyfile="src/Legacy/TranslateToAsm.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_translate_to_asm_8h_1afa74d02cb86a363b9dfa5bebc239a124" prot="public" static="no">
        <name>POP_REG</name>
        <param><defname>reg</defname></param>
        <initializer>assprint(&quot;pop  r%cx\n&quot;, reg + &apos;a&apos; - 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/TranslateToAsm.h" line="19" column="9" bodyfile="src/Legacy/TranslateToAsm.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_translate_to_asm_8h_1aa0ed04be43c8d87185dc12211f69a94a" prot="public" static="no">
        <name>ASM_OP_CMD</name>
        <param><defname>token</defname></param>
        <initializer>                                switch (OP(token))                        \
                                {                                       \
                                case ADD:  assprint(&quot;ADD\n&quot;);  break;   \
                                case SUB:  assprint(&quot;SUB\n&quot;);  break;   \
                                case DIV:  assprint(&quot;FDIV\n&quot;); break;   \
                                case MUL:  assprint(&quot;FMUL\n&quot;); break;   \
                                case POW:  assprint(&quot;POW\n&quot;);  break;   \
                                default: break;                         \
                                }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/TranslateToAsm.h" line="21" column="9" bodyfile="src/Legacy/TranslateToAsm.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_translate_to_asm_8h_1a31b4d1694fade8a3e0dc39cfd6e257be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int TranslateToAsm</definition>
        <argsstring>(const Program *const root, const char *const name)</argsstring>
        <name>TranslateToAsm</name>
        <param>
          <type>const <ref refid="struct_program" kindref="compound">Program</ref> *const</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/TranslateToAsm.h" line="5" column="5" bodyfile="src/Legacy/TranslateToAsm.cpp" bodystart="35" bodyend="96" declfile="src/Legacy/TranslateToAsm.h" declline="5" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Program.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TranslateToAsm<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_program" kindref="compound">Program</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>name);</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SHOW_VAR_NAME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PROGRAM(CTX)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((CTX)-&gt;program)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>STRING_ARR(CTX)<sp/><sp/><sp/><sp/>(PROGRAM(CTX)-&gt;string_arr)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FREE_RAM_ADDRESS(CTX)<sp/><sp/>((CTX)-&gt;free_ram_address)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GLOBAL_VARS(CTX)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((CTX)-&gt;global_vars)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PUSH_CONST(val)<sp/>assprint(&quot;push<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>(int)<sp/>floor(val<sp/>*<sp/>SOFT_CPU_PRECISION))</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PUSH_REG(reg)<sp/><sp/><sp/>assprint(&quot;push<sp/>r%cx\n&quot;</highlight><highlight class="normal">,<sp/>reg<sp/>+<sp/>&apos;a&apos;<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PUSH_RAM(mem)<sp/><sp/><sp/>assprint(&quot;push<sp/>[%d]\n&quot;</highlight><highlight class="normal">,<sp/>mem)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>POP_REG(reg)<sp/><sp/><sp/><sp/>assprint(&quot;pop<sp/><sp/>r%cx\n&quot;</highlight><highlight class="normal">,<sp/>reg<sp/>+<sp/>&apos;a&apos;<sp/>-<sp/>1)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASM_OP_CMD(token)<sp/><sp/><sp/><sp/><sp/>switch<sp/>(OP(token))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>ADD:<sp/><sp/>assprint(&quot;ADD\n&quot;</highlight><highlight class="normal">);<sp/><sp/>break;<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>SUB:<sp/><sp/>assprint(&quot;SUB\n&quot;);<sp/><sp/>break;<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>DIV:<sp/><sp/>assprint(&quot;FDIV\n&quot;);<sp/>break;<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>MUL:<sp/><sp/>assprint(&quot;FMUL\n&quot;);<sp/>break;<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>POW:<sp/><sp/>assprint(&quot;POW\n&quot;);<sp/><sp/>break;<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>default:<sp/>break;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASM_SEPARATOR<sp/><sp/>assprint(&quot;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
    </programlisting>
    <location file="src/Legacy/TranslateToAsm.h"/>
  </compounddef>
</doxygen>
