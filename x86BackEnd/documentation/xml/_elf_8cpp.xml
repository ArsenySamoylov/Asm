<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_elf_8cpp" kind="file" language="C++">
    <compoundname>Elf.cpp</compoundname>
    <includes local="no">assert.h</includes>
    <includes local="no">stdio.h</includes>
    <includes refid="_elf_8hpp" local="yes">Elf.hpp</includes>
    <incdepgraph>
      <node id="2">
        <label>assert.h</label>
      </node>
      <node id="5">
        <label>elf.h</label>
      </node>
      <node id="1">
        <label>src/Elf/Elf.cpp</label>
        <link refid="_elf_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Buffer.hpp</label>
        <link refid="_buffer_8hpp_source"/>
      </node>
      <node id="4">
        <label>Elf.hpp</label>
        <link refid="_elf_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_elf_8cpp_1aa90cac659d18e8ef6294c7ae337f6b58" prot="public" static="no">
        <name>SUCCESS</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Elf/Elf.cpp" line="6" column="9" bodyfile="src/Elf/Elf.cpp" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_elf_8cpp_1a6d58f9ac447476b4e084d7ca383f5183" prot="public" static="no">
        <name>FAILURE</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Elf/Elf.cpp" line="7" column="9" bodyfile="src/Elf/Elf.cpp" bodystart="7" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_elf_8cpp_1a9512879dbb2eeddbdf1fc5f1fd7e07be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int SetEhdr</definition>
        <argsstring>(Elf64_Ehdr *elf)</argsstring>
        <name>SetEhdr</name>
        <param>
          <type>Elf64_Ehdr *</type>
          <declname>elf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Elf/Elf.cpp" line="35" column="12" bodyfile="src/Elf/Elf.cpp" bodystart="35" bodyend="57" declfile="src/Elf/Elf.cpp" declline="12" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="_elf_8cpp_1ab12de91857b376204f1909be415d729a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int SetPhdr</definition>
        <argsstring>(Elf64_Phdr *header, uint32_t p_type, Elf64_Addr segment_virtual_add, uint32_t rights_flags)</argsstring>
        <name>SetPhdr</name>
        <param>
          <type>Elf64_Phdr *</type>
          <declname>header</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>p_type</declname>
        </param>
        <param>
          <type>Elf64_Addr</type>
          <declname>segment_virtual_add</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>rights_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Elf/Elf.cpp" line="59" column="12" bodyfile="src/Elf/Elf.cpp" bodystart="59" bodyend="69" declfile="src/Elf/Elf.cpp" declline="13" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="_elf_8cpp_1a74d97b161ea0f8e73a78237d7fbfda05" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int SetPhdrSize</definition>
        <argsstring>(Elf64_Phdr *header, uint64_t size)</argsstring>
        <name>SetPhdrSize</name>
        <param>
          <type>Elf64_Phdr *</type>
          <declname>header</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Elf/Elf.cpp" line="71" column="12" bodyfile="src/Elf/Elf.cpp" bodystart="71" bodyend="79" declfile="src/Elf/Elf.cpp" declline="15" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="_elf_8cpp_1a1947602f480616fd36582a1d88695cb8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int SetPhdrOffset</definition>
        <argsstring>(Elf64_Phdr *header, Elf64_Off segment_offset)</argsstring>
        <name>SetPhdrOffset</name>
        <param>
          <type>Elf64_Phdr *</type>
          <declname>header</declname>
        </param>
        <param>
          <type>Elf64_Off</type>
          <declname>segment_offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Elf/Elf.cpp" line="81" column="12" bodyfile="src/Elf/Elf.cpp" bodystart="81" bodyend="88" declfile="src/Elf/Elf.cpp" declline="16" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="_elf_8cpp_1af5881da67269281d64f11ca4e6100428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SetElfHeaders</definition>
        <argsstring>(ElfHeaders *elf)</argsstring>
        <name>SetElfHeaders</name>
        <param>
          <type><ref refid="struct_elf_headers" kindref="compound">ElfHeaders</ref> *</type>
          <declname>elf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Elf/Elf.cpp" line="18" column="5" bodyfile="src/Elf/Elf.cpp" bodystart="18" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="_elf_8cpp_1a5dfd6d25294c40a17628d0d8549523e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ElfCtor</definition>
        <argsstring>(Elf *elf)</argsstring>
        <name>ElfCtor</name>
        <param>
          <type><ref refid="struct_elf" kindref="compound">Elf</ref> *</type>
          <declname>elf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Elf/Elf.cpp" line="91" column="5" bodyfile="src/Elf/Elf.cpp" bodystart="91" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="_elf_8cpp_1a43f6ba84507e3d29e019fd063bb1a86e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ElfDtor</definition>
        <argsstring>(Elf *elf)</argsstring>
        <name>ElfDtor</name>
        <param>
          <type><ref refid="struct_elf" kindref="compound">Elf</ref> *</type>
          <declname>elf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Elf/Elf.cpp" line="106" column="5" bodyfile="src/Elf/Elf.cpp" bodystart="106" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="_elf_8cpp_1ad2d1ff0fc7774c1297e4cda84c4b6ee1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int FlushSegmentData</definition>
        <argsstring>(Elf64_Phdr *segment, Buffer *src, Buffer *program_buf)</argsstring>
        <name>FlushSegmentData</name>
        <param>
          <type>Elf64_Phdr *</type>
          <declname>segment</declname>
        </param>
        <param>
          <type><ref refid="struct_buffer" kindref="compound">Buffer</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="struct_buffer" kindref="compound">Buffer</ref> *</type>
          <declname>program_buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Elf/Elf.cpp" line="159" column="12" bodyfile="src/Elf/Elf.cpp" bodystart="159" bodyend="171" declfile="src/Elf/Elf.cpp" declline="119" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="_elf_8cpp_1a23cf1e3c31026812a50e6470220d1d3f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int FlushSegmentsData</definition>
        <argsstring>(Elf *elf)</argsstring>
        <name>FlushSegmentsData</name>
        <param>
          <type><ref refid="struct_elf" kindref="compound">Elf</ref> *</type>
          <declname>elf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Elf/Elf.cpp" line="173" column="12" bodyfile="src/Elf/Elf.cpp" bodystart="173" bodyend="184" declfile="src/Elf/Elf.cpp" declline="120" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="_elf_8cpp_1a51cf8a1711f3ee313155e8ff884e78c0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int FlushHeaders</definition>
        <argsstring>(Elf *elf)</argsstring>
        <name>FlushHeaders</name>
        <param>
          <type><ref refid="struct_elf" kindref="compound">Elf</ref> *</type>
          <declname>elf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Elf/Elf.cpp" line="186" column="12" bodyfile="src/Elf/Elf.cpp" bodystart="186" bodyend="192" declfile="src/Elf/Elf.cpp" declline="121" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="_elf_8cpp_1af564b9e136739affcd80efb133fc0bc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int WriteElf</definition>
        <argsstring>(Elf *elf, const char *path_to_out_file)</argsstring>
        <name>WriteElf</name>
        <param>
          <type><ref refid="struct_elf" kindref="compound">Elf</ref> *</type>
          <declname>elf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path_to_out_file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Elf/Elf.cpp" line="123" column="5" bodyfile="src/Elf/Elf.cpp" bodystart="123" bodyend="157"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Elf.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SUCCESS<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAILURE<sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wformat&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SetEhdr<sp/>(Elf64_Ehdr*<sp/>elf);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SetPhdr<sp/>(Elf64_Phdr*<sp/>header,<sp/>uint32_t<sp/>p_type,<sp/>Elf64_Addr<sp/>segment_virtual_add,<sp/>uint32_t<sp/>rights_flags);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SetPhdrSize<sp/><sp/><sp/>(Elf64_Phdr*<sp/>header,<sp/>uint64_t<sp/>size);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SetPhdrOffset<sp/>(Elf64_Phdr*<sp/>header,<sp/>Elf64_Off<sp/>segment_offset);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SetElfHeaders<sp/>(<ref refid="struct_elf_headers" kindref="compound">ElfHeaders</ref>*<sp/>elf)</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(elf);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>SetEhdr<sp/>(&amp;elf-&gt;elf_header);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPhdr<sp/>(&amp;elf-&gt;code_phdr,<sp/>PT_LOAD,<sp/><sp/>CODE_VIRTUAL_ADDRESS,<sp/><sp/><sp/>PF_X<sp/>|<sp/>PF_R);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SetPhdr<sp/>(&amp;elf-&gt;data_phdr,<sp/>PT_LOAD,<sp/><sp/>RODATA_VIRTUAL_ADDRESS,<sp/>PF_R<sp/>|<sp/>PF_W);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SetPhdr<sp/>(&amp;elf-&gt;stdlib_phdr,<sp/>PT_LOAD,<sp/>STDLIB_VIRTUAL_ADDRESS,<sp/>PF_X<sp/>|<sp/>PF_R);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPhdr<sp/>(&amp;elf-&gt;stack_phdr,<sp/>PT_GNU_STACK,<sp/>0,<sp/><sp/>PF_R<sp/>|<sp/>PF_W);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>elf-&gt;stack_phdr.p_align<sp/>=<sp/>0x10;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SetEhdr<sp/>(Elf64_Ehdr*<sp/>elf)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(elf);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>*elf<sp/>=<sp/>{<sp/>.e_ident<sp/>=<sp/>{<sp/>ELFMAG0,<sp/>ELFMAG1,<sp/>ELFMAG2,<sp/>ELFMAG3,<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ELFCLASS64,<sp/>ELFDATA2LSB,<sp/>EV_CURRENT,<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ELFOSABI_SYSV<sp/>},</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.e_type<sp/><sp/><sp/><sp/>=<sp/>ET_EXEC,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.e_machine<sp/>=<sp/>EM_X86_64,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.e_version<sp/>=<sp/>EV_CURRENT,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.e_entry<sp/>=<sp/>ENTRY_POINT,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.e_phoff<sp/>=<sp/>PHDR_TABLE_OFFSET,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.e_ehsize<sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Elf64_Ehdr),</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.e_phentsize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Elf64_Phdr),</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.e_phnum<sp/><sp/><sp/><sp/><sp/>=<sp/>NUMBER_OF_SEGMENTS,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SetPhdr<sp/>(Elf64_Phdr*<sp/>header,<sp/>uint32_t<sp/>p_type,<sp/>Elf64_Addr<sp/>segment_virtual_add,<sp/>uint32_t<sp/>rights_flags)</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(header);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>*header<sp/>=<sp/>{<sp/>.p_type<sp/><sp/>=<sp/>p_type,<sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.p_flags<sp/>=<sp/>rights_flags,<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.p_vaddr<sp/>=<sp/>segment_virtual_add,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SetPhdrSize<sp/>(Elf64_Phdr*<sp/>header,<sp/>uint64_t<sp/>size)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(header);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>header-&gt;p_filesz<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>header-&gt;p_memsz<sp/><sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SetPhdrOffset<sp/>(Elf64_Phdr*<sp/>segment_hdr,<sp/>Elf64_Off<sp/>segment_offset)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(segment_hdr);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>segment_hdr-&gt;p_offset<sp/>=<sp/>segment_offset;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ElfCtor<sp/>(<ref refid="struct_elf" kindref="compound">Elf</ref>*<sp/>elf)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(elf);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>SetElfHeaders(&amp;elf-&gt;headers);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>BufferCtor<sp/>(&amp;elf-&gt;code_buf);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BufferCtor<sp/>(&amp;elf-&gt;data_buf);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BufferCtor<sp/>(&amp;elf-&gt;stdlib_buf);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>BufferCtor<sp/>(&amp;elf-&gt;program_buf);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ElfDtor<sp/>(<ref refid="struct_elf" kindref="compound">Elf</ref>*<sp/>elf)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(elf);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>BufferDtor<sp/>(&amp;elf-&gt;code_buf);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BufferDtor<sp/>(&amp;elf-&gt;data_buf);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BufferDtor<sp/>(&amp;elf-&gt;stdlib_buf);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>BufferDtor<sp/>(&amp;elf-&gt;program_buf);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FlushSegmentData<sp/><sp/>(Elf64_Phdr*<sp/>segment,<sp/><ref refid="struct_buffer" kindref="compound">Buffer</ref>*<sp/>src,<sp/><ref refid="struct_buffer" kindref="compound">Buffer</ref>*<sp/>program_buf);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FlushSegmentsData<sp/>(<ref refid="struct_elf" kindref="compound">Elf</ref>*<sp/>elf);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FlushHeaders<sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_elf" kindref="compound">Elf</ref>*<sp/>elf);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>WriteElf<sp/>(<ref refid="struct_elf" kindref="compound">Elf</ref>*<sp/>elf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path_to_out_file)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(elf);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(path_to_out_file);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>out_file<sp/>=<sp/>fopen<sp/>(path_to_out_file,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(out_file);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPhdrSize<sp/>(&amp;elf-&gt;headers.code_phdr,<sp/><sp/><sp/>elf-&gt;code_buf.size);<sp/></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SetPhdrSize<sp/>(&amp;elf-&gt;headers.data_phdr,<sp/><sp/><sp/>elf-&gt;data_buf.size);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SetPhdrSize<sp/>(&amp;elf-&gt;headers.stdlib_phdr,<sp/>elf-&gt;stdlib_buf.size<sp/>-<sp/>10);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>elf-&gt;headers.stack_phdr.p_filesz<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>elf-&gt;headers.stack_phdr.p_memsz<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>current_program_size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_elf_headers" kindref="compound">ElfHeaders</ref>);<sp/></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>SetPhdrOffset<sp/>(&amp;elf-&gt;headers.code_phdr,<sp/><sp/><sp/>current_program_size);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_program_size<sp/>+=<sp/>elf-&gt;code_buf.size;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SetPhdrOffset<sp/>(&amp;elf-&gt;headers.data_phdr,<sp/>current_program_size);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>current_program_size<sp/>+=<sp/>elf-&gt;data_buf.size;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SetPhdrOffset<sp/>(&amp;elf-&gt;headers.stdlib_phdr,<sp/>current_program_size);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>current_program_size<sp/>+=<sp/>elf-&gt;stdlib_buf.size;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>FlushHeaders<sp/><sp/><sp/><sp/><sp/><sp/>(elf);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>FlushSegmentsData<sp/>(elf);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>fwrite<sp/>(elf-&gt;program_buf.buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">),<sp/>current_program_size,<sp/>out_file);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose<sp/>(out_file);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FlushSegmentData<sp/>(Elf64_Phdr*<sp/>segment,<sp/><ref refid="struct_buffer" kindref="compound">Buffer</ref>*<sp/>src,<sp/><ref refid="struct_buffer" kindref="compound">Buffer</ref>*<sp/>program_buf)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(segment);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(src);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(program_buf);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>Elf64_Off<sp/>segment_off<sp/>=<sp/>segment-&gt;p_offset;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>data_size<sp/><sp/><sp/><sp/>=<sp/>src-&gt;size;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyToBuff<sp/>(program_buf,<sp/>segment_off,<sp/>src-&gt;buffer,<sp/>data_size);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FlushSegmentsData<sp/>(<ref refid="struct_elf" kindref="compound">Elf</ref>*<sp/>elf)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(elf);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>FlushSegmentData<sp/>(&amp;elf-&gt;headers.code_phdr,<sp/><sp/><sp/>&amp;elf-&gt;code_buf,<sp/><sp/><sp/>&amp;elf-&gt;program_buf);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FlushSegmentData<sp/>(&amp;elf-&gt;headers.data_phdr,<sp/><sp/><sp/>&amp;elf-&gt;data_buf,<sp/><sp/><sp/>&amp;elf-&gt;program_buf);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf<sp/>(&quot;STDLIB<sp/>size:<sp/>0x%x\n&quot;,<sp/>elf-&gt;stdlib_buf.size);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FlushSegmentData<sp/>(&amp;elf-&gt;headers.stdlib_phdr,<sp/>&amp;elf-&gt;stdlib_buf,<sp/>&amp;elf-&gt;program_buf);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FlushHeaders<sp/>(<ref refid="struct_elf" kindref="compound">Elf</ref>*<sp/>elf)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(elf);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyToBuff<sp/>(&amp;elf-&gt;program_buf,<sp/>0,<sp/>&amp;(elf-&gt;headers),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_elf_headers" kindref="compound">ElfHeaders</ref>));</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
    </programlisting>
    <location file="src/Elf/Elf.cpp"/>
  </compounddef>
</doxygen>
