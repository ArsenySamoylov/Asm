<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_builder_8h" kind="file" language="C++">
    <compoundname>Builder.h</compoundname>
    <includes refid="_module_8h" local="yes">Module.h</includes>
    <includes refid="_value_table_8h" local="yes">ValueTable.h</includes>
    <includedby refid="_ast_to_i_r_8cpp" local="yes">src/IR/AstToIR/AstToIR.cpp</includedby>
    <includedby refid="_builder_8cpp" local="yes">src/IR/AstToIR/Builder.cpp</includedby>
    <incdepgraph>
      <node id="14">
        <label>Instructions.h</label>
        <link refid="_instructions_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>Storage.h</label>
        <link refid="_storage_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>cassert</label>
      </node>
      <node id="11">
        <label>TypeDefs.h</label>
        <link refid="_type_defs_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>stddef.h</label>
      </node>
      <node id="13">
        <label>RegistersUsage.h</label>
        <link refid="_registers_usage_8h_source"/>
      </node>
      <node id="15">
        <label>ValueTable.h</label>
        <link refid="_value_table_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/IR/AstToIR/Builder.h</label>
        <link refid="_builder_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ValueArrTemplate.h</label>
        <link refid="_value_arr_template_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cstdio</label>
      </node>
      <node id="2">
        <label>Module.h</label>
        <link refid="_module_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cstdlib</label>
      </node>
      <node id="4">
        <label>cstddef</label>
      </node>
      <node id="3">
        <label>Value.h</label>
        <link refid="_value_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>NoCopyable.h</label>
        <link refid="_no_copyable_8h_source"/>
      </node>
    </incdepgraph>
    <innerclass refid="struct_builder" prot="public">Builder</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_builder_8h_1a731e6089b4ab4e880981b0a16ef741ed" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int FIN_NAME_ID</definition>
        <argsstring></argsstring>
        <name>FIN_NAME_ID</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/Builder.h" line="36" column="12" bodyfile="src/IR/AstToIR/Builder.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_builder_8h_1a04b79f16732873ae85f48dc823928c6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BuilderCtor</definition>
        <argsstring>(Builder *buildog, Module *mod)</argsstring>
        <name>BuilderCtor</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type><ref refid="class_module" kindref="compound">Module</ref> *</type>
          <declname>mod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/Builder.h" line="16" column="5" bodyfile="src/IR/AstToIR/Builder.cpp" bodystart="13" bodyend="27" declfile="src/IR/AstToIR/Builder.h" declline="16" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_builder_8h_1a57da749dbb9bc9043eaf659036df2cd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BuilderDtor</definition>
        <argsstring>(Builder *buildog)</argsstring>
        <name>BuilderDtor</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/Builder.h" line="17" column="5" bodyfile="src/IR/AstToIR/Builder.cpp" bodystart="29" bodyend="36" declfile="src/IR/AstToIR/Builder.h" declline="17" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_builder_8h_1a745ea2e7855e2259389c84d742204a0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SetBuilderForFunction</definition>
        <argsstring>(Builder *buildog, Function *func, ValueLabel *label)</argsstring>
        <name>SetBuilderForFunction</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type><ref refid="class_function" kindref="compound">Function</ref> *</type>
          <declname>func</declname>
        </param>
        <param>
          <type><ref refid="struct_value_label" kindref="compound">ValueLabel</ref> *</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/Builder.h" line="20" column="5" bodyfile="src/IR/AstToIR/Builder.cpp" bodystart="39" bodyend="58" declfile="src/IR/AstToIR/Builder.h" declline="20" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_builder_8h_1a9847eb0930fd4566ec889b496523ce56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ResetBuilderAfterFunction</definition>
        <argsstring>(Builder *buildog)</argsstring>
        <name>ResetBuilderAfterFunction</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/Builder.h" line="21" column="5" bodyfile="src/IR/AstToIR/Builder.cpp" bodystart="60" bodyend="70" declfile="src/IR/AstToIR/Builder.h" declline="21" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_builder_8h_1aad293d5910b16e5563c97549c3d84024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AddFunctionToModule</definition>
        <argsstring>(Builder *buildog)</argsstring>
        <name>AddFunctionToModule</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/Builder.h" line="22" column="5" bodyfile="src/IR/AstToIR/Builder.cpp" bodystart="72" bodyend="78" declfile="src/IR/AstToIR/Builder.h" declline="22" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_builder_8h_1ad6e5be71e48fc7520fc98bbb0d35388a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_base_block" kindref="compound">BaseBlock</ref> *</type>
        <definition>BaseBlock* GetCurrentBaseBlock</definition>
        <argsstring>(Builder *buildog)</argsstring>
        <name>GetCurrentBaseBlock</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/Builder.h" line="25" column="11" bodyfile="src/IR/AstToIR/Builder.cpp" bodystart="81" bodyend="103" declfile="src/IR/AstToIR/Builder.h" declline="25" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="_builder_8h_1a44db65f42f0a8319a9687af20ad6d17b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_base_block" kindref="compound">BaseBlock</ref> *</type>
        <definition>BaseBlock* InsertNewBaseBlock</definition>
        <argsstring>(Builder *buildog, name_t block_name)</argsstring>
        <name>InsertNewBaseBlock</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>name_t</type>
          <declname>block_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/Builder.h" line="26" column="11" bodyfile="src/IR/AstToIR/Builder.cpp" bodystart="105" bodyend="124" declfile="src/IR/AstToIR/Builder.h" declline="26" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="_builder_8h_1abca24fa7b9439448be0dea992f98e935" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AddInstruction</definition>
        <argsstring>(Builder *buildog, Instruction *instruction)</argsstring>
        <name>AddInstruction</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type><ref refid="class_instruction" kindref="compound">Instruction</ref> *</type>
          <declname>instruction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/Builder.h" line="29" column="5" bodyfile="src/IR/AstToIR/Builder.cpp" bodystart="127" bodyend="139" declfile="src/IR/AstToIR/Builder.h" declline="29" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_builder_8h_1af04da9f82862df6a195d27ca27a7fe00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AddGlobalVar</definition>
        <argsstring>(Builder *buildog, GlobalVar *var)</argsstring>
        <name>AddGlobalVar</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type><ref refid="class_global_var" kindref="compound">GlobalVar</ref> *</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/Builder.h" line="30" column="5" bodyfile="src/IR/AstToIR/Builder.cpp" bodystart="141" bodyend="149" declfile="src/IR/AstToIR/Builder.h" declline="30" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_builder_8h_1aaa1746003c7dd497c30e3d3b141b1d90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_value" kindref="compound">Value</ref> *</type>
        <definition>Value* FindValue</definition>
        <argsstring>(Builder *buildog, int name_id)</argsstring>
        <name>FindValue</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>int</type>
          <declname>name_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/Builder.h" line="33" column="7" bodyfile="src/IR/AstToIR/Builder.cpp" bodystart="152" bodyend="170" declfile="src/IR/AstToIR/Builder.h" declline="33" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="_builder_8h_1a8279e239c41a5270848a0100ffc8ee88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AddNativeFunctions</definition>
        <argsstring>(Builder *buildog)</argsstring>
        <name>AddNativeFunctions</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/Builder.h" line="38" column="5" bodyfile="src/IR/AstToIR/Builder.cpp" bodystart="174" bodyend="197" declfile="src/IR/AstToIR/Builder.h" declline="38" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_builder_8h_1a07135d125efa8e2115bbbc827114b5a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_constant" kindref="compound">Constant</ref> *</type>
        <definition>Constant* CreateConstant</definition>
        <argsstring>(Builder *builder, name_t const_name, data_t const_val)</argsstring>
        <name>CreateConstant</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>builder</declname>
        </param>
        <param>
          <type>name_t</type>
          <declname>const_name</declname>
        </param>
        <param>
          <type>data_t</type>
          <declname>const_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/Builder.h" line="42" column="11" bodyfile="src/IR/AstToIR/Builder.cpp" bodystart="202" bodyend="210" declfile="src/IR/AstToIR/Builder.h" declline="42" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="_builder_8h_1a1e84dba929d984a85c42eede44ff8c09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_function" kindref="compound">Function</ref> *</type>
        <definition>Function* CreateFunction</definition>
        <argsstring>(Builder *buildog, name_t func_name, int ret_type, int name_id)</argsstring>
        <name>CreateFunction</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>name_t</type>
          <declname>func_name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ret_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>name_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/Builder.h" line="43" column="11" bodyfile="src/IR/AstToIR/Builder.cpp" bodystart="217" bodyend="234" declfile="src/IR/AstToIR/Builder.h" declline="43" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="_builder_8h_1ab79a7a17a8f45b4e666959f92f189b26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_call" kindref="compound">Call</ref> *</type>
        <definition>Call* CreateCall</definition>
        <argsstring>(Builder *buildog, name_t call_name, const Function *func)</argsstring>
        <name>CreateCall</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>name_t</type>
          <declname>call_name</declname>
        </param>
        <param>
          <type>const <ref refid="class_function" kindref="compound">Function</ref> *</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/Builder.h" line="44" column="11" bodyfile="src/IR/AstToIR/Builder.cpp" bodystart="244" bodyend="250" declfile="src/IR/AstToIR/Builder.h" declline="44" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="_builder_8h_1a2d15c2dc16960a1e0e39a655434d31fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_global_var" kindref="compound">GlobalVar</ref> *</type>
        <definition>GlobalVar* CreateGlobalVar</definition>
        <argsstring>(Builder *buildog, name_t var_name, Constant *init_val)</argsstring>
        <name>CreateGlobalVar</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>name_t</type>
          <declname>var_name</declname>
        </param>
        <param>
          <type><ref refid="class_constant" kindref="compound">Constant</ref> *</type>
          <declname>init_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/Builder.h" line="45" column="11" bodyfile="src/IR/AstToIR/Builder.cpp" bodystart="255" bodyend="266" declfile="src/IR/AstToIR/Builder.h" declline="45" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="_builder_8h_1a661f0c7b12bd2245bffd5a1acc7ea0b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_store" kindref="compound">Store</ref> *</type>
        <definition>Store* CreateStore</definition>
        <argsstring>(Builder *buildog, name_t var_name, Value *store_val)</argsstring>
        <name>CreateStore</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>name_t</type>
          <declname>var_name</declname>
        </param>
        <param>
          <type><ref refid="class_value" kindref="compound">Value</ref> *</type>
          <declname>store_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/Builder.h" line="46" column="11" bodyfile="src/IR/AstToIR/Builder.cpp" bodystart="271" bodyend="282" declfile="src/IR/AstToIR/Builder.h" declline="46" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="_builder_8h_1a2e3cc64d8a4a5d7b6f1fab55a5303b62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_operator" kindref="compound">Operator</ref> *</type>
        <definition>Operator* CreateOperator</definition>
        <argsstring>(Builder *buildog, name_t op_name, OperatorType op_type, Value *left_op, Value *right_op)</argsstring>
        <name>CreateOperator</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>name_t</type>
          <declname>op_name</declname>
        </param>
        <param>
          <type>OperatorType</type>
          <declname>op_type</declname>
        </param>
        <param>
          <type><ref refid="class_value" kindref="compound">Value</ref> *</type>
          <declname>left_op</declname>
        </param>
        <param>
          <type><ref refid="class_value" kindref="compound">Value</ref> *</type>
          <declname>right_op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/Builder.h" line="47" column="11" bodyfile="src/IR/AstToIR/Builder.cpp" bodystart="287" bodyend="298" declfile="src/IR/AstToIR/Builder.h" declline="47" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="_builder_8h_1ab68cd05b40a15eda60482173a96ef530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_load" kindref="compound">Load</ref> *</type>
        <definition>Load* CreateLoad</definition>
        <argsstring>(Builder *buildog, name_t load_name, Value *dest, Value *src)</argsstring>
        <name>CreateLoad</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>name_t</type>
          <declname>load_name</declname>
        </param>
        <param>
          <type><ref refid="class_value" kindref="compound">Value</ref> *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type><ref refid="class_value" kindref="compound">Value</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/Builder.h" line="48" column="11" bodyfile="src/IR/AstToIR/Builder.cpp" bodystart="303" bodyend="314" declfile="src/IR/AstToIR/Builder.h" declline="48" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="_builder_8h_1a1e2fda07909151e9a5e13deb19c03d28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_return" kindref="compound">Return</ref> *</type>
        <definition>Return* CreateReturn</definition>
        <argsstring>(Builder *buildog, name_t ret_name, Value *ret_val)</argsstring>
        <name>CreateReturn</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>name_t</type>
          <declname>ret_name</declname>
        </param>
        <param>
          <type><ref refid="class_value" kindref="compound">Value</ref> *</type>
          <declname>ret_val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/Builder.h" line="49" column="11" bodyfile="src/IR/AstToIR/Builder.cpp" bodystart="319" bodyend="329" declfile="src/IR/AstToIR/Builder.h" declline="49" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="_builder_8h_1adecd210a342b30145e96ae5518afb22a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_branch" kindref="compound">Branch</ref> *</type>
        <definition>Branch* CreateBranch</definition>
        <argsstring>(Builder *buildog, name_t name, Value *condition, BaseBlock *true_branch, BaseBlock *false_branch)</argsstring>
        <name>CreateBranch</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>name_t</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="class_value" kindref="compound">Value</ref> *</type>
          <declname>condition</declname>
        </param>
        <param>
          <type><ref refid="class_base_block" kindref="compound">BaseBlock</ref> *</type>
          <declname>true_branch</declname>
        </param>
        <param>
          <type><ref refid="class_base_block" kindref="compound">BaseBlock</ref> *</type>
          <declname>false_branch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/Builder.h" line="50" column="11" bodyfile="src/IR/AstToIR/Builder.cpp" bodystart="334" bodyend="350" declfile="src/IR/AstToIR/Builder.h" declline="50" declcolumn="11"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Module.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ValueTable.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="struct_builder" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_builder" kindref="compound">Builder</ref></highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_value_name_table" kindref="compound">ValueNameTable</ref><sp/>global;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_value_name_table" kindref="compound">ValueNameTable</ref><sp/>local;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>active<sp/>when<sp/>builder<sp/>process<sp/>function<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref>*<sp/>current_function;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_module" kindref="compound">Module</ref>*<sp/>mod;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BuilderCtor<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/><ref refid="class_module" kindref="compound">Module</ref>*<sp/>mod);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BuilderDtor<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SetBuilderForFunction<sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/><ref refid="class_function" kindref="compound">Function</ref>*<sp/>func,<sp/><ref refid="struct_value_label" kindref="compound">ValueLabel</ref>*<sp/>label);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ResetBuilderAfterFunction<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AddFunctionToModule<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><ref refid="class_base_block" kindref="compound">BaseBlock</ref>*<sp/>GetCurrentBaseBlock<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><ref refid="class_base_block" kindref="compound">BaseBlock</ref>*<sp/>InsertNewBaseBlock<sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/>name_t<sp/>block_name);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AddInstruction<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/><ref refid="class_instruction" kindref="compound">Instruction</ref>*<sp/>instruction);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AddGlobalVar<sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/><ref refid="class_global_var" kindref="compound">GlobalVar</ref>*<sp/>var);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="class_value" kindref="compound">Value</ref>*<sp/>FindValue<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>name_id);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FIN_NAME_ID<sp/>=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AddNativeFunctions<sp/><sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog);</highlight></codeline>
<codeline lineno="40"><highlight class="comment">//<sp/>Creators</highlight></codeline>
<codeline lineno="42"><highlight class="comment"></highlight><highlight class="normal"><ref refid="class_constant" kindref="compound">Constant</ref>*<sp/><sp/>CreateConstant<sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>builder,<sp/>name_t<sp/>const_name,<sp/>data_t<sp/>const_val);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><ref refid="class_function" kindref="compound">Function</ref>*<sp/><sp/>CreateFunction<sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/>name_t<sp/>func_name,<sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>ret_type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>name_id);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="class_call" kindref="compound">Call</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>CreateCall<sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/>name_t<sp/>call_name,<sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref>*<sp/>func);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="class_global_var" kindref="compound">GlobalVar</ref>*<sp/>CreateGlobalVar<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/>name_t<sp/>var_name,<sp/><sp/><sp/><ref refid="class_constant" kindref="compound">Constant</ref>*<sp/>init_val);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><ref refid="class_store" kindref="compound">Store</ref>*<sp/><sp/><sp/><sp/><sp/>CreateStore<sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/>name_t<sp/>var_name,<sp/><sp/><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>store_val);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><ref refid="struct_operator" kindref="compound">Operator</ref>*<sp/><sp/>CreateOperator<sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/>name_t<sp/>op_name,<sp/><sp/><sp/><sp/>OperatorType<sp/>op_type,<sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>left_op,<sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>right_op);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><ref refid="class_load" kindref="compound">Load</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>CreateLoad<sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/>name_t<sp/>load_name,<sp/><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>dest,<sp/><sp/><sp/><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>src);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="struct_return" kindref="compound">Return</ref>*<sp/><sp/><sp/><sp/>CreateReturn<sp/><sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/>name_t<sp/>ret_name,<sp/><sp/><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>ret_val);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><ref refid="class_branch" kindref="compound">Branch</ref>*<sp/><sp/><sp/>CreateBranch<sp/><sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/>name_t<sp/>name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>condition,<sp/><ref refid="class_base_block" kindref="compound">BaseBlock</ref>*<sp/>true_branch,<sp/><ref refid="class_base_block" kindref="compound">BaseBlock</ref>*<sp/>false_branch);</highlight></codeline>
    </programlisting>
    <location file="src/IR/AstToIR/Builder.h"/>
  </compounddef>
</doxygen>
