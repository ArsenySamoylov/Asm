<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_std_grammar_8h" kind="file" language="C++">
    <compoundname>StdGrammar.h</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="_std_grammar_8h_1a8cff54444de6fe61250a8a4b1e0fd39e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>STD_GRAMMAR</definition>
        <argsstring>(STATEMENT, { stdprint(&quot;{ ST &quot;);PutToken(RIGHT(TOKEN));PutToken(LEFT(TOKEN));stdprint(&quot; } &quot;);return SUCCESS;}) STD_GRAMMAR(INITIALIZATOR</argsstring>
        <name>STD_GRAMMAR</name>
        <param>
          <type>STATEMENT</type>
        </param>
        <param>
          <type>{ stdprint(&quot;{ ST &quot;);PutToken(RIGHT(TOKEN));PutToken(LEFT(TOKEN));stdprint(&quot; } &quot;);return SUCCESS;}</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/StandartAWP/StdGrammar.h" line="5" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>define<sp/>TOKEN<sp/>befire<sp/>implemanting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>STD_GRAMMAR(name,<sp/>code)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal">STD_GRAMMAR(CONSTANT,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8,<sp/></highlight><highlight class="stringliteral">&quot;%lg&quot;</highlight><highlight class="normal">,<sp/>CONST(TOKEN))</highlight></codeline>
<codeline lineno="5"><highlight class="normal">STD_GRAMMAR(STATEMENT,<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>stdprint<sp/>(</highlight><highlight class="stringliteral">&quot;{<sp/>ST<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>PutToken(RIGHT(TOKEN));</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>PutToken(<sp/>LEFT(TOKEN));</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>stdprint<sp/>(</highlight><highlight class="stringliteral">&quot;<sp/>}<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;<sp/></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">STD_GRAMMAR(INITIALIZATOR,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">STD_GRAMMAR(FUNCTION_RET_TYPE,<sp/><sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>})</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">STD_GRAMMAR(NAME,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">STD_GRAMMAR(VARIABLE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7,<sp/>&quot;%s&quot;,<sp/>STRING_ARR[NAME_ID(TOKEN)])</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">STD_GRAMMAR(FUNCTION,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>9,<sp/>&quot;%c&quot;,<sp/>OP(TOKEN)<sp/>==<sp/>&apos;{</highlight><highlight class="stringliteral">&apos;<sp/>?<sp/>&apos;</highlight><highlight class="normal">[</highlight><highlight class="stringliteral">&apos;<sp/>:<sp/><sp/>OP(TOKEN)<sp/>==<sp/>&apos;</highlight><highlight class="normal">}</highlight><highlight class="stringliteral">&apos;<sp/>?<sp/>&apos;</highlight><highlight class="normal">]</highlight><highlight class="stringliteral">&apos;<sp/>:<sp/>OP(TOKEN))</highlight></codeline>
<codeline lineno="29"><highlight class="stringliteral">STD_GRAMMAR(CALL,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>10,<sp/>&quot;%s&quot;,<sp/>&quot;<sp/>&quot;)</highlight></codeline>
<codeline lineno="30"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="31"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="32"><highlight class="stringliteral">STD_INSTRUCTION</highlight></codeline>
<codeline lineno="33"><highlight class="stringliteral">STD_OPERATOR</highlight></codeline>
    </programlisting>
    <location file="src/Legacy/Common/StandartAWP/StdGrammar.h"/>
  </compounddef>
</doxygen>
