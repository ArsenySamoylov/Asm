<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_commands_8cpp" kind="file" language="C++">
    <compoundname>Commands.cpp</compoundname>
    <includes local="no">stdio.h</includes>
    <includes refid="_commands_8h" local="yes">Commands.h</includes>
    <incdepgraph>
      <node id="4">
        <label>Instructions.h</label>
        <link refid="_instructions_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>Storage.h</label>
        <link refid="_storage_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/IR/TranslateTox86/Commands.cpp</label>
        <link refid="_commands_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>IRContext.h</label>
        <link refid="_i_r_context_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>stdlib.h</label>
      </node>
      <node id="19">
        <label>elf.h</label>
      </node>
      <node id="9">
        <label>cassert</label>
      </node>
      <node id="13">
        <label>TypeDefs.h</label>
        <link refid="_type_defs_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>stddef.h</label>
      </node>
      <node id="15">
        <label>RegistersUsage.h</label>
        <link refid="_registers_usage_8h_source"/>
      </node>
      <node id="7">
        <label>ValueArrTemplate.h</label>
        <link refid="_value_arr_template_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>cstdio</label>
      </node>
      <node id="20">
        <label>Buffer.hpp</label>
        <link refid="_buffer_8hpp_source"/>
      </node>
      <node id="18">
        <label>Elf.hpp</label>
        <link refid="_elf_8hpp_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Commands.h</label>
        <link refid="_commands_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cstdlib</label>
      </node>
      <node id="6">
        <label>cstddef</label>
      </node>
      <node id="5">
        <label>Value.h</label>
        <link refid="_value_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>NoCopyable.h</label>
        <link refid="_no_copyable_8h_source"/>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_commands_8cpp_1a6813de047009a1a14818fec5e3020cfa" prot="public" static="no">
        <name>print_comment</name>
        <param><defname>COMMENT</defname></param>
        <initializer>                                  do {                                 \
                                  if (comment)                      \
                                    print_raw (&quot;# %s&quot;, comment);    \
                                                                    \
                                 print_raw (&quot;\n&quot;); } while (0);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="5" column="9" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="5" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_commands_8cpp_1aa092615f270e898ff188012133fd558a" prot="public" static="no" strong="no">
        <type></type>
        <name>CommandsCodes</name>
        <enumvalue id="_commands_8cpp_1aa092615f270e898ff188012133fd558aa3e53f06234367d0e453fa5ea0ad2ab34" prot="public">
          <name>Sub</name>
          <initializer>= 0x83</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_commands_8cpp_1aa092615f270e898ff188012133fd558aa0d592a4b562059bc283e00b3704865c9" prot="public">
          <name>Add</name>
          <initializer>= 0x83</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_commands_8cpp_1aa092615f270e898ff188012133fd558aa25d7142d3b1514bc4f4b4ac596862449" prot="public">
          <name>Ret</name>
          <initializer>= 0xc3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_commands_8cpp_1aa092615f270e898ff188012133fd558aa3b2ab465ea4518f204c6e5a8ee90e04f" prot="public">
          <name>Jmp</name>
          <initializer>= 0xe9</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_commands_8cpp_1aa092615f270e898ff188012133fd558aac9ac7fba62993bc71f9100a92aaaae84" prot="public">
          <name>Je</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_commands_8cpp_1aa092615f270e898ff188012133fd558aa59b9abc46faffa225d20abc5e5252417" prot="public">
          <name>Call</name>
          <initializer>= 0xe8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_commands_8cpp_1aa092615f270e898ff188012133fd558aa49d1b3f85d3d53f5339e32102ef93d52" prot="public">
          <name>Push</name>
          <initializer>= 0x50</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_commands_8cpp_1aa092615f270e898ff188012133fd558aa0edd48b537c68d2e108bc2517b82b867" prot="public">
          <name>Pop</name>
          <initializer>= 0x58</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_commands_8cpp_1aa092615f270e898ff188012133fd558aa8b121fc714a35562ab79aa085ac613ff" prot="public">
          <name>Mov</name>
          <initializer>= 0x89</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_commands_8cpp_1aa092615f270e898ff188012133fd558aa1d3d5675f925a44533bdcab83a27e498" prot="public">
          <name>Bigger</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_commands_8cpp_1aa092615f270e898ff188012133fd558aaf2360f16fa13d5c5e9b71b733268b47e" prot="public">
          <name>Less</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_commands_8cpp_1aa092615f270e898ff188012133fd558aa460be96ed793a90b2f8c2b79d18c0897" prot="public">
          <name>Imul</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_commands_8cpp_1aa092615f270e898ff188012133fd558aa5199ec4fc69bc228588d0a4e548edae1" prot="public">
          <name>Idiv</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_commands_8cpp_1aa092615f270e898ff188012133fd558aa84897544d46a4409c9b792af83555453" prot="public">
          <name>RegReg</name>
          <initializer>= 0x48</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_commands_8cpp_1aa092615f270e898ff188012133fd558aa15f9e95df21e5161d1c196e972bfca70" prot="public">
          <name>RegExtended</name>
          <initializer>= 0x49</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_commands_8cpp_1aa092615f270e898ff188012133fd558aaa13a9074467bf04e1970a3c108619a23" prot="public">
          <name>ExtendedReg</name>
          <initializer>= 0x4c</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_commands_8cpp_1aa092615f270e898ff188012133fd558aa7eb4577464551f75abcf8db54b9e8552" prot="public">
          <name>ExtendedExtended</name>
          <initializer>= 0x4d</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_commands_8cpp_1aa092615f270e898ff188012133fd558aace92f5b1879eea35cf5f6a7cf9801bb9" prot="public">
          <name>ArgsByte</name>
          <initializer>= 0xc0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="13" column="9" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="14" bodyend="35"/>
      </memberdef>
      <memberdef kind="enum" id="_commands_8cpp_1a4d04e35fe0ed95355c5bf2ae1d1fc0a6" prot="public" static="no" strong="no">
        <type></type>
        <name>NormalizeResultEnum</name>
        <enumvalue id="_commands_8cpp_1a4d04e35fe0ed95355c5bf2ae1d1fc0a6a086ab1f2f4dac104b6826ebe0eaba8fd" prot="public">
          <name>MUL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_commands_8cpp_1a4d04e35fe0ed95355c5bf2ae1d1fc0a6a8565f0d60c3ba6d468661c49d86e9744" prot="public">
          <name>DIV</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="411" column="1" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="412" bodyend="415"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_commands_8cpp_1a06b9fecf9f794045b1b6835d313ad7e6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void SetOpCodesForRegs</definition>
        <argsstring>(char *op_codes, GPRegisterNumber src, GPRegisterNumber dest)</argsstring>
        <name>SetOpCodesForRegs</name>
        <param>
          <type>char *</type>
          <declname>op_codes</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>src</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="253" column="13" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="253" bodyend="283" declfile="src/IR/TranslateTox86/Commands.cpp" declline="37" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1afe4601455842080d33cd2fb105d938d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PUT_CALL</definition>
        <argsstring>(Context *ctx, const Function *callee)</argsstring>
        <name>PUT_CALL</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="class_function" kindref="compound">Function</ref> *</type>
          <declname>callee</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="40" column="6" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="40" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1ab996517ca8bc0bbb7ce1ddca72aa1bb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PUT_JUMP</definition>
        <argsstring>(Context *ctx, const BaseBlock *jump_dest)</argsstring>
        <name>PUT_JUMP</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="class_base_block" kindref="compound">BaseBlock</ref> *</type>
          <declname>jump_dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="56" column="6" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="56" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1a0fa2c38fa4fcb494a23375b6b94761bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PUT_CJUMP</definition>
        <argsstring>(Context *ctx, const BaseBlock *jump_dest, GPRegisterNumber reg_num)</argsstring>
        <name>PUT_CJUMP</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="class_base_block" kindref="compound">BaseBlock</ref> *</type>
          <declname>jump_dest</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>reg_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="71" column="6" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="71" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1a16fa9a27ec5b0fdfb24b57bb00725e47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t PutSubRsp</definition>
        <argsstring>(Context *ctx, size_t num, const char *comment)</argsstring>
        <name>PutSubRsp</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="87" column="8" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="87" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1a3b5ae549c2ba2f9de42824d1bea60ea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t PutAddRsp</definition>
        <argsstring>(Context *ctx, size_t num, const char *comment)</argsstring>
        <name>PutAddRsp</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="108" column="8" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="108" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1add23369f67505ebfa528f4316fa2656c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t PutRet</definition>
        <argsstring>(Context *ctx, const char *comment)</argsstring>
        <name>PutRet</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="126" column="8" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="126" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1addb445a251c79f78e3f181aa39e7d315" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t PutJump</definition>
        <argsstring>(Context *ctx, name_t label, const char *comment)</argsstring>
        <name>PutJump</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>name_t</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="139" column="8" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="139" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1a8e4670ce3f9b79f6f3a0b726222dc527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t PutCJump</definition>
        <argsstring>(Context *ctx, GPRegisterNumber test, name_t label, const char *comment)</argsstring>
        <name>PutCJump</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>test</declname>
        </param>
        <param>
          <type>name_t</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="155" column="8" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="155" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1a86156ea60c5ff4992a9bb247d8c5f73f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t PutCall</definition>
        <argsstring>(Context *ctx, name_t label, const char *comment)</argsstring>
        <name>PutCall</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>name_t</type>
          <declname>label</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="180" column="8" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="180" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1a628a3eabdde6d7a32e89f157ba875a71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t PutPushR</definition>
        <argsstring>(Context *ctx, GPRegisterNumber reg, const char *comment)</argsstring>
        <name>PutPushR</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="194" column="8" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="194" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1a26913b21808e60ae4666b04ebe356e7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t PutPopR</definition>
        <argsstring>(Context *ctx, GPRegisterNumber reg, const char *comment)</argsstring>
        <name>PutPopR</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="223" column="8" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="223" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1afefb12fc5cd56eff0220d4679d5d881d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t PutMovRR</definition>
        <argsstring>(Context *ctx, GPRegisterNumber src, GPRegisterNumber dest, const char *comment)</argsstring>
        <name>PutMovRR</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>src</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="285" column="8" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="285" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1a6e80481b995b9779342806c7628317cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t PutMovConstant</definition>
        <argsstring>(Context *ctx, GPRegisterNumber dest, data_t data, const char *comment)</argsstring>
        <name>PutMovConstant</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>data_t</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="301" column="8" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="301" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1aa6b52232131c0b4dbfc2e1707e2e4d7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t PutMoveToStack</definition>
        <argsstring>(Context *ctx, GPRegisterNumber src, size_t offset, const char *comment)</argsstring>
        <name>PutMoveToStack</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="332" column="8" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="332" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1aab0b18f031cd424b6511db5abfbe1818" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t PutMoveFromStack</definition>
        <argsstring>(Context *ctx, size_t offset, GPRegisterNumber dest, const char *comment)</argsstring>
        <name>PutMoveFromStack</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="362" column="8" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="362" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1ae22109ed121793b3f9e84cf5cf4306e4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* GetOperationName</definition>
        <argsstring>(OperatorType type)</argsstring>
        <name>GetOperationName</name>
        <param>
          <type>OperatorType</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="393" column="19" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="393" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1a9044d869add0d1ddb7b941a3aaf2c502" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void PutClearRdx</definition>
        <argsstring>(Context *ctx)</argsstring>
        <name>PutClearRdx</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="425" column="13" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="425" bodyend="434" declfile="src/IR/TranslateTox86/Commands.cpp" declline="418" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1af1c7ae0dd85b48fb3474377e310db779" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void NormalizeResult</definition>
        <argsstring>(Context *ctx, GPRegisterNumber result, int normalization_type)</argsstring>
        <name>NormalizeResult</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>result</declname>
        </param>
        <param>
          <type>int</type>
          <declname>normalization_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="436" column="13" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="436" bodyend="453" declfile="src/IR/TranslateTox86/Commands.cpp" declline="419" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1a5c17dd8e137d3d4beba8c9aae7cb40c0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void PutIMul</definition>
        <argsstring>(Context *ctx, GPRegisterNumber reg)</argsstring>
        <name>PutIMul</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="455" column="13" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="455" bodyend="479" declfile="src/IR/TranslateTox86/Commands.cpp" declline="420" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1ac9fb1b2937cde227adc37450148bea13" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void PutIDiv</definition>
        <argsstring>(Context *ctx, GPRegisterNumber reg)</argsstring>
        <name>PutIDiv</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="481" column="13" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="481" bodyend="506" declfile="src/IR/TranslateTox86/Commands.cpp" declline="421" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1a46487ad0d5081fba9c8eed78afead497" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void PutAdd</definition>
        <argsstring>(Context *ctx, GPRegisterNumber src, GPRegisterNumber dest)</argsstring>
        <name>PutAdd</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>src</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="508" column="13" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="508" bodyend="521" declfile="src/IR/TranslateTox86/Commands.cpp" declline="422" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1aa2d566783f7221dd619a9848984d2d40" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void PutSub</definition>
        <argsstring>(Context *ctx, GPRegisterNumber src, GPRegisterNumber dest)</argsstring>
        <name>PutSub</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>src</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="523" column="13" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="523" bodyend="536" declfile="src/IR/TranslateTox86/Commands.cpp" declline="423" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1ad3e42c5e690fbb27fcbd02e05a762402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t PutLogicOp</definition>
        <argsstring>(Context *ctx, OperatorType operation, GPRegisterNumber src, GPRegisterNumber dest, const char *comment)</argsstring>
        <name>PutLogicOp</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>OperatorType</type>
          <declname>operation</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>src</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="538" column="8" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="538" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1a18e5d75b20b000f363402ef540fbbdd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t PutMathAddSub</definition>
        <argsstring>(Context *ctx, OperatorType operation, GPRegisterNumber src, GPRegisterNumber dest, const char *comment)</argsstring>
        <name>PutMathAddSub</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>OperatorType</type>
          <declname>operation</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>src</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="583" column="8" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="583" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1a5f37fc4d4d4ef1ebee14a1b830c588fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t PutMulDiv</definition>
        <argsstring>(Context *ctx, OperatorType operation, GPRegisterNumber src, GPRegisterNumber dest, const char *comment)</argsstring>
        <name>PutMulDiv</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>OperatorType</type>
          <declname>operation</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>src</declname>
        </param>
        <param>
          <type>GPRegisterNumber</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>comment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="599" column="8" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="599" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="_commands_8cpp_1a52e92e7bfda10f49a5aba3be4aad1cf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t PutSysCall</definition>
        <argsstring>(Context *ctx)</argsstring>
        <name>PutSysCall</name>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/Commands.cpp" line="624" column="8" bodyfile="src/IR/TranslateTox86/Commands.cpp" bodystart="624" bodyend="635"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Commands.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>print_comment(COMMENT)<sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="6"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(comment)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="7"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_raw<sp/>(&quot;#<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>comment);<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>print_raw<sp/>(&quot;\n&quot;);<sp/>}<sp/>while<sp/>(0);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wconversion&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>CommandsCodes</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>Sub<sp/>=<sp/>0x83,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>Add<sp/>=<sp/>0x83,</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>Ret<sp/>=<sp/>0xc3,</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>Jmp<sp/>=<sp/>0xe9,</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>Je,</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_call" kindref="compound">Call</ref><sp/>=<sp/>0xe8,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>Push<sp/>=<sp/>0x50,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>Pop<sp/><sp/>=<sp/>0x58,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>Mov<sp/><sp/>=<sp/>0x89,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>Bigger,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>Less,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>Imul,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>Idiv,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>RegReg<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x48,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>RegExtended<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x49,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>ExtendedReg<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x4c,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>ExtendedExtended<sp/>=<sp/>0x4d,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>ArgsByte<sp/>=<sp/>0xc0,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetOpCodesForRegs<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>op_codes,<sp/><sp/>GPRegisterNumber<sp/>src,<sp/>GPRegisterNumber<sp/>dest);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PUT_CALL<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_function" kindref="compound">Function</ref>*<sp/>callee)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(callee);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_reference" kindref="compound">Reference</ref>*<sp/>reference<sp/>=<sp/>(<ref refid="struct_reference" kindref="compound">Reference</ref>*)<sp/>calloc<sp/>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(reference[0]));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/><sp/><sp/><sp/>(reference);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>reference-&gt;position<sp/><sp/>=<sp/>PutCall<sp/>(ctx,<sp/>callee-&gt;get_name());</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>reference-&gt;address<sp/><sp/><sp/>=<sp/>reference-&gt;position<sp/>+<sp/>4<sp/>+<sp/>CODE_VIRTUAL_ADDRESS;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>reference-&gt;ref_value<sp/>=<sp/>callee;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>AddReference<sp/>(&amp;ctx-&gt;call_refs,<sp/>reference);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PUT_JUMP<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_base_block" kindref="compound">BaseBlock</ref>*<sp/>jump_dest)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(jump_dest);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_reference" kindref="compound">Reference</ref>*<sp/>ref<sp/>=<sp/>(<ref refid="struct_reference" kindref="compound">Reference</ref>*)<sp/>calloc<sp/>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ref[0]));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(ref);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>ref-&gt;position<sp/><sp/>=<sp/>PutJump<sp/>(ctx,<sp/>jump_dest-&gt;get_name());</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>ref-&gt;address<sp/><sp/><sp/>=<sp/>ref-&gt;position<sp/>+<sp/>4<sp/>+CODE_VIRTUAL_ADDRESS;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>ref-&gt;ref_value<sp/>=<sp/>jump_dest;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>AddReference<sp/>(&amp;ctx-&gt;jump_refs,<sp/>ref);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PUT_CJUMP<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_base_block" kindref="compound">BaseBlock</ref>*<sp/>jump_dest,<sp/>GPRegisterNumber<sp/>reg_num)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(jump_dest);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_reference" kindref="compound">Reference</ref>*<sp/>ref<sp/>=<sp/>(<ref refid="struct_reference" kindref="compound">Reference</ref>*)<sp/>calloc<sp/>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ref[0]));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ref);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>ref-&gt;position<sp/><sp/>=<sp/>PutCJump<sp/>(ctx,<sp/>reg_num,<sp/>jump_dest-&gt;get_name());</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>ref-&gt;address<sp/><sp/><sp/>=<sp/>ref-&gt;position<sp/>+<sp/>4<sp/>+<sp/>CODE_VIRTUAL_ADDRESS;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>ref-&gt;ref_value<sp/>=<sp/>jump_dest;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>AddReference<sp/>(&amp;ctx-&gt;jump_refs,<sp/>ref);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>PutSubRsp<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(num<sp/>&lt;<sp/>255);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;sub<sp/>$%lu,<sp/>%%rsp<sp/>&quot;</highlight><highlight class="normal">,<sp/>num);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>print_comment<sp/>(comment);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_CODES_SIZE<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op_codes<sp/>[OP_CODES_SIZE]<sp/>=<sp/>{RegReg,<sp/>Sub,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_reg" kindref="compound">Reg</ref>*<sp/>rsp<sp/>=<sp/>GetReg<sp/>(RSP);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes<sp/>[2]<sp/>=<sp/>rsp-&gt;op_code_number<sp/>|<sp/>0xe8;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes<sp/>[3]<sp/>=<sp/>(char)<sp/>num;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteOpCodes<sp/>(ctx,<sp/>op_codes,<sp/>OP_CODES_SIZE);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>PutAddRsp<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;add<sp/>$%lu,<sp/>%%rsp<sp/>&quot;</highlight><highlight class="normal">,<sp/>num);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>print_comment<sp/>(comment);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_CODES_SIZE<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op_codes<sp/>[OP_CODES_SIZE]<sp/>=<sp/>{RegReg,<sp/>Add,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_reg" kindref="compound">Reg</ref>*<sp/>rsp<sp/>=<sp/>GetReg<sp/>(RSP);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes<sp/>[2]<sp/>=<sp/>rsp-&gt;op_code_number<sp/>|<sp/>0xc0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes<sp/>[3]<sp/>=<sp/>(char)<sp/>num;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteOpCodes<sp/>(ctx,<sp/>op_codes,<sp/>OP_CODES_SIZE);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>PutRet<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ctx);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;ret<sp/>&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>print_comment<sp/>(comment);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_CODES_SIZE<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op_codes<sp/>[OP_CODES_SIZE]<sp/>=<sp/>{Ret};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteOpCodes<sp/>(ctx,<sp/>op_codes,<sp/>OP_CODES_SIZE);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>PutJump<sp/><sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/>name_t<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;jmp<sp/>%s<sp/>&quot;</highlight><highlight class="normal">,<sp/>label);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>print_comment<sp/>(comment);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>print_raw<sp/>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_CODES_SIZE<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op_codes<sp/>[OP_CODES_SIZE]<sp/>=<sp/>{Jmp};</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>ctx-&gt;code-&gt;size<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteOpCodes<sp/>(ctx,<sp/>op_codes,<sp/>OP_CODES_SIZE);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>position;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>PutCJump<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/>GPRegisterNumber<sp/>test,<sp/>name_t<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;cmp<sp/>$100,<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>GetRegName(test));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;je<sp/>%s<sp/>&quot;</highlight><highlight class="normal">,<sp/>label);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>print_comment<sp/>(comment);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_CODES_SIZE<sp/>=<sp/>6<sp/>+<sp/>4;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op_codes<sp/>[OP_CODES_SIZE]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cmp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>SetOpCodesForRegs<sp/>(op_codes,<sp/>test,<sp/>test);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes<sp/>[1]<sp/>=<sp/>0x83;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes<sp/>[3]<sp/>=<sp/>0x64;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>je</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes<sp/>[4]<sp/>=<sp/>0x0f;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes<sp/>[5]<sp/>=<sp/>0x84;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>ctx-&gt;code-&gt;size<sp/>+<sp/>OP_CODES_SIZE<sp/>-<sp/>4;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteOpCodes<sp/>(ctx,<sp/>op_codes,<sp/>OP_CODES_SIZE);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>position;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>PutCall<sp/><sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/>name_t<sp/>label,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;call<sp/>%s<sp/>&quot;</highlight><highlight class="normal">,<sp/>label);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>print_comment<sp/>(comment);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_CODES_SIZE<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op_codes<sp/>[OP_CODES_SIZE]<sp/>=<sp/>{<ref refid="class_call" kindref="compound">Call</ref>};</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>position<sp/>=<sp/>ctx-&gt;code-&gt;size<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteOpCodes<sp/>(ctx,<sp/>op_codes,<sp/>OP_CODES_SIZE);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>position;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>PutPushR<sp/><sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/>GPRegisterNumber<sp/>reg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment)</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;push<sp/>%s<sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">,<sp/>GetRegName<sp/>(reg));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>print_comment<sp/>(comment);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_CODES_SIZE<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op_codes<sp/>[OP_CODES_SIZE]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_reg" kindref="compound">Reg</ref>*<sp/><sp/><sp/><sp/>reg_ptr<sp/>=<sp/>GetReg<sp/>(reg);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(reg_ptr);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reg_ptr-&gt;op_code_number<sp/>&lt;<sp/>8)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[0]<sp/>=<sp/>Push<sp/>+<sp/>reg_ptr-&gt;op_code_number;<sp/></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>1;<sp/></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[0]<sp/>=<sp/>0x41;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[1]<sp/>=<sp/>Push<sp/>+<sp/>reg_ptr-&gt;op_code_number<sp/>-<sp/>8;<sp/></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>2;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteOpCodes<sp/>(ctx,<sp/>op_codes,<sp/>size);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>PutPopR<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/>GPRegisterNumber<sp/>reg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;pop<sp/>%s<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">,<sp/>GetRegName<sp/>(reg));</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>print_comment<sp/>(comment);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_CODES_SIZE<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op_codes<sp/>[OP_CODES_SIZE]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_reg" kindref="compound">Reg</ref>*<sp/><sp/><sp/><sp/>reg_ptr<sp/>=<sp/>GetReg<sp/>(reg);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(reg_ptr);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reg_ptr-&gt;op_code_number<sp/>&lt;<sp/>8)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[0]<sp/>=<sp/>Pop<sp/>+<sp/>reg_ptr-&gt;op_code_number;<sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>1;<sp/></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[0]<sp/>=<sp/>0x41;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[1]<sp/>=<sp/>Pop<sp/>+<sp/>reg_ptr-&gt;op_code_number<sp/>-<sp/>8;<sp/></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>2;<sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteOpCodes<sp/>(ctx,<sp/>op_codes,<sp/>size);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wsign-conversion&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetOpCodesForRegs<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>op_codes,<sp/><sp/>GPRegisterNumber<sp/>src,<sp/>GPRegisterNumber<sp/>dest)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_reg" kindref="compound">Reg</ref>*<sp/><sp/>src_reg<sp/>=<sp/>GetReg<sp/>(src);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_reg" kindref="compound">Reg</ref>*<sp/>dest_reg<sp/>=<sp/>GetReg<sp/>(dest);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src_reg<sp/>-&gt;op_code_number<sp/>&lt;<sp/>8<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest_reg-&gt;op_code_number<sp/>&lt;<sp/>8)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[0]<sp/>=<sp/>RegReg;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src_reg<sp/>-&gt;op_code_number<sp/>&gt;=<sp/>8<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest_reg-&gt;op_code_number<sp/>&gt;=<sp/>8)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[0]<sp/>=<sp/>ExtendedExtended;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src_reg<sp/>-&gt;op_code_number<sp/>&lt;<sp/>8<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest_reg-&gt;op_code_number<sp/>&gt;=<sp/>8)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[0]<sp/>=<sp/>RegExtended;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src_reg<sp/>-&gt;op_code_number<sp/>&gt;=<sp/>8<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest_reg-&gt;op_code_number<sp/>&lt;<sp/>8)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[0]<sp/>=<sp/>ExtendedReg;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>args_byte<sp/>=<sp/>ArgsByte;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>src_byte<sp/><sp/>=<sp/><sp/>(src_reg-&gt;op_code_number<sp/><sp/>%<sp/>8)<sp/>&lt;&lt;<sp/>3;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>dest_byte<sp/>=<sp/><sp/>(dest_reg-&gt;op_code_number<sp/>%<sp/>8);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>args_byte<sp/>|=<sp/>dest_byte;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>args_byte<sp/>|=<sp/>src_byte;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes<sp/>[2]<sp/>=<sp/>args_byte;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>PutMovRR<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/>GPRegisterNumber<sp/>src,<sp/>GPRegisterNumber<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;mov<sp/>%s,<sp/><sp/><sp/>%s<sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">,<sp/>GetRegName(src),<sp/>GetRegName(dest));</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>print_comment<sp/>(comment);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>OP_CODES_SIZE<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op_codes<sp/>[OP_CODES_SIZE]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes[1]<sp/>=<sp/>Mov;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>SetOpCodesForRegs<sp/>(op_codes,<sp/>src,<sp/>dest);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteOpCodes<sp/>(ctx,<sp/>op_codes,<sp/>OP_CODES_SIZE);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>PutMovConstant<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/>GPRegisterNumber<sp/>dest,<sp/>data_t<sp/>data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment)</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;movq<sp/>$%-4d,<sp/>%s<sp/><sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">,<sp/>data,<sp/>GetRegName(dest));</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>print_comment<sp/>(comment);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>OP_CODES_SIZE<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op_codes<sp/>[OP_CODES_SIZE]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_reg" kindref="compound">Reg</ref>*<sp/><sp/>dest_reg<sp/>=<sp/>GetReg<sp/>(dest);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dest_reg-&gt;op_code_number<sp/>&lt;<sp/>8)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[0]<sp/>=<sp/>RegReg;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[2]<sp/>=<sp/>0xc0<sp/>+<sp/>dest_reg-&gt;op_code_number;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[0]<sp/>=<sp/>RegExtended;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[2]<sp/>=<sp/>0xc0<sp/>+<sp/>dest_reg-&gt;op_code_number<sp/>-<sp/>8;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes[1]<sp/>=<sp/>0xc7;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>*<sp/>((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>(op_codes<sp/>+<sp/>3))<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteOpCodes<sp/>(ctx,<sp/>op_codes,<sp/>OP_CODES_SIZE);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>PutMoveToStack<sp/><sp/><sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/>GPRegisterNumber<sp/>src,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;movq<sp/>%s,<sp/>-%-2lu(%%rbp)<sp/><sp/>&quot;</highlight><highlight class="normal">,<sp/><sp/>GetRegName(src),<sp/>offset<sp/>*<sp/>8);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>print_comment<sp/>(comment);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>OP_CODES_SIZE<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op_codes<sp/>[OP_CODES_SIZE]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes[1]<sp/>=<sp/>Mov;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_reg" kindref="compound">Reg</ref>*<sp/>src_reg<sp/>=<sp/>GetReg<sp/>(src);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src_reg-&gt;op_code_number<sp/>&lt;<sp/>8)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[0]<sp/>=<sp/>RegReg;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[0]<sp/>=<sp/>ExtendedReg;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>args_byte<sp/>=<sp/>0x45;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>src_byte<sp/><sp/>=<sp/><sp/>src_reg-&gt;op_code_number<sp/>&lt;&lt;<sp/>3;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>args_byte<sp/>|=<sp/>src_byte;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes<sp/>[2]<sp/>=<sp/>args_byte;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes<sp/>[3]<sp/>=<sp/>-offset<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteOpCodes<sp/>(ctx,<sp/>op_codes,<sp/>OP_CODES_SIZE);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>PutMoveFromStack<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,<sp/>GPRegisterNumber<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;movq<sp/>-%-2lu(%%rbp),<sp/>%s<sp/><sp/>&quot;</highlight><highlight class="normal">,<sp/>offset<sp/>*<sp/>8,<sp/>GetRegName(dest));</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>print_comment<sp/>(comment);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>OP_CODES_SIZE<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op_codes<sp/>[OP_CODES_SIZE]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dest<sp/>&lt;<sp/>8)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[0]<sp/>=<sp/>RegReg;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[0]<sp/>=<sp/>ExtendedReg;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes[1]<sp/>=<sp/>0x8b;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_reg" kindref="compound">Reg</ref>*<sp/>dest_reg<sp/><sp/><sp/>=<sp/>GetReg<sp/>(dest);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>args_byte<sp/>=<sp/>0x45;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>dest_byte<sp/>=<sp/>(dest_reg-&gt;op_code_number<sp/>%<sp/>8)<sp/>&lt;&lt;<sp/>3;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>args_byte<sp/>|=<sp/>dest_byte;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes<sp/>[2]<sp/>=<sp/>args_byte;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes<sp/>[3]<sp/>=<sp/>-offset<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteOpCodes<sp/>(ctx,<sp/>op_codes,<sp/>OP_CODES_SIZE);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>GetOperationName<sp/>(OperatorType<sp/>type)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(type)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>OperatorType::Add:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;add&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>OperatorType::Sub:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;sub&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>OperatorType::Mul:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;imul&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>OperatorType::Div:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;idiv&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>OperatorType::Bigger:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;setg&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>OperatorType::Less:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;setl&quot;</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>OperatorType::Unknown:<sp/></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;Unknown&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>NormalizeResultEnum</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>MUL,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>DIV,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Value<sp/>MUST<sp/>be<sp/>in<sp/>RAX,<sp/>it<sp/>also<sp/>uses<sp/>RDX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PutClearRdx<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>NormalizeResult<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/>GPRegisterNumber<sp/>result,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>normalization_type);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PutIMul<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/>GPRegisterNumber<sp/>reg);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PutIDiv<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/>GPRegisterNumber<sp/>reg);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PutAdd<sp/><sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/>GPRegisterNumber<sp/>src,<sp/>GPRegisterNumber<sp/>dest);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PutSub<sp/><sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/>GPRegisterNumber<sp/>src,<sp/>GPRegisterNumber<sp/>dest);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PutClearRdx<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx)</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;xor<sp/>%%rdx,<sp/>%%rdx\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>OP_CODES_SIZE<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op_codes<sp/>[OP_CODES_SIZE]<sp/>=<sp/>{0x48,<sp/>0x31,<sp/>0xd2};</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteOpCodes<sp/>(ctx,<sp/>op_codes,<sp/>3);<sp/></highlight><highlight class="comment">//<sp/>write<sp/>xor<sp/>%rdx,<sp/>%rdx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>NormalizeResult<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/>GPRegisterNumber<sp/>result,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>normalization_type)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;#<sp/>(normalize<sp/>result)<sp/>#\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>PutClearRdx<sp/>(ctx);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>PutMovConstant<sp/>(ctx,<sp/>result,<sp/>100);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(normalization_type<sp/>==<sp/>MUL)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PutIMul<sp/>(ctx,<sp/>result);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(normalization_type<sp/>==<sp/>DIV)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PutIDiv<sp/>(ctx,<sp/>result);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>PutMovRR<sp/>(ctx,<sp/>RAX,<sp/>result,<sp/></highlight><highlight class="stringliteral">&quot;(-&gt;<sp/>normalized<sp/>result)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PutIMul<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/>GPRegisterNumber<sp/>reg)</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;imul<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>GetRegName<sp/>(reg));</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>OP_CODES_SIZE<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op_codes<sp/>[OP_CODES_SIZE]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes[1]<sp/>=<sp/>0xf7;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_reg" kindref="compound">Reg</ref>*<sp/>reg_reg<sp/>=<sp/>GetReg<sp/>(reg);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reg_reg-&gt;op_code_number<sp/>&lt;<sp/>8)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[0]<sp/>=<sp/>RegReg;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[2]<sp/>=<sp/>0xe8<sp/>+<sp/>reg_reg-&gt;op_code_number;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[0]<sp/>=<sp/>RegExtended;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[2]<sp/>=<sp/>0xe8<sp/>+<sp/>reg_reg-&gt;op_code_number<sp/>-<sp/>8;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteOpCodes<sp/>(ctx,<sp/>op_codes,<sp/>3);<sp/></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PutIDiv<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/>GPRegisterNumber<sp/>reg)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;idiv<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>GetRegName<sp/>(reg));</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>OP_CODES_SIZE<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op_codes<sp/>[OP_CODES_SIZE]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes[1]<sp/>=<sp/>0xf7;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_reg" kindref="compound">Reg</ref>*<sp/>reg_reg<sp/>=<sp/>GetReg<sp/>(reg);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reg_reg-&gt;op_code_number<sp/>&lt;<sp/>8)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[0]<sp/>=<sp/>RegReg;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[2]<sp/>=<sp/>0xf8<sp/>+<sp/>reg_reg-&gt;op_code_number;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[0]<sp/>=<sp/>RegExtended;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[2]<sp/>=<sp/>0xf8<sp/>+<sp/>reg_reg-&gt;op_code_number<sp/>-<sp/>8;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteOpCodes<sp/>(ctx,<sp/>op_codes,<sp/>3);<sp/></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PutAdd<sp/><sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/>GPRegisterNumber<sp/>src,<sp/>GPRegisterNumber<sp/>dest)</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;add<sp/>%s,<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>GetRegName<sp/>(src),<sp/>GetRegName<sp/>(dest));</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>OP_CODES_SIZE<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op_codes<sp/>[OP_CODES_SIZE]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes[1]<sp/>=<sp/>0x01;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>SetOpCodesForRegs<sp/>(op_codes,<sp/>src,<sp/>dest);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteOpCodes<sp/>(ctx,<sp/>op_codes,<sp/>3);<sp/></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PutSub<sp/><sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/>GPRegisterNumber<sp/>src,<sp/>GPRegisterNumber<sp/>dest)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;sub<sp/>%s,<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>GetRegName<sp/>(src),<sp/>GetRegName<sp/>(dest));</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>OP_CODES_SIZE<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op_codes<sp/>[OP_CODES_SIZE]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes[1]<sp/>=<sp/>0x29;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>SetOpCodesForRegs<sp/>(op_codes,<sp/>src,<sp/>dest);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteOpCodes<sp/>(ctx,<sp/>op_codes,<sp/>3);<sp/></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>PutLogicOp<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/>OperatorType<sp/>operation,<sp/>GPRegisterNumber<sp/>src,<sp/>GPRegisterNumber<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;#<sp/>generating<sp/>logic<sp/>op<sp/>#\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>PutPushR<sp/>(ctx,<sp/>RDX,<sp/></highlight><highlight class="stringliteral">&quot;(save<sp/>%rdx)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>print_raw<sp/>(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;cmpq<sp/>%s,<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>GetRegName(src),<sp/>GetRegName(dest));</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;%s<sp/>%%al\n&quot;</highlight><highlight class="normal">,<sp/>GetOperationName(operation));</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;movzbq<sp/>%%al,<sp/>%%rax\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>OP_CODES_SIZE<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op_codes<sp/>[OP_CODES_SIZE]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes[1]<sp/>=<sp/>0x39;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>SetOpCodesForRegs<sp/>(op_codes,<sp/>src,<sp/>dest);<sp/></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteOpCodes<sp/>(ctx,<sp/>op_codes,<sp/>OP_CODES_SIZE<sp/>-<sp/>1);<sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>cmpq</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes[0]<sp/>=<sp/>0x0f;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes[2]<sp/>=<sp/>0xc0;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operation<sp/>==<sp/>OperatorType::Bigger)</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[1]<sp/>=<sp/>0x9f;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>op_codes[1]<sp/>=<sp/>0x9c;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteOpCodes<sp/>(ctx,<sp/>op_codes,<sp/>OP_CODES_SIZE<sp/>-<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>write<sp/>setl<sp/>or<sp/>setg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes[0]<sp/>=<sp/>RegReg;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes[1]<sp/>=<sp/>0x0f;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes[2]<sp/>=<sp/>0xb6;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>op_codes[3]<sp/>=<sp/>0xc0;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteOpCodes<sp/>(ctx,<sp/>op_codes,<sp/>OP_CODES_SIZE);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>movzbq<sp/>%al,<sp/>%rax</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>NormalizeResult<sp/>(ctx,<sp/>dest,<sp/>MUL);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>print_comment<sp/>(comment);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>PutPopR<sp/>(ctx,<sp/>RDX,<sp/></highlight><highlight class="stringliteral">&quot;(restore<sp/>%rdx)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>PutMathAddSub<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/>OperatorType<sp/>operation,<sp/>GPRegisterNumber<sp/>src,<sp/>GPRegisterNumber<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment)</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ctx);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;#<sp/>math<sp/>op<sp/>#\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operation<sp/>==<sp/>OperatorType::Add)</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PutAdd<sp/>(ctx,<sp/>src,<sp/>dest);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PutSub<sp/>(ctx,<sp/>src,<sp/>dest);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>print_comment<sp/>(comment);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>PutMulDiv<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx,<sp/><sp/>OperatorType<sp/>operation,<sp/>GPRegisterNumber<sp/>src,<sp/>GPRegisterNumber<sp/>dest,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment)</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;#<sp/>generating<sp/>mul/div<sp/>#\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>PutPushR<sp/>(ctx,<sp/>RDX,<sp/></highlight><highlight class="stringliteral">&quot;(save<sp/>%rdx)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>PutClearRdx<sp/>(ctx);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>PutMovRR<sp/>(ctx,<sp/>dest,<sp/>RAX);</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(operation<sp/>==<sp/>OperatorType::Mul)</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PutIMul<sp/>(ctx,<sp/>src);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PutIDiv<sp/>(ctx,<sp/>src);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>how_to_normalize<sp/>=<sp/>operation<sp/>==<sp/>OperatorType::Div<sp/>?<sp/>MUL<sp/>:<sp/>DIV;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>NormalizeResult<sp/>(ctx,<sp/>dest,<sp/>how_to_normalize);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>print_comment<sp/>(comment);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>PutPopR<sp/>(ctx,<sp/>RDX,<sp/></highlight><highlight class="stringliteral">&quot;(restore<sp/>%rdx)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>PutSysCall<sp/>(<ref refid="struct_context" kindref="compound">Context</ref>*<sp/>ctx)</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ctx);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OP_CODES_SIZE<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>op_codes[OP_CODES_SIZE]<sp/>=<sp/>{0x0f,<sp/>0x05};</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>print_tab<sp/>(</highlight><highlight class="stringliteral">&quot;syscall\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteOpCodes<sp/>(ctx,<sp/>op_codes,<sp/>OP_CODES_SIZE);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
    </programlisting>
    <location file="src/IR/TranslateTox86/Commands.cpp"/>
  </compounddef>
</doxygen>
