<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_ast_to_i_r_8cpp" kind="file" language="C++">
    <compoundname>AstToIR.cpp</compoundname>
    <includes local="no">assert.h</includes>
    <includes refid="_ast_to_i_r_8h" local="yes">AstToIR.h</includes>
    <includes refid="_builder_8h" local="yes">Builder.h</includes>
    <includes refid="_string_pool_8h" local="yes">StringPool.h</includes>
    <includes refid="_d_s_l_8h" local="yes">DSL.h</includes>
    <includes refid="_grammar_8h" local="yes">Grammar.h</includes>
    <includes refid="_lang_utils_8h" local="yes">LangUtils.h</includes>
    <includes refid="_common_enums_8h" local="yes">CommonEnums.h</includes>
    <includes refid="_easy_debug_8h" local="yes">EasyDebug.h</includes>
    <includes refid="_program_8h" local="yes">Program.h</includes>
    <incdepgraph>
      <node id="16">
        <label>Instructions.h</label>
        <link refid="_instructions_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>stdarg.h</label>
      </node>
      <node id="11">
        <label>Storage.h</label>
        <link refid="_storage_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>assert.h</label>
      </node>
      <node id="20">
        <label>Tabels.h</label>
        <link refid="_tabels_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>CommonEnums.h</label>
        <link refid="_common_enums_8h_source"/>
      </node>
      <node id="27">
        <label>errno.h</label>
      </node>
      <node id="29">
        <label>Logger.h</label>
        <link refid="_logger_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>LogMacroses.h</label>
        <link refid="_log_macroses_8h_source"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>cassert</label>
      </node>
      <node id="13">
        <label>TypeDefs.h</label>
        <link refid="_type_defs_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/IR/AstToIR/AstToIR.cpp</label>
        <link refid="_ast_to_i_r_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>LangUtils.h</label>
        <link refid="_lang_utils_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>StringPool.h</label>
        <link refid="_string_pool_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>stddef.h</label>
      </node>
      <node id="38">
        <label>Grammar.h</label>
        <link refid="_grammar_8h_source"/>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>RegistersUsage.h</label>
        <link refid="_registers_usage_8h_source"/>
      </node>
      <node id="19">
        <label>NameTable.h</label>
        <link refid="_name_table_8h_source"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>Token.h</label>
        <link refid="_token_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>ValueTable.h</label>
        <link refid="_value_table_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>EasyDebug.h</label>
        <link refid="_easy_debug_8h_source"/>
      </node>
      <node id="24">
        <label>DSL.h</label>
        <link refid="_d_s_l_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>Builder.h</label>
        <link refid="_builder_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>string.h</label>
      </node>
      <node id="7">
        <label>ValueArrTemplate.h</label>
        <link refid="_value_arr_template_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>cstdio</label>
      </node>
      <node id="39">
        <label>TokenTypes.h</label>
        <link refid="_token_types_8h_source"/>
      </node>
      <node id="17">
        <label>Program.h</label>
        <link refid="_program_8h_source"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>LogConfig.h</label>
        <link refid="_log_config_8h_source"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Module.h</label>
        <link refid="_module_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cstdlib</label>
      </node>
      <node id="26">
        <label>iostream</label>
      </node>
      <node id="6">
        <label>cstddef</label>
      </node>
      <node id="3">
        <label>AstToIR.h</label>
        <link refid="_ast_to_i_r_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>tostring.h</label>
        <link refid="tostring_8h_source"/>
      </node>
      <node id="35">
        <label>Utils.h</label>
        <link refid="_utils_8h_source"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>FunctionLogger.h</label>
        <link refid="_function_logger_8h_source"/>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>Value.h</label>
        <link refid="_value_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>NoCopyable.h</label>
        <link refid="_no_copyable_8h_source"/>
      </node>
      <node id="37">
        <label>stdio.h</label>
      </node>
      <node id="34">
        <label>LinuxColors.h</label>
        <link refid="_linux_colors_8h_source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_ast_to_i_r_8cpp_1a84aeebba971d30ba776a3e896180fc0b" prot="public" static="yes" mutable="no">
        <type>unsigned</type>
        <definition>unsigned NUMBER_OF_IF</definition>
        <argsstring></argsstring>
        <name>NUMBER_OF_IF</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="107" column="17" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_ast_to_i_r_8cpp_1abf24dbbae650cb0c70b84a5464403a60" prot="public" static="yes" mutable="no">
        <type>unsigned</type>
        <definition>unsigned CONSTANT_NUMBER</definition>
        <argsstring></argsstring>
        <name>CONSTANT_NUMBER</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="229" column="17" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_ast_to_i_r_8cpp_1a3272aad8e65b996156fcfe9ab3f47ec8" prot="public" static="yes" mutable="no">
        <type>unsigned</type>
        <definition>unsigned TEMP_VAR_NUMBER</definition>
        <argsstring></argsstring>
        <name>TEMP_VAR_NUMBER</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="230" column="17" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="230" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_ast_to_i_r_8cpp_1aaddb23b5924e2a96f2439d6fcbd881e3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_value" kindref="compound">Value</ref> *</type>
        <definition>static Value * AstVisitor</definition>
        <argsstring>(Builder *buildog, const Token *token)</argsstring>
        <name>AstVisitor</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>const <ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="55" column="14" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="55" bodyend="86" declfile="src/IR/AstToIR/AstToIR.cpp" declline="17" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="_ast_to_i_r_8cpp_1ac2ac4496ff8a1125990067eddc7ccaf1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_value" kindref="compound">Value</ref> *</type>
        <definition>static Value * EmitName</definition>
        <argsstring>(Builder *buildog, const Token *token)</argsstring>
        <name>EmitName</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>const <ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="91" column="14" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="91" bodyend="102" declfile="src/IR/AstToIR/AstToIR.cpp" declline="20" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_ast_to_i_r_8cpp_1ab87885903ceb355d4000ce65d6e13b93" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_value" kindref="compound">Value</ref> *</type>
        <definition>static Value * EmitInstruction</definition>
        <argsstring>(Builder *buildog, const Token *token)</argsstring>
        <name>EmitInstruction</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>const <ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="113" column="14" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="113" bodyend="125" declfile="src/IR/AstToIR/AstToIR.cpp" declline="21" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_ast_to_i_r_8cpp_1ada76080aa8b463e62f4c04f2df3172d8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_constant" kindref="compound">Constant</ref> *</type>
        <definition>static Constant * EmitConstant</definition>
        <argsstring>(Builder *buildog, const Token *token)</argsstring>
        <name>EmitConstant</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>const <ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="232" column="18" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="232" bodyend="245" declfile="src/IR/AstToIR/AstToIR.cpp" declline="22" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_ast_to_i_r_8cpp_1a14ac7acd7e6197daf90c411bcb760aaa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_function" kindref="compound">Function</ref> *</type>
        <definition>static Function * EmitFunction</definition>
        <argsstring>(Builder *buildog, const Token *token)</argsstring>
        <name>EmitFunction</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>const <ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="252" column="17" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="252" bodyend="277" declfile="src/IR/AstToIR/AstToIR.cpp" declline="23" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_ast_to_i_r_8cpp_1a27db8c3e3e0e881f84cc1c289419b95d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_call" kindref="compound">Call</ref> *</type>
        <definition>static Call * EmitCall</definition>
        <argsstring>(Builder *buildog, const Token *token)</argsstring>
        <name>EmitCall</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>const <ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="304" column="13" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="304" bodyend="362" declfile="src/IR/AstToIR/AstToIR.cpp" declline="24" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_ast_to_i_r_8cpp_1a032529052940810277014428cdbcdcb8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_value" kindref="compound">Value</ref> *</type>
        <definition>static Value * EmitNativeFunction</definition>
        <argsstring>(Builder *buildog, const Token *token)</argsstring>
        <name>EmitNativeFunction</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>const <ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="393" column="14" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="393" bodyend="399" declfile="src/IR/AstToIR/AstToIR.cpp" declline="25" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_ast_to_i_r_8cpp_1a7cd1c186425bfb172df5d77fc1ff5ffc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_value" kindref="compound">Value</ref> *</type>
        <definition>static Value * EmitInitializator</definition>
        <argsstring>(Builder *buildog, const Token *token)</argsstring>
        <name>EmitInitializator</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>const <ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="428" column="14" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="428" bodyend="440" declfile="src/IR/AstToIR/AstToIR.cpp" declline="26" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_ast_to_i_r_8cpp_1a0bee0106e08e18441305c1cb9eb14716" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_operator" kindref="compound">Operator</ref> *</type>
        <definition>static Operator * EmitOperator</definition>
        <argsstring>(Builder *buildog, const Token *token)</argsstring>
        <name>EmitOperator</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>const <ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="499" column="17" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="499" bodyend="514" declfile="src/IR/AstToIR/AstToIR.cpp" declline="27" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_ast_to_i_r_8cpp_1a0a8fc52008421e307b09b2e8347f0724" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_value" kindref="compound">Value</ref> *</type>
        <definition>static Value * EmitAssigment</definition>
        <argsstring>(Builder *buildog, const Token *token)</argsstring>
        <name>EmitAssigment</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>const <ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="537" column="14" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="537" bodyend="550" declfile="src/IR/AstToIR/AstToIR.cpp" declline="28" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_ast_to_i_r_8cpp_1aa85147b675e3da241c96da6e7345e4a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_return" kindref="compound">Return</ref> *</type>
        <definition>static Return * EmitReturn</definition>
        <argsstring>(Builder *buildog, const Token *token)</argsstring>
        <name>EmitReturn</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>const <ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="555" column="17" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="555" bodyend="566" declfile="src/IR/AstToIR/AstToIR.cpp" declline="29" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_ast_to_i_r_8cpp_1aad5c0041a9957f5dbdf8e8d9199364d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AstToIR</definition>
        <argsstring>(Program *program, Module *dest_mod)</argsstring>
        <name>AstToIR</name>
        <param>
          <type><ref refid="struct_program" kindref="compound">Program</ref> *</type>
          <declname>program</declname>
        </param>
        <param>
          <type><ref refid="class_module" kindref="compound">Module</ref> *</type>
          <declname>dest_mod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="32" column="5" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="32" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="_ast_to_i_r_8cpp_1af619b621022191e3648fc76f495970a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_instruction" kindref="compound">Instruction</ref> *</type>
        <definition>static Instruction * EmitIf</definition>
        <argsstring>(Builder *buildog, const Token *token)</argsstring>
        <name>EmitIf</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>const <ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="127" column="20" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="127" bodyend="156" declfile="src/IR/AstToIR/AstToIR.cpp" declline="109" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="_ast_to_i_r_8cpp_1a6383bba5910f5c91362657005a1c01bd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_instruction" kindref="compound">Instruction</ref> *</type>
        <definition>static Instruction * EmitOnlyIf</definition>
        <argsstring>(Builder *buildog, Branch *branch, BaseBlock *than_block, const Token *token, unsigned if_number)</argsstring>
        <name>EmitOnlyIf</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type><ref refid="class_branch" kindref="compound">Branch</ref> *</type>
          <declname>branch</declname>
        </param>
        <param>
          <type><ref refid="class_base_block" kindref="compound">BaseBlock</ref> *</type>
          <declname>than_block</declname>
        </param>
        <param>
          <type>const <ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>token</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>if_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="158" column="20" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="158" bodyend="183" declfile="src/IR/AstToIR/AstToIR.cpp" declline="110" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="_ast_to_i_r_8cpp_1a52baf65e1737b346d0bc022772fd417a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_instruction" kindref="compound">Instruction</ref> *</type>
        <definition>static Instruction * EmitIfAndElse</definition>
        <argsstring>(Builder *buildog, Branch *branch, BaseBlock *than_block, const Token *token, unsigned if_number)</argsstring>
        <name>EmitIfAndElse</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type><ref refid="class_branch" kindref="compound">Branch</ref> *</type>
          <declname>branch</declname>
        </param>
        <param>
          <type><ref refid="class_base_block" kindref="compound">BaseBlock</ref> *</type>
          <declname>than_block</declname>
        </param>
        <param>
          <type>const <ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>token</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>if_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="185" column="20" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="185" bodyend="224" declfile="src/IR/AstToIR/AstToIR.cpp" declline="111" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="_ast_to_i_r_8cpp_1aa173ea2d0f8b37b590efd5cadab2d11f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int GetParametersDeclaration</definition>
        <argsstring>(Builder *buildog, ValueArr&lt; Value &gt; *argv, Token *token)</argsstring>
        <name>GetParametersDeclaration</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type><ref refid="class_value_arr" kindref="compound">ValueArr</ref>&lt; <ref refid="class_value" kindref="compound">Value</ref> &gt; *</type>
          <declname>argv</declname>
        </param>
        <param>
          <type><ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="279" column="12" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="279" bodyend="298" declfile="src/IR/AstToIR/AstToIR.cpp" declline="250" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="_ast_to_i_r_8cpp_1ab0f807f9268b49e36a18024c7390287e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_function" kindref="compound">Function</ref> *</type>
        <definition>const Function * FindNativeFunction</definition>
        <argsstring>(Builder *buildog, int native_func_num)</argsstring>
        <name>FindNativeFunction</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>int</type>
          <declname>native_func_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="364" column="16" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="364" bodyend="386" declfile="src/IR/AstToIR/AstToIR.cpp" declline="302" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="_ast_to_i_r_8cpp_1ad9e07be7ee357c1be4db4cea407dafd8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_value" kindref="compound">Value</ref> *</type>
        <definition>static Value * RearrangeFinTokens</definition>
        <argsstring>(Builder *buildog, const Token *token)</argsstring>
        <name>RearrangeFinTokens</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>const <ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="401" column="14" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="401" bodyend="420" declfile="src/IR/AstToIR/AstToIR.cpp" declline="391" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="_ast_to_i_r_8cpp_1a4a184cc6af4d68844ff11f133a2b0a9c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_global_var" kindref="compound">GlobalVar</ref> *</type>
        <definition>static GlobalVar * AddGlobalVar</definition>
        <argsstring>(Builder *buildog, const Token *token)</argsstring>
        <name>AddGlobalVar</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>const <ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="442" column="18" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="442" bodyend="467" declfile="src/IR/AstToIR/AstToIR.cpp" declline="425" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_ast_to_i_r_8cpp_1a11800beffa9323df7133b4ca003c51b8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_store" kindref="compound">Store</ref> *</type>
        <definition>static Store * AddLocalVar</definition>
        <argsstring>(Builder *buildog, const Token *token)</argsstring>
        <name>AddLocalVar</name>
        <param>
          <type><ref refid="struct_builder" kindref="compound">Builder</ref> *</type>
          <declname>buildog</declname>
        </param>
        <param>
          <type>const <ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="469" column="14" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="469" bodyend="491" declfile="src/IR/AstToIR/AstToIR.cpp" declline="426" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="_ast_to_i_r_8cpp_1a6bd9a2dd48f48e5ee70b596ed285bf03" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OperatorType</type>
        <definition>static OperatorType GetOperatorType</definition>
        <argsstring>(int type)</argsstring>
        <name>GetOperatorType</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/AstToIR/AstToIR.cpp" line="516" column="21" bodyfile="src/IR/AstToIR/AstToIR.cpp" bodystart="516" bodyend="532" declfile="src/IR/AstToIR/AstToIR.cpp" declline="497" declcolumn="21"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AstToIR.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Builder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;StringPool.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;DSL.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Grammar.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LangUtils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CommonEnums.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;EasyDebug.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Program.h&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>create<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>AstVisitor<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/><sp/><sp/><sp/><sp/>EmitName<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/><sp/><sp/><sp/><sp/>EmitInstruction<sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_constant" kindref="compound">Constant</ref>*<sp/><sp/>EmitConstant<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_function" kindref="compound">Function</ref>*<sp/><sp/>EmitFunction<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_call" kindref="compound">Call</ref>*<sp/><sp/><sp/><sp/><sp/><sp/>EmitCall<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/><sp/><sp/><sp/><sp/>EmitNativeFunction<sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/><sp/><sp/><sp/><sp/>EmitInitializator<sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_operator" kindref="compound">Operator</ref>*<sp/><sp/>EmitOperator<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/><sp/><sp/><sp/><sp/>EmitAssigment<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_return" kindref="compound">Return</ref>*<sp/><sp/><sp/><sp/>EmitReturn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AstToIR<sp/>(<ref refid="struct_program" kindref="compound">Program</ref>*<sp/>program,<sp/><ref refid="class_module" kindref="compound">Module</ref>*<sp/>dest_mod)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(program);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(dest_mod);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_builder" kindref="compound">Builder</ref><sp/>buildog<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>BuilderCtor<sp/>(&amp;buildog,<sp/>dest_mod);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_string_pool" kindref="compound">StringPool</ref><sp/>pool<sp/>=<sp/>{<sp/>program-&gt;string_arr,<sp/>(size_t<sp/>)<sp/>program-&gt;number_of_strings,<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>program-&gt;number_of_strings};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>SetStringPool<sp/>(&amp;pool);<sp/></highlight><highlight class="comment">//<sp/>size<sp/>MUST<sp/>be<sp/>equal<sp/>to<sp/>capacity<sp/>!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>AddNativeFunctions<sp/>(&amp;buildog);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>AstVisitor<sp/>(&amp;buildog,<sp/>program-&gt;root);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>program-&gt;string_arr<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>GetStringPool();<sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>program-&gt;number_of_strings<sp/>=<sp/>(int)<sp/>GetStringPoolSize();<sp/></highlight><highlight class="comment">//<sp/>warning!!!<sp/>size<sp/>!=<sp/>capacity<sp/>from<sp/>this<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>BuilderDtor<sp/>(&amp;buildog);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>AstVisitor<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(buildog);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!token)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(TYPE(token))</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>STATEMENT:<sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AstVisitor<sp/>(buildog,<sp/><sp/>LEFT(token));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AstVisitor<sp/>(buildog,<sp/>RIGHT(token));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NAME:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EmitName<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(buildog,<sp/>token);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>INSTRUCTION:<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EmitInstruction<sp/><sp/><sp/><sp/><sp/>(buildog,<sp/>token);<sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CONSTANT:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EmitConstant<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(buildog,<sp/>token);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FUNCTION:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EmitFunction<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(buildog,<sp/>token);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CALL:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EmitCall<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(buildog,<sp/>token);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NATIVE_FUNCTION:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EmitNativeFunction<sp/><sp/>(buildog,<sp/>token);<sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>INITIALIZATOR:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EmitInitializator<sp/><sp/><sp/>(buildog,<sp/>token);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>OPERATOR:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EmitOperator<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(buildog,<sp/>token);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ASSIGMENT:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EmitAssigment<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(buildog,<sp/>token);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>FUNCTION_RET_TYPE:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EmitReturn<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(buildog,<sp/>token);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>report<sp/>(</highlight><highlight class="stringliteral">&quot;Wrong<sp/>token<sp/>type\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToken<sp/>(token,<sp/>GetStringPool());</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="comment">//<sp/>Name</highlight></codeline>
<codeline lineno="91"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>EmitName<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(buildog);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(token);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>temp<sp/>=<sp/>FindValue<sp/>(buildog,<sp/>NAME_ID(token));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!temp)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>report<sp/>(</highlight><highlight class="stringliteral">&quot;Warning:<sp/>Can&apos;t<sp/>find<sp/>Value<sp/>for<sp/>Name:<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>GetString(NAME_ID(token)));</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="comment">//<sp/>Instructions,<sp/>for<sp/>example<sp/>IF,<sp/>IF<sp/>ELSE<sp/>and<sp/>e.t.</highlight></codeline>
<codeline lineno="107"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>NUMBER_OF_IF<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_instruction" kindref="compound">Instruction</ref>*<sp/>EmitIf<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_instruction" kindref="compound">Instruction</ref>*<sp/>EmitOnlyIf<sp/><sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/><ref refid="class_branch" kindref="compound">Branch</ref>*<sp/>branch,<sp/><ref refid="class_base_block" kindref="compound">BaseBlock</ref>*<sp/>than_block,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>if_number);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_instruction" kindref="compound">Instruction</ref>*<sp/>EmitIfAndElse<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/><ref refid="class_branch" kindref="compound">Branch</ref>*<sp/>branch,<sp/><ref refid="class_base_block" kindref="compound">BaseBlock</ref>*<sp/>than_block,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>if_number);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>EmitInstruction<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(buildog);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(token);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(INSTR(token))</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>IF:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EmitIf<sp/>(buildog,<sp/>token);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>report(</highlight><highlight class="stringliteral">&quot;Wrong<sp/>instruction\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_instruction" kindref="compound">Instruction</ref>*<sp/>EmitIf<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(buildog);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(token);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(INSTR(token)<sp/>!=<sp/>IF)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>report(</highlight><highlight class="stringliteral">&quot;Instruction<sp/>type<sp/>must<sp/>be<sp/>&apos;IF&apos;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/><sp/>condition<sp/>=<sp/>AstVisitor(buildog,<sp/>LEFT(token));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(condition);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Create<sp/>branch,<sp/>as<sp/>last<sp/>instruction<sp/>in<sp/>current<sp/>BaseBlock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_branch" kindref="compound">Branch</ref>*<sp/>branch<sp/>=<sp/>CreateBranch<sp/>(buildog,<sp/>NULL,<sp/>condition,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>&apos;than&apos;<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>if_number<sp/><sp/><sp/><sp/><sp/>=<sp/>NUMBER_OF_IF++;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>name_t<sp/>than_block_name<sp/>=<sp/>CreateString<sp/>(</highlight><highlight class="stringliteral">&quot;than_%u&quot;</highlight><highlight class="normal">,<sp/>if_number);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_base_block" kindref="compound">BaseBlock</ref>*<sp/>than_block<sp/>=<sp/>InsertNewBaseBlock<sp/>(buildog,<sp/>than_block_name);<sp/></highlight><highlight class="comment">//<sp/>insert<sp/>block<sp/>ant<sp/>switch<sp/>to<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(than_block);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IS_INSTRUCTION(RIGHT(token))<sp/>&amp;&amp;<sp/>INSTR(RIGHT(token))<sp/>==<sp/>ELSE)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EmitIfAndElse<sp/>(buildog,<sp/>branch,<sp/>than_block,<sp/>token,<sp/>if_number);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EmitOnlyIf<sp/>(buildog,<sp/>branch,<sp/>than_block,<sp/>token,<sp/>if_number);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_instruction" kindref="compound">Instruction</ref>*<sp/>EmitOnlyIf<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/><ref refid="class_branch" kindref="compound">Branch</ref>*<sp/>branch,<sp/><ref refid="class_base_block" kindref="compound">BaseBlock</ref>*<sp/>than_block,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>if_number)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(buildog);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(branch);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(token);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>than_body<sp/>=<sp/>RIGHT(token);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>AstVisitor(buildog,<sp/>than_body);<sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>`than`<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_branch" kindref="compound">Branch</ref>*<sp/>than_branch<sp/>=<sp/>CreateBranch<sp/>(buildog,<sp/>NULL,<sp/>NULL,<sp/>NULL,<sp/>NULL);<sp/></highlight><highlight class="comment">//<sp/>add<sp/>branch<sp/>as<sp/>last<sp/>instruction<sp/>to<sp/>`than`<sp/>body<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>assert(than_branch);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>name_t<sp/><sp/>merge_block_name<sp/>=<sp/>CreateString<sp/>(</highlight><highlight class="stringliteral">&quot;merge_%u&quot;</highlight><highlight class="normal">,<sp/>if_number);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(merge_block_name);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_base_block" kindref="compound">BaseBlock</ref>*<sp/>merge_block<sp/>=<sp/>InsertNewBaseBlock<sp/>(buildog,<sp/>merge_block_name);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(merge_block);<sp/></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>branch-&gt;set_true_block<sp/><sp/>(than_block);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>branch-&gt;set_false_block<sp/>(merge_block);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>than_branch-&gt;set_true_block<sp/><sp/>(merge_block);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_instruction" kindref="compound">Instruction</ref>*<sp/>EmitIfAndElse<sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/><ref refid="class_branch" kindref="compound">Branch</ref>*<sp/>branch,<sp/><ref refid="class_base_block" kindref="compound">BaseBlock</ref>*<sp/>than_block,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>if_number)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(buildog);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(token);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>than_body<sp/>=<sp/>LEFT<sp/>(RIGHT(token));</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>else_body<sp/>=<sp/>RIGHT(RIGHT(token));</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>AstVisitor(buildog,<sp/>than_body);<sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>`than`<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_branch" kindref="compound">Branch</ref>*<sp/>than_branch<sp/>=<sp/>CreateBranch<sp/>(buildog,<sp/>NULL,<sp/>NULL,<sp/>NULL,<sp/>NULL);<sp/></highlight><highlight class="comment">//<sp/>add<sp/>branch<sp/>as<sp/>last<sp/>instruction<sp/>to<sp/>`than`<sp/>body<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(than_branch);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>&apos;else&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>name_t<sp/><sp/>else_block_name<sp/>=<sp/>CreateString<sp/>(</highlight><highlight class="stringliteral">&quot;else_%u&quot;</highlight><highlight class="normal">,<sp/>if_number);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(else_block_name);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_base_block" kindref="compound">BaseBlock</ref>*<sp/>else_block<sp/>=<sp/>InsertNewBaseBlock<sp/>(buildog,<sp/>else_block_name);<sp/></highlight><highlight class="comment">//<sp/>insert<sp/>block<sp/>and<sp/>switch<sp/>to<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(else_block);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>AstVisitor(buildog,<sp/>else_body);<sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>`else`<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_branch" kindref="compound">Branch</ref>*<sp/>else_branch<sp/>=<sp/>CreateBranch<sp/>(buildog,<sp/>NULL,<sp/>NULL,<sp/>NULL,<sp/>NULL);<sp/></highlight><highlight class="comment">//<sp/>add<sp/>branch<sp/>as<sp/>last<sp/>instruction<sp/>to<sp/>`than`<sp/>body<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>assert(else_branch);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>&apos;merge&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>name_t<sp/><sp/>merge_block_name<sp/>=<sp/>CreateString<sp/>(</highlight><highlight class="stringliteral">&quot;merge_%u&quot;</highlight><highlight class="normal">,<sp/>if_number);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(merge_block_name);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_base_block" kindref="compound">BaseBlock</ref>*<sp/>merge_block<sp/>=<sp/>InsertNewBaseBlock<sp/>(buildog,<sp/>merge_block_name);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(merge_block);<sp/></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>than_branch-&gt;set_true_block<sp/>(merge_block);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>else_branch-&gt;set_true_block<sp/>(merge_block);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>branch-&gt;set_true_block<sp/><sp/>(than_block);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>branch-&gt;set_false_block<sp/>(else_block);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="comment">//<sp/>Constant</highlight></codeline>
<codeline lineno="229"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>CONSTANT_NUMBER<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>TEMP_VAR_NUMBER<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_constant" kindref="compound">Constant</ref>*<sp/><sp/>EmitConstant<sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(buildog);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(token);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>data_t<sp/>const_val<sp/><sp/>=<sp/>(int)<sp/>(CONST(token)<sp/>*<sp/>100);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>name_t<sp/>const_name<sp/>=<sp/>CreateString<sp/>(</highlight><highlight class="stringliteral">&quot;const_%d&quot;</highlight><highlight class="normal">,<sp/>CONSTANT_NUMBER++);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>$u<sp/>(CONSTANT_NUMBER);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_constant" kindref="compound">Constant</ref>*<sp/>constant<sp/>=<sp/>CreateConstant<sp/>(buildog,<sp/>const_name,<sp/>const_val);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>buildog-&gt;mod-&gt;add_const<sp/>(constant);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>constant;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="comment">//<sp/>Function</highlight></codeline>
<codeline lineno="250"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetParametersDeclaration<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/><ref refid="class_value_arr" kindref="compound">ValueArr&lt;Value&gt;</ref>*<sp/>argv,<sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_function" kindref="compound">Function</ref>*<sp/>EmitFunction<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(buildog);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(token);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>function_name<sp/><sp/><sp/><sp/><sp/>=<sp/><sp/>LEFT(token);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>function_ret_type<sp/>=<sp/>RIGHT(function_name);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>name_t<sp/><sp/>func_name<sp/>=<sp/>GetString<sp/>(NAME_ID(function_name));</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(func_name);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_function" kindref="compound">Function</ref>*<sp/>func<sp/>=<sp/>CreateFunction<sp/>(buildog,<sp/>func_name,<sp/>RET_TYPE(function_ret_type),<sp/>NAME_ID(function_name));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>GetParametersDeclaration<sp/>(buildog,<sp/>func-&gt;get_argv(),<sp/>LEFT(function_name));</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>TEMP_VAR_NUMBER<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>CONSTANT_NUMBER<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>AstVisitor<sp/>(buildog,<sp/>RIGHT(token));<sp/></highlight><highlight class="comment">//<sp/>adding<sp/>function<sp/>body</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>AddFunctionToModule<sp/>(buildog);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>ResetBuilderAfterFunction<sp/>(buildog);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetParametersDeclaration<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/><ref refid="class_value_arr" kindref="compound">ValueArr&lt;Value&gt;</ref>*<sp/>argv,<ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(buildog);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(argv);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!token)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>param<sp/>=<sp/>token;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(param)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>param_val<sp/>=<sp/>AstVisitor<sp/>(buildog,<sp/>LEFT(param));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(param_val);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argv-&gt;add(param_val);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param<sp/>=<sp/>RIGHT(param);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="comment">//<sp/>Call</highlight></codeline>
<codeline lineno="302"><highlight class="comment"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_function" kindref="compound">Function</ref>*<sp/>FindNativeFunction<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>native_func_num);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_call" kindref="compound">Call</ref>*<sp/>EmitCall<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(buildog);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(token);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>func_name<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_function" kindref="compound">Function</ref>*<sp/>func<sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TYPE(token)<sp/>==<sp/>NATIVE_FUNCTION)<sp/></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_name<sp/>=<sp/>token;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func<sp/>=<sp/>FindNativeFunction<sp/>(buildog,<sp/>NATIVE_FUNC(token));</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(func);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_name<sp/>=<sp/>LEFT(token);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(func_name);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>make<sp/>separate<sp/>tables,<sp/>to<sp/>avoid<sp/>cast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func<sp/>=<sp/>(<ref refid="class_function" kindref="compound">Function</ref>*)<sp/>FindValue<sp/>(buildog,<sp/>NAME_ID(func_name));</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!func)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintToken<sp/>(func_name,<sp/>GetStringPool());</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>report<sp/>(</highlight><highlight class="stringliteral">&quot;%s,<sp/>%d\n\n&quot;</highlight><highlight class="normal">,<sp/>GetString(NAME_ID(func_name)),<sp/>NAME_ID(func_name));</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(func);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(func);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>name_t<sp/><sp/>call_name<sp/>=<sp/>CreateString<sp/>(</highlight><highlight class="stringliteral">&quot;%%c_%u&quot;</highlight><highlight class="normal">,<sp/>TEMP_VAR_NUMBER++);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(call_name);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PrintToken<sp/>(func_name,<sp/>GetStringPool());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>report<sp/>(&quot;%s,<sp/>%d\n\n&quot;,<sp/>GetString(NAME_ID(func_name)),<sp/>NAME_ID(func_name));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_call" kindref="compound">Call</ref>*<sp/><sp/><sp/>call<sp/>=<sp/>CreateCall<sp/>(buildog,<sp/>call_name,<sp/>func);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(call);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_value_arr" kindref="compound">ValueArr&lt;Value&gt;</ref>*<sp/>argv<sp/>=<sp/>call-&gt;get_argv();</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/><sp/><sp/>(argv);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>param<sp/>=<sp/>LEFT<sp/>(func_name);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(param)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>param_val<sp/>=<sp/>AstVisitor<sp/>(buildog,<sp/>LEFT(param));</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(param_val);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>argv-&gt;add(param_val);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>param<sp/>=<sp/>RIGHT(param);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>AddInstruction<sp/>(buildog,<sp/>call);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>call;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_function" kindref="compound">Function</ref>*<sp/>FindNativeFunction<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>native_func_num)</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_value_name_table" kindref="compound">ValueNameTable</ref>*<sp/>table<sp/>=<sp/>&amp;buildog-&gt;global;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(table);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>native_func<sp/>=<sp/>NATIVE_FUNCTIONS[native_func_num].str;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(native_func);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>table-&gt;size;<sp/>i++)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_value_label" kindref="compound">ValueLabel</ref>*<sp/>label<sp/>=<sp/>table-&gt;arr[i];</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(label);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>val<sp/>=<sp/><sp/>label-&gt;val;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(val-&gt;get_name(),<sp/>native_func))</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_function" kindref="compound">Function</ref>*)<sp/>val;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>report<sp/>(</highlight><highlight class="stringliteral">&quot;Warning:<sp/>can&apos;t<sp/>find<sp/>native<sp/>function\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(0);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="comment">//<sp/>Native<sp/>Function</highlight></codeline>
<codeline lineno="391"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>RearrangeFinTokens<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>EmitNativeFunction<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NATIVE_FUNC(token)<sp/>==<sp/>FIN)</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RearrangeFinTokens<sp/>(buildog,<sp/>token);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EmitCall<sp/>(buildog,<sp/>token);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>RearrangeFinTokens<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(buildog);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(token);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/><sp/>param_token<sp/>=<sp/>LEFT(token);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(param_token);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/><sp/>param_name<sp/><sp/>=<sp/>LEFT(param_token);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(param_name);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref><sp/>fin_name<sp/>=<sp/>{NULL,<sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/>NAME,<sp/>{.t_name_id<sp/>=<sp/>FIN_NAME_ID}};</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref><sp/>call<sp/><sp/><sp/><sp/><sp/>=<sp/>{&amp;fin_name,<sp/>NULL,<sp/>CALL,<sp/>};</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>TYPE(param_token)<sp/>=<sp/>ASSIGMENT;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>LEFT(param_token)<sp/>=<sp/>param_name;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>RIGHT(param_token)<sp/>=<sp/>&amp;call;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AstVisitor<sp/>(buildog,<sp/>param_token);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="comment">//<sp/>EmitInitializator</highlight></codeline>
<codeline lineno="425"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_global_var" kindref="compound">GlobalVar</ref>*<sp/>AddGlobalVar<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_store" kindref="compound">Store</ref>*<sp/><sp/><sp/><sp/><sp/>AddLocalVar<sp/><sp/><sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>EmitInitializator<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token)<sp/></highlight><highlight class="comment">//<sp/>add<sp/>to<sp/>ValueNameTable<sp/>and<sp/>call<sp/>Create<sp/>Global<sp/>Var<sp/>or<sp/>Store</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(buildog);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(token);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>report<sp/>(&quot;Init<sp/>var<sp/>%s\n&quot;,<sp/>GetString<sp/>(NAME_ID(LEFT(token))));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>Builder<sp/>doesn&apos;t<sp/>have<sp/>current<sp/>Function*,<sp/>than<sp/>it<sp/>is<sp/>GlobalVar,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!buildog-&gt;current_function)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AddGlobalVar<sp/>(buildog,<sp/>token);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AddLocalVar<sp/>(buildog,<sp/>token);<sp/></highlight><highlight class="comment">//<sp/>creating<sp/>store<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_global_var" kindref="compound">GlobalVar</ref>*<sp/>AddGlobalVar<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(buildog);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(token);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>var_name_token<sp/>=<sp/>LEFT(token);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_constant" kindref="compound">Constant</ref>*<sp/>init_val<sp/><sp/>=<sp/>EmitConstant<sp/>(buildog,<sp/>RIGHT(token));</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(init_val-&gt;<ref refid="class_constant_1a6abd835079904cba7f9a4271475facc1" kindref="member">get_type</ref>()<sp/>==<sp/>ValueType::Constant);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>name_t<sp/><sp/>var_name<sp/>=<sp/>GetString(NAME_ID(var_name_token));</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(var_name);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>report<sp/>(&quot;Global<sp/>var<sp/>%s\n&quot;,<sp/>var_name);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_global_var" kindref="compound">GlobalVar</ref>*<sp/>var<sp/>=<sp/>CreateGlobalVar<sp/>(buildog,<sp/>var_name,<sp/>init_val);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/><sp/><sp/><sp/>(var);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_value_label" kindref="compound">ValueLabel</ref><sp/>var_label<sp/>=<sp/>{.name_id<sp/>=<sp/>NAME_ID(var_name_token),</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/><sp/><sp/><sp/>=<sp/>VARIABLE,</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.val<sp/><sp/><sp/><sp/><sp/>=<sp/>var,</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyValueLabel<sp/>(&amp;buildog-&gt;global,<sp/>&amp;var_label);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>var;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_store" kindref="compound">Store</ref>*<sp/>AddLocalVar<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(buildog);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(token);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/><sp/>name<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>LEFT(token);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>name_t<sp/><sp/>var_name<sp/><sp/>=<sp/>GetString<sp/>(NAME_ID(name));</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(var_name);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>store_val<sp/>=<sp/>AstVisitor<sp/>(buildog,<sp/>RIGHT(token));</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_store" kindref="compound">Store</ref>*<sp/>store<sp/>=<sp/>CreateStore<sp/>(buildog,<sp/>var_name,<sp/>store_val);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_value_label" kindref="compound">ValueLabel</ref><sp/>label<sp/>=<sp/>{<sp/>.name_id<sp/>=<sp/>NAME_ID(name),</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.type<sp/><sp/><sp/><sp/>=<sp/>VARIABLE,</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.val<sp/><sp/><sp/><sp/><sp/>=<sp/>store,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>CopyValueLabel<sp/>(&amp;buildog-&gt;local,<sp/>&amp;label);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>buildog-&gt;current_function-&gt;increase_n_local_vars<sp/>();</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>store;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="comment">//<sp/>Operator</highlight></codeline>
<codeline lineno="496"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>OperatorType<sp/>GetOperatorType<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_operator" kindref="compound">Operator</ref>*<sp/>EmitOperator<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token)</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(buildog);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(token);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>left<sp/><sp/>=<sp/>AstVisitor<sp/>(buildog,<sp/><sp/>LEFT(token));</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>right<sp/>=<sp/>AstVisitor<sp/>(buildog,<sp/>RIGHT(token));</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>name_t<sp/><sp/>op_name<sp/>=<sp/>CreateString<sp/>(</highlight><highlight class="stringliteral">&quot;%%op_%u&quot;</highlight><highlight class="normal">,<sp/>TEMP_VAR_NUMBER++);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(op_name);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_operator" kindref="compound">Operator</ref>*<sp/>op<sp/>=<sp/>CreateOperator<sp/>(buildog,<sp/>op_name,<sp/>GetOperatorType(OP(token)),<sp/>left,<sp/>right);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/><sp/><sp/>(op);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>op;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>OperatorType<sp/>GetOperatorType<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(type)</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ADD:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OperatorType::Add;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SUB:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OperatorType::Sub;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>MUL:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OperatorType::Mul;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>DIV:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OperatorType::Div;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>BIGGER:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OperatorType::Bigger;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>LESS:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OperatorType::Less;<sp/></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>report(</highlight><highlight class="stringliteral">&quot;Unknow<sp/>operator<sp/>type<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>type);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>OperatorType::Unknown;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="comment">//<sp/>Assigment</highlight></codeline>
<codeline lineno="537"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>EmitAssigment<sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token)</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(buildog);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(token);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>dest<sp/>=<sp/>AstVisitor(buildog,<sp/><sp/>LEFT(token));</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>src<sp/><sp/>=<sp/>AstVisitor(buildog,<sp/>RIGHT(token));</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_load" kindref="compound">Load</ref>*<sp/><sp/><sp/>load<sp/>=<sp/>CreateLoad<sp/>(buildog,<sp/>NULL,<sp/>dest,<sp/>src);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(load);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf<sp/>(&quot;Load<sp/>%s\n&quot;,<sp/>GetString<sp/>(NAME_ID(LEFT(token))));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>load;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="comment">//<sp/>Return</highlight></codeline>
<codeline lineno="555"><highlight class="comment"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_return" kindref="compound">Return</ref>*<sp/><sp/><sp/>EmitReturn<sp/><sp/><sp/><sp/>(<ref refid="struct_builder" kindref="compound">Builder</ref>*<sp/>buildog,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>token)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(buildog);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(token);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_value" kindref="compound">Value</ref>*<sp/>ret_val<sp/>=<sp/>AstVisitor<sp/>(buildog,<sp/>LEFT(token));</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_return" kindref="compound">Return</ref>*<sp/>ret<sp/>=<sp/>CreateReturn<sp/>(buildog,<sp/>NULL,<sp/>ret_val);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(ret);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
    </programlisting>
    <location file="src/IR/AstToIR/AstToIR.cpp"/>
  </compounddef>
</doxygen>
