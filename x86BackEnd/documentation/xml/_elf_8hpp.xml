<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_elf_8hpp" kind="file" language="C++">
    <compoundname>Elf.hpp</compoundname>
    <includes local="no">elf.h</includes>
    <includes refid="_buffer_8hpp" local="yes">Buffer.hpp</includes>
    <includedby refid="_elf_8cpp" local="yes">src/Elf/Elf.cpp</includedby>
    <includedby refid="_i_r_context_8h" local="yes">src/IR/TranslateTox86/IRContext.h</includedby>
    <includedby refid="src_2main_8cpp" local="yes">src/main.cpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>elf.h</label>
      </node>
      <node id="3">
        <label>Buffer.hpp</label>
        <link refid="_buffer_8hpp_source"/>
      </node>
      <node id="1">
        <label>src/Elf/Elf.hpp</label>
        <link refid="_elf_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>src/IR/TranslateTox86/IRContext.h</label>
        <link refid="_i_r_context_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Elf/Elf.hpp</label>
        <link refid="_elf_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/IR/TranslateTox86/Commands.h</label>
        <link refid="_commands_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_elf_headers" prot="public">ElfHeaders</innerclass>
    <innerclass refid="struct_elf" prot="public">Elf</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_elf_8hpp_1ad4dc709b64a6a857becfd0415b74baee" prot="public" static="no" mutable="no">
        <type>const Elf64_Addr</type>
        <definition>const Elf64_Addr ENTRY_POINT</definition>
        <argsstring></argsstring>
        <name>ENTRY_POINT</name>
        <initializer>= 0x401000 + sizeof(<ref refid="struct_elf_headers" kindref="compound">ElfHeaders</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Elf/Elf.hpp" line="34" column="18" bodyfile="src/Elf/Elf.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_elf_8hpp_1a4f114e8320205ce85ed30a4bae00e10c" prot="public" static="no" mutable="no">
        <type>const uint16_t</type>
        <definition>const uint16_t NUMBER_OF_SEGMENTS</definition>
        <argsstring></argsstring>
        <name>NUMBER_OF_SEGMENTS</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Elf/Elf.hpp" line="35" column="18" bodyfile="src/Elf/Elf.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_elf_8hpp_1ac203e1c8b3d8d3d09a89627fb52a6f38" prot="public" static="no" mutable="no">
        <type>const Elf64_Addr</type>
        <definition>const Elf64_Addr PHDR_TABLE_OFFSET</definition>
        <argsstring></argsstring>
        <name>PHDR_TABLE_OFFSET</name>
        <initializer>= sizeof(Elf64_Ehdr)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Elf/Elf.hpp" line="38" column="18" bodyfile="src/Elf/Elf.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_elf_8hpp_1a1c9f6cc19db10ef3255030fcd10972de" prot="public" static="no" mutable="no">
        <type>const Elf64_Addr</type>
        <definition>const Elf64_Addr CODE_VIRTUAL_ADDRESS</definition>
        <argsstring></argsstring>
        <name>CODE_VIRTUAL_ADDRESS</name>
        <initializer>= ENTRY_POINT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Elf/Elf.hpp" line="40" column="18" bodyfile="src/Elf/Elf.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_elf_8hpp_1af5881da67269281d64f11ca4e6100428" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SetElfHeaders</definition>
        <argsstring>(ElfHeaders *elf)</argsstring>
        <name>SetElfHeaders</name>
        <param>
          <type><ref refid="struct_elf_headers" kindref="compound">ElfHeaders</ref> *</type>
          <declname>elf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Elf/Elf.hpp" line="20" column="5" bodyfile="src/Elf/Elf.cpp" bodystart="18" bodyend="33" declfile="src/Elf/Elf.hpp" declline="20" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_elf_8hpp_1a5dfd6d25294c40a17628d0d8549523e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ElfCtor</definition>
        <argsstring>(Elf *elf)</argsstring>
        <name>ElfCtor</name>
        <param>
          <type><ref refid="struct_elf" kindref="compound">Elf</ref> *</type>
          <declname>elf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Elf/Elf.hpp" line="46" column="5" bodyfile="src/Elf/Elf.cpp" bodystart="91" bodyend="104" declfile="src/Elf/Elf.hpp" declline="46" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_elf_8hpp_1a43f6ba84507e3d29e019fd063bb1a86e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ElfDtor</definition>
        <argsstring>(Elf *elf)</argsstring>
        <name>ElfDtor</name>
        <param>
          <type><ref refid="struct_elf" kindref="compound">Elf</ref> *</type>
          <declname>elf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Elf/Elf.hpp" line="47" column="5" bodyfile="src/Elf/Elf.cpp" bodystart="106" bodyend="117" declfile="src/Elf/Elf.hpp" declline="47" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_elf_8hpp_1af46936120528c20d6535e0172b1276af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int WriteElf</definition>
        <argsstring>(Elf *elf, const char *output_file)</argsstring>
        <name>WriteElf</name>
        <param>
          <type><ref refid="struct_elf" kindref="compound">Elf</ref> *</type>
          <declname>elf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>output_file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Elf/Elf.hpp" line="48" column="5" bodyfile="src/Elf/Elf.cpp" bodystart="123" bodyend="157" declfile="src/Elf/Elf.hpp" declline="48" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;elf.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Buffer.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="8" refid="struct_elf_headers" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_elf_headers" kindref="compound">ElfHeaders</ref></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>Elf64_Ehdr<sp/>elf_header;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>Elf64_Phdr<sp/>code_phdr;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Elf64_Phdr<sp/>data_phdr;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Elf64_Phdr<sp/>stdlib_phdr;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>Elf64_Phdr<sp/>stack_phdr;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SetElfHeaders<sp/>(<ref refid="struct_elf_headers" kindref="compound">ElfHeaders</ref>*<sp/>elf);</highlight></codeline>
<codeline lineno="22" refid="struct_elf" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_elf" kindref="compound">Elf</ref></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_elf_headers" kindref="compound">ElfHeaders</ref><sp/>headers;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_buffer" kindref="compound">Buffer</ref><sp/>code_buf;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>data_buf;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>stdlib_buf;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_buffer" kindref="compound">Buffer</ref><sp/>program_buf;<sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>final<sp/>buffer<sp/>for<sp/>all<sp/>program<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Elf64_Addr<sp/>ENTRY_POINT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0x401000<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_elf_headers" kindref="compound">ElfHeaders</ref>);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/><sp/><sp/>NUMBER_OF_SEGMENTS<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Elf64_Addr<sp/>PHDR_TABLE_OFFSET<sp/><sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Elf64_Ehdr);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Elf64_Addr<sp/>CODE_VIRTUAL_ADDRESS<sp/><sp/><sp/>=<sp/>ENTRY_POINT;<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>Elf64_Addr<sp/>RODATA_VIRTUAL_ADDRESS<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>const<sp/>Elf64_Addr<sp/>STDLIB_VIRTUAL_ADDRESS<sp/>=<sp/>0x403000;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ElfCtor<sp/><sp/>(<ref refid="struct_elf" kindref="compound">Elf</ref>*<sp/>elf);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ElfDtor<sp/><sp/>(<ref refid="struct_elf" kindref="compound">Elf</ref>*<sp/>elf);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>WriteElf<sp/>(<ref refid="struct_elf" kindref="compound">Elf</ref>*<sp/>elf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>output_file);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/Elf/Elf.hpp"/>
  </compounddef>
</doxygen>
