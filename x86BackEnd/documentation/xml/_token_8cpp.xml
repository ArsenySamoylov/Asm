<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_token_8cpp" kind="file" language="C++">
    <compoundname>Token.cpp</compoundname>
    <includes refid="_token_8h" local="yes">Token.h</includes>
    <includes refid="_log_macroses_8h" local="yes">LogMacroses.h</includes>
    <incdepgraph>
      <node id="16">
        <label>stdarg.h</label>
      </node>
      <node id="13">
        <label>CommonEnums.h</label>
        <link refid="_common_enums_8h_source"/>
      </node>
      <node id="7">
        <label>errno.h</label>
      </node>
      <node id="9">
        <label>Logger.h</label>
        <link refid="_logger_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>LogMacroses.h</label>
        <link refid="_log_macroses_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Legacy/Common/Structures/Token/Token.cpp</label>
        <link refid="_token_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="3">
        <label>NameTable.h</label>
        <link refid="_name_table_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Token.h</label>
        <link refid="_token_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>string.h</label>
      </node>
      <node id="10">
        <label>LogConfig.h</label>
        <link refid="_log_config_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>iostream</label>
      </node>
      <node id="11">
        <label>tostring.h</label>
        <link refid="tostring_8h_source"/>
      </node>
      <node id="15">
        <label>Utils.h</label>
        <link refid="_utils_8h_source"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>FunctionLogger.h</label>
        <link refid="_function_logger_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>stdio.h</label>
      </node>
      <node id="14">
        <label>LinuxColors.h</label>
        <link refid="_linux_colors_8h_source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_token_8cpp_1a26793e232f67db733824fc5edc9c16bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_token" kindref="compound">Token</ref> *</type>
        <definition>Token* NewToken</definition>
        <argsstring>(int type, TokenValue value, Token *left_child, Token *right_child)</argsstring>
        <name>NewToken</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="union_token_value" kindref="compound">TokenValue</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>left_child</declname>
        </param>
        <param>
          <type><ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>right_child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Token/Token.cpp" line="5" column="7" bodyfile="src/Legacy/Common/Structures/Token/Token.cpp" bodystart="5" bodyend="20"/>
      </memberdef>
      <memberdef kind="function" id="_token_8cpp_1a2df97003fd41c192f68df2d7e35868d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int DeleteBranch</definition>
        <argsstring>(Token *def_node)</argsstring>
        <name>DeleteBranch</name>
        <param>
          <type><ref refid="struct_token" kindref="compound">Token</ref> *</type>
          <declname>def_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Token/Token.cpp" line="22" column="5" bodyfile="src/Legacy/Common/Structures/Token/Token.cpp" bodystart="22" bodyend="37"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Token.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LogMacroses.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>NewToken<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>type,<sp/><sp/><sp/><sp/><ref refid="union_token_value" kindref="compound">TokenValue</ref><sp/>value,<sp/></highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>left_child,<sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/><sp/><sp/><sp/><sp/>right_child)</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>$log(DEBUG_ALL)</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_token" kindref="compound">Token</ref>*<sp/>new_defnode<sp/>=<sp/>(<ref refid="struct_token" kindref="compound">Token</ref>*)<sp/>CALLOC<sp/>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_token" kindref="compound">Token</ref>));</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>CHECK<sp/>(new_defnode,<sp/>logf(</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>allocate<sp/>memory<sp/>for<sp/>new<sp/>node\n&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LNULL);</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>new_defnode-&gt;<sp/>left_child<sp/>=<sp/>left_child;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>new_defnode-&gt;right_child<sp/>=<sp/>right_child;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>new_defnode-&gt;type<sp/><sp/>=<sp/>type;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>new_defnode-&gt;value<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_defnode;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DeleteBranch<sp/>(<ref refid="struct_token" kindref="compound">Token</ref>*<sp/>def_node)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>$log(DEBUG_ALL)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!def_node)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def_node-&gt;left_child<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK<sp/>(DeleteBranch<sp/>(def_node-&gt;left_child)<sp/><sp/>==<sp/>SUCCESS,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def_node-&gt;right_child<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK<sp/>(DeleteBranch<sp/>(def_node-&gt;right_child)<sp/>==<sp/>SUCCESS,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>KILL(def_node);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
    </programlisting>
    <location file="src/Legacy/Common/Structures/Token/Token.cpp"/>
  </compounddef>
</doxygen>
