<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_name_table_8cpp" kind="file" language="C++">
    <compoundname>NameTable.cpp</compoundname>
    <includes refid="_name_table_8h" local="yes">NameTable.h</includes>
    <includes refid="_log_macroses_8h" local="yes">LogMacroses.h</includes>
    <includes refid="_easy_debug_8h" local="yes">EasyDebug.h</includes>
    <incdepgraph>
      <node id="1">
        <label>src/Legacy/Common/Structures/Tabels/NameTable.cpp</label>
        <link refid="_name_table_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>stdarg.h</label>
      </node>
      <node id="12">
        <label>CommonEnums.h</label>
        <link refid="_common_enums_8h_source"/>
      </node>
      <node id="6">
        <label>errno.h</label>
      </node>
      <node id="8">
        <label>Logger.h</label>
        <link refid="_logger_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>LogMacroses.h</label>
        <link refid="_log_macroses_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stddef.h</label>
      </node>
      <node id="2">
        <label>NameTable.h</label>
        <link refid="_name_table_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>EasyDebug.h</label>
        <link refid="_easy_debug_8h_source"/>
      </node>
      <node id="7">
        <label>string.h</label>
      </node>
      <node id="9">
        <label>LogConfig.h</label>
        <link refid="_log_config_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="10">
        <label>tostring.h</label>
        <link refid="tostring_8h_source"/>
      </node>
      <node id="14">
        <label>Utils.h</label>
        <link refid="_utils_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>FunctionLogger.h</label>
        <link refid="_function_logger_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>stdio.h</label>
      </node>
      <node id="13">
        <label>LinuxColors.h</label>
        <link refid="_linux_colors_8h_source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_name_table_8cpp_1a32fcae1d317dfe380a79a3ceb7775d9f" prot="public" static="no">
        <name>LABEL_ARR</name>
        <param><defname>TABLE</defname></param>
        <initializer>(TABLE-&gt;label_arr)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/NameTable.cpp" line="12" column="9" bodyfile="src/Legacy/Common/Structures/Tabels/NameTable.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_name_table_8cpp_1a90cee256c3dce9fb30c88fe5d9810f74" prot="public" static="no">
        <name>NUMBER_OF_LABELS</name>
        <param><defname>TABLE</defname></param>
        <initializer>(TABLE-&gt;number_of_labels)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/NameTable.cpp" line="13" column="9" bodyfile="src/Legacy/Common/Structures/Tabels/NameTable.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_name_table_8cpp_1a568838c13db34b588cab2fdcf67ed124" prot="public" static="no">
        <name>ARR_SIZE</name>
        <param><defname>TABLE</defname></param>
        <initializer>(TABLE-&gt;arr_size)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/NameTable.cpp" line="14" column="9" bodyfile="src/Legacy/Common/Structures/Tabels/NameTable.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_name_table_8cpp_1ab84d24369e4a38a47d1cd532424e4b0e" prot="public" static="no">
        <name>ARR</name>
        <param><defname>TABLE_ARR</defname></param>
        <initializer>((TABLE_ARR)-&gt;arr)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/NameTable.cpp" line="195" column="9" bodyfile="src/Legacy/Common/Structures/Tabels/NameTable.cpp" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_name_table_8cpp_1a199e536c7f5277d82de89093515d0421" prot="public" static="no">
        <name>TABLE_ARR_SIZE</name>
        <param><defname>TABLE_ARR</defname></param>
        <initializer>((TABLE_ARR)-&gt;size_of_tables_arr)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/NameTable.cpp" line="196" column="9" bodyfile="src/Legacy/Common/Structures/Tabels/NameTable.cpp" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_name_table_8cpp_1a3e1d113944398663ee81367868d1f213" prot="public" static="no">
        <name>NUMBER_OF_TABLES</name>
        <param><defname>TABLE_ARR</defname></param>
        <initializer>((TABLE_ARR)-&gt;number_of_tables)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/NameTable.cpp" line="197" column="9" bodyfile="src/Legacy/Common/Structures/Tabels/NameTable.cpp" bodystart="197" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_name_table_8cpp_1a2ddd6a897a525d05d8a98dc30ad67dac" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int GROWTH_RATE</definition>
        <argsstring></argsstring>
        <name>GROWTH_RATE</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/NameTable.cpp" line="6" column="11" bodyfile="src/Legacy/Common/Structures/Tabels/NameTable.cpp" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_name_table_8cpp_1af764c1593d4cc4e1db4fcfd80b5b38fc" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int START_LABEL_ARR_SIZE</definition>
        <argsstring></argsstring>
        <name>START_LABEL_ARR_SIZE</name>
        <initializer>= 10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/NameTable.cpp" line="8" column="11" bodyfile="src/Legacy/Common/Structures/Tabels/NameTable.cpp" bodystart="8" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_name_table_8cpp_1aa3f0235fa2244a7b0f88eb2543fac0f0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ResizeNameTable</definition>
        <argsstring>(NameTable *tabel)</argsstring>
        <name>ResizeNameTable</name>
        <param>
          <type><ref refid="struct_name_table" kindref="compound">NameTable</ref> *</type>
          <declname>tabel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/NameTable.cpp" line="180" column="12" bodyfile="src/Legacy/Common/Structures/Tabels/NameTable.cpp" bodystart="180" bodyend="192" declfile="src/Legacy/Common/Structures/Tabels/NameTable.cpp" declline="10" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="_name_table_8cpp_1a81f9443909a6f1171c6d0e2defe7b274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_name_table" kindref="compound">NameTable</ref> *</type>
        <definition>NameTable* NewNameTable</definition>
        <argsstring>()</argsstring>
        <name>NewNameTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/NameTable.cpp" line="16" column="11" bodyfile="src/Legacy/Common/Structures/Tabels/NameTable.cpp" bodystart="16" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="_name_table_8cpp_1af927aa9b1d887a4fed5f2954dc20488c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CloseNameTable</definition>
        <argsstring>(NameTable *table)</argsstring>
        <name>CloseNameTable</name>
        <param>
          <type><ref refid="struct_name_table" kindref="compound">NameTable</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/NameTable.cpp" line="36" column="5" bodyfile="src/Legacy/Common/Structures/Tabels/NameTable.cpp" bodystart="36" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="_name_table_8cpp_1a7f95124a0610d92cfefa6e3dfc3b528e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_label" kindref="compound">Label</ref> *</type>
        <definition>Label* IsLabel</definition>
        <argsstring>(int name_id, int type, NameTable *table)</argsstring>
        <name>IsLabel</name>
        <param>
          <type>int</type>
          <declname>name_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="struct_name_table" kindref="compound">NameTable</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/NameTable.cpp" line="73" column="7" bodyfile="src/Legacy/Common/Structures/Tabels/NameTable.cpp" bodystart="73" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="_name_table_8cpp_1ac18951c81e88a918e8f355092bb90904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AddLabel</definition>
        <argsstring>(Label *label, NameTable *table)</argsstring>
        <name>AddLabel</name>
        <param>
          <type><ref refid="struct_label" kindref="compound">Label</ref> *</type>
          <declname>label</declname>
        </param>
        <param>
          <type><ref refid="struct_name_table" kindref="compound">NameTable</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/NameTable.cpp" line="101" column="5" bodyfile="src/Legacy/Common/Structures/Tabels/NameTable.cpp" bodystart="101" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="_name_table_8cpp_1a0fcc4e347b4fd3195ca6025807869b5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_label" kindref="compound">Label</ref> *</type>
        <definition>Label* CopyLabel</definition>
        <argsstring>(Label *label, NameTable *table)</argsstring>
        <name>CopyLabel</name>
        <param>
          <type><ref refid="struct_label" kindref="compound">Label</ref> *</type>
          <declname>label</declname>
        </param>
        <param>
          <type><ref refid="struct_name_table" kindref="compound">NameTable</ref> *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/NameTable.cpp" line="117" column="7" bodyfile="src/Legacy/Common/Structures/Tabels/NameTable.cpp" bodystart="117" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="_name_table_8cpp_1ac88396cf1a01a1819171f35d589c484a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CompareLabels</definition>
        <argsstring>(Label *label1, Label *label2)</argsstring>
        <name>CompareLabels</name>
        <param>
          <type><ref refid="struct_label" kindref="compound">Label</ref> *</type>
          <declname>label1</declname>
        </param>
        <param>
          <type><ref refid="struct_label" kindref="compound">Label</ref> *</type>
          <declname>label2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/NameTable.cpp" line="157" column="5" bodyfile="src/Legacy/Common/Structures/Tabels/NameTable.cpp" bodystart="157" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="_name_table_8cpp_1a3372e1bc93610e194a70196cdb9f53b7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ResizeNameTableArr</definition>
        <argsstring>(NameTableArr *table_arr)</argsstring>
        <name>ResizeNameTableArr</name>
        <param>
          <type><ref refid="struct_name_table_arr" kindref="compound">NameTableArr</ref> *</type>
          <declname>table_arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/NameTable.cpp" line="282" column="12" bodyfile="src/Legacy/Common/Structures/Tabels/NameTable.cpp" bodystart="282" bodyend="294" declfile="src/Legacy/Common/Structures/Tabels/NameTable.cpp" declline="199" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="_name_table_8cpp_1a9aa85598255fa290062916d7ddd72cd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_name_table_arr" kindref="compound">NameTableArr</ref> *</type>
        <definition>NameTableArr* NewNameTableArr</definition>
        <argsstring>(int start_size)</argsstring>
        <name>NewNameTableArr</name>
        <param>
          <type>int</type>
          <declname>start_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/NameTable.cpp" line="201" column="14" bodyfile="src/Legacy/Common/Structures/Tabels/NameTable.cpp" bodystart="201" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="_name_table_8cpp_1aae49ce36283736a309d02397d749a6cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int DeleteNameTableArr</definition>
        <argsstring>(NameTableArr *table_arr)</argsstring>
        <name>DeleteNameTableArr</name>
        <param>
          <type><ref refid="struct_name_table_arr" kindref="compound">NameTableArr</ref> *</type>
          <declname>table_arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/NameTable.cpp" line="227" column="5" bodyfile="src/Legacy/Common/Structures/Tabels/NameTable.cpp" bodystart="227" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="_name_table_8cpp_1a08a325459d68d6ef086c6c50e640f61f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_name_table" kindref="compound">NameTable</ref> *</type>
        <definition>NameTable* AddTable</definition>
        <argsstring>(NameTableArr *table_arr)</argsstring>
        <name>AddTable</name>
        <param>
          <type><ref refid="struct_name_table_arr" kindref="compound">NameTableArr</ref> *</type>
          <declname>table_arr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/NameTable.cpp" line="262" column="11" bodyfile="src/Legacy/Common/Structures/Tabels/NameTable.cpp" bodystart="262" bodyend="279"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;NameTable.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LogMacroses.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;EasyDebug.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GROWTH_RATE<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>START_LABEL_ARR_SIZE<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ResizeNameTable<sp/><sp/>(<ref refid="struct_name_table" kindref="compound">NameTable</ref>*<sp/>tabel);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LABEL_ARR(TABLE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TABLE-&gt;label_arr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUMBER_OF_LABELS(TABLE)<sp/>(TABLE-&gt;number_of_labels)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARR_SIZE(TABLE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(TABLE-&gt;arr_size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><ref refid="struct_name_table" kindref="compound">NameTable</ref>*<sp/>NewNameTable<sp/>()</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_name_table" kindref="compound">NameTable</ref>*<sp/>table<sp/>=<sp/>(<ref refid="struct_name_table" kindref="compound">NameTable</ref>*)<sp/>CALLOC<sp/>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(table[0]));</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!table)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>ARR_SIZE(table)<sp/>=<sp/>START_LABEL_ARR_SIZE;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>LABEL_ARR(table)<sp/>=<sp/>(<ref refid="struct_label" kindref="compound">Label</ref>**)<sp/>CALLOC<sp/>(ARR_SIZE(table),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_label" kindref="compound">Label</ref>*));</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!LABEL_ARR(table))</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KILL(table);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>NUMBER_OF_LABELS(table)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>table;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CloseNameTable<sp/>(<ref refid="struct_name_table" kindref="compound">NameTable</ref>*<sp/>table)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(table,<sp/>EFAULT,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!LABEL_ARR(table))</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Tabel<sp/>%p:<sp/>Null<sp/>label<sp/>arr<sp/>pointer\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>table);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ARR_SIZE(table)<sp/>&lt;<sp/>NUMBER_OF_LABELS(table))</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;table<sp/>%p:<sp/>arr_size<sp/>(%zu)<sp/>less<sp/>than<sp/>namber_of_labels<sp/>(%zu)\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>table,<sp/>ARR_SIZE(table),<sp/>NUMBER_OF_LABELS(table));<sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NUMBER_OF_LABELS(table);<sp/>i++)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(LABEL_ARR(table)<sp/>+<sp/>i))</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(</highlight><highlight class="stringliteral">&quot;table<sp/>%p:<sp/>null<sp/>label<sp/>in<sp/>label_arr<sp/>(position<sp/>%zu)\n&quot;</highlight><highlight class="normal">,<sp/>table,<sp/>i);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KILL<sp/>(LABEL_ARR(table)[i]);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>KILL<sp/>(LABEL_ARR(table));</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>KILL<sp/>(table);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><ref refid="struct_label" kindref="compound">Label</ref>*<sp/>IsLabel<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>name_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type,<sp/><ref refid="struct_name_table" kindref="compound">NameTable</ref>*<sp/>table)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>$log(1)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(table,<sp/>EFAULT,<sp/>return<sp/>NULL);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>number_of_labels<sp/>=<sp/>NUMBER_OF_LABELS(table);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(number_of_labels<sp/>&lt;<sp/>1)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>NULL;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_label" kindref="compound">Label</ref>**<sp/>label_arr<sp/>=<sp/>LABEL_ARR(table);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!label_arr)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_message(</highlight><highlight class="stringliteral">&quot;Empty<sp/>label<sp/>array<sp/>in<sp/>func<sp/>table<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>table);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>$li(type)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>$li(name_id)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>number_of_labels;<sp/>i++)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name_id<sp/>==<sp/>(*(label_arr<sp/>+<sp/>i))-&gt;name_id<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/><sp/><sp/><sp/>==<sp/>(*(label_arr<sp/>+<sp/>i))-&gt;type)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>*(label_arr<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AddLabel<sp/>(<ref refid="struct_label" kindref="compound">Label</ref>*<sp/>label,<sp/><ref refid="struct_name_table" kindref="compound">NameTable</ref>*<sp/>table)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>$log(1)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(label,<sp/><sp/>EFAULT,<sp/>return<sp/>LFAILURE);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(table,<sp/><sp/>EFAULT,<sp/>return<sp/>LFAILURE);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(ARR_SIZE(table)<sp/>&lt;=<sp/>NUMBER_OF_LABELS(table))</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(ResizeNameTable(table)<sp/>==<sp/>SUCCESS,<sp/>return<sp/>LFAILURE);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>*(LABEL_ARR(table)<sp/>+<sp/>NUMBER_OF_LABELS(table))<sp/>=<sp/>label;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>$lzu(NUMBER_OF_LABELS(table))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>NUMBER_OF_LABELS(table)++;<sp/></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><ref refid="struct_label" kindref="compound">Label</ref>*<sp/>CopyLabel<sp/>(<ref refid="struct_label" kindref="compound">Label</ref>*<sp/>label,<sp/><ref refid="struct_name_table" kindref="compound">NameTable</ref>*<sp/>table)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>$log(1)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(label,<sp/>EFAULT,<sp/>return<sp/>LNULL);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(table,<sp/>EFAULT,<sp/>return<sp/>LNULL);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(IsLabel(label-&gt;name_id,<sp/>label-&gt;type,<sp/>table))</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_message(</highlight><highlight class="stringliteral">&quot;Label<sp/>(%p)<sp/>with<sp/>same<sp/>name<sp/>and<sp/>type<sp/>already<sp/>in<sp/>table\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>label);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Type:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>label-&gt;type);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LNULL;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_label" kindref="compound">Label</ref>*<sp/>new_label<sp/>=<sp/>(<ref refid="struct_label" kindref="compound">Label</ref>*)<sp/>CALLOC<sp/>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(new_label[0]));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!new_label)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LNULL;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>*new_label<sp/>=<sp/>*label;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/></highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/>new_label-&gt;type<sp/><sp/><sp/><sp/>=<sp/>label-&gt;type;</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/>new_label-&gt;name_id<sp/>=<sp/>label-&gt;name_id;</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/>new_label-&gt;number_of_vars<sp/>=<sp/>label-&gt;number_of_vars;</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/>new_label-&gt;ret_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>label-&gt;ret_type;</highlight></codeline>
<codeline lineno="144"><highlight class="comment"></highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/>new_label-&gt;var_number<sp/>=<sp/>label-&gt;var_number;</highlight></codeline>
<codeline lineno="146"><highlight class="comment"></highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/>new_label-&gt;local_type<sp/>=<sp/>label-&gt;local_type;</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/>new_label-&gt;global_initialization<sp/>=<sp/>label-&gt;global_initialization;</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AddLabel(new_label,<sp/>table)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LNULL;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_label;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CompareLabels<sp/>(<ref refid="struct_label" kindref="compound">Label</ref>*<sp/>label1,<sp/><ref refid="struct_label" kindref="compound">Label</ref>*<sp/>label2)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(label1,<sp/>EFAULT,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(label2,<sp/>EFAULT,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label1-&gt;name_id<sp/>!=<sp/>label2-&gt;<sp/>name_id)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label1-&gt;type<sp/>!=<sp/>label2-&gt;type)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label1-&gt;number_of_vars<sp/>!=<sp/>label2-&gt;number_of_vars)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label1-&gt;ret_type<sp/>!=<sp/>label2-&gt;ret_type)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label1-&gt;var_number<sp/>!=<sp/>label2-&gt;var_number)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ResizeNameTable<sp/>(<ref refid="struct_name_table" kindref="compound">NameTable</ref>*<sp/>table)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(table,<sp/>EFAULT,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BAD_ARGUMENT);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_label" kindref="compound">Label</ref>**<sp/>temp_arr<sp/>=<sp/>(<ref refid="struct_label" kindref="compound">Label</ref>**)<sp/>RECALLOC<sp/>(LABEL_ARR(table),<sp/>ARR_SIZE(table)<sp/>*<sp/>GROWTH_RATE<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(temp_arr[0]));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!temp_arr)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>LABEL_ARR(table)<sp/>=<sp/>temp_arr;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>ARR_SIZE(table)<sp/>*=<sp/>GROWTH_RATE;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor">#define<sp/>ARR(TABLE_ARR)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((TABLE_ARR)-&gt;arr)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TABLE_ARR_SIZE(TABLE_ARR)<sp/><sp/><sp/><sp/><sp/>((TABLE_ARR)-&gt;size_of_tables_arr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUMBER_OF_TABLES(TABLE_ARR)<sp/><sp/><sp/>((TABLE_ARR)-&gt;number_of_tables)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ResizeNameTableArr<sp/>(<ref refid="struct_name_table_arr" kindref="compound">NameTableArr</ref>*<sp/>table_arr);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><ref refid="struct_name_table_arr" kindref="compound">NameTableArr</ref>*<sp/>NewNameTableArr<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start_size)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(start_size<sp/>&lt;=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_message(</highlight><highlight class="stringliteral">&quot;Can&apos;t<sp/>create<sp/>NameTableArr<sp/>of<sp/>size<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>start_size);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LNULL;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_name_table_arr" kindref="compound">NameTableArr</ref>*<sp/>table_arr<sp/>=<sp/>(<ref refid="struct_name_table_arr" kindref="compound">NameTableArr</ref>*)<sp/>CALLOC<sp/>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(table_arr[0]));</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!table_arr)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>TABLE_ARR_SIZE(table_arr)<sp/>=<sp/>start_size;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>ARR(table_arr)<sp/>=<sp/>(<ref refid="struct_name_table" kindref="compound">NameTable</ref>**)<sp/>CALLOC<sp/>((</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>TABLE_ARR_SIZE(table_arr),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ARR(table_arr)[0]));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ARR(table_arr))</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KILL(table_arr);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>NUMBER_OF_TABLES(table_arr)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>table_arr;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>DeleteNameTableArr<sp/>(<ref refid="struct_name_table_arr" kindref="compound">NameTableArr</ref>*<sp/>table_arr)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(table_arr,<sp/>EFAULT,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ARR(table_arr))</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_message(</highlight><highlight class="stringliteral">&quot;Tabel_arr<sp/>%p:<sp/>Null<sp/>table_arr<sp/>arr<sp/>pointer\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>table_arr);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TABLE_ARR_SIZE(table_arr)<sp/>&lt;<sp/>NUMBER_OF_TABLES(table_arr))</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_message(</highlight><highlight class="stringliteral">&quot;Table+arr<sp/>%p:<sp/>arr_size<sp/>(%d)<sp/>less<sp/>than<sp/>namber_of_tables<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>table_arr,<sp/>TABLE_ARR_SIZE(table_arr),<sp/>NUMBER_OF_TABLES(table_arr));<sp/></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NUMBER_OF_TABLES(table_arr);<sp/>i++)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(ARR(table_arr)<sp/>+<sp/>i))</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_message(</highlight><highlight class="stringliteral">&quot;table_arr<sp/>%p:<sp/>null<sp/>label<sp/>in<sp/>table_arr<sp/>(position<sp/>%d)\n&quot;</highlight><highlight class="normal">,<sp/>table_arr,<sp/>i);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CloseNameTable(ARR(table_arr)[i]);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>KILL<sp/>(ARR(table_arr));</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>KILL<sp/>(table_arr);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><ref refid="struct_name_table" kindref="compound">NameTable</ref>*<sp/>AddTable<sp/>(<ref refid="struct_name_table_arr" kindref="compound">NameTableArr</ref>*<sp/>table_arr)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>$log(1)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(table_arr,<sp/><sp/>EFAULT,<sp/>return<sp/>LNULL);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(TABLE_ARR_SIZE(table_arr)<sp/>&lt;=<sp/>NUMBER_OF_TABLES(table_arr))</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(ResizeNameTableArr(table_arr)<sp/>==<sp/>SUCCESS,<sp/>return<sp/>LNULL);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_name_table" kindref="compound">NameTable</ref>*<sp/>table<sp/>=<sp/>NewNameTable();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!table)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>LNULL;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>*(ARR(table_arr)<sp/>+<sp/>NUMBER_OF_TABLES(table_arr)++)<sp/>=<sp/>table;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>$lzu(NUMBER_OF_LABELS(table))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>table;<sp/></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal">static<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ResizeNameTableArr<sp/>(<ref refid="struct_name_table_arr" kindref="compound">NameTableArr</ref>*<sp/>table_arr)</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(table_arr,<sp/>EFAULT,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BAD_ARGUMENT);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_name_table" kindref="compound">NameTable</ref>**<sp/>temp_arr<sp/>=<sp/>(<ref refid="struct_name_table" kindref="compound">NameTable</ref>**)<sp/>RECALLOC<sp/>(ARR(table_arr),<sp/>(size_t)<sp/>TABLE_ARR_SIZE(table_arr)<sp/>*<sp/>GROWTH_RATE<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(temp_arr[0]));</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!temp_arr)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>ARR(table_arr)<sp/>=<sp/>temp_arr;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>TABLE_ARR_SIZE(table_arr)<sp/>*=<sp/>GROWTH_RATE;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
    </programlisting>
    <location file="src/Legacy/Common/Structures/Tabels/NameTable.cpp"/>
  </compounddef>
</doxygen>
