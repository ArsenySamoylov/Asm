<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_module" kind="class" language="C++" prot="public">
    <compoundname>Module</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_module_1a6d7640f9286ed875b5239d5d6a1e48d3" prot="private" static="no" mutable="no">
        <type><ref refid="class_value_arr" kindref="compound">ValueArr</ref>&lt; <ref refid="class_global_var" kindref="compound">GlobalVar</ref> &gt;</type>
        <definition>ValueArr&lt;GlobalVar&gt; Module::global_vars</definition>
        <argsstring></argsstring>
        <name>global_vars</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Module/Module.h" line="11" column="18" bodyfile="src/IR/Module/Module.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_module_1a45522d56ada60fe7653b29bb2c43ebdd" prot="private" static="no" mutable="no">
        <type><ref refid="class_value_arr" kindref="compound">ValueArr</ref>&lt; <ref refid="class_function" kindref="compound">Function</ref> &gt;</type>
        <definition>ValueArr&lt;Function&gt; Module::functions</definition>
        <argsstring></argsstring>
        <name>functions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Module/Module.h" line="12" column="18" bodyfile="src/IR/Module/Module.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_module_1af71b0b4cf32665e003c3bcf747f7457f" prot="private" static="no" mutable="no">
        <type><ref refid="class_value_arr" kindref="compound">ValueArr</ref>&lt; <ref refid="class_constant" kindref="compound">Constant</ref> &gt;</type>
        <definition>ValueArr&lt;Constant&gt; Module::const_pool</definition>
        <argsstring></argsstring>
        <name>const_pool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Module/Module.h" line="14" column="18" bodyfile="src/IR/Module/Module.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_module_1ac0b59ad515f7ddd34618dc5141a0aab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Module::Module</definition>
        <argsstring>()=default</argsstring>
        <name>Module</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Module/Module.h" line="17" column="10"/>
      </memberdef>
      <memberdef kind="function" id="class_module_1a7c9d9c096786d127590fdd8aa2b7d681" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Module::~Module</definition>
        <argsstring>()</argsstring>
        <name>~Module</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Module/Module.h" line="18" column="9" bodyfile="src/IR/Module/Module.cpp" bodystart="9" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="class_module_1ac8e961b5570df02e70f81a580e8441b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Module::dump</definition>
        <argsstring>(const char *out_file) const</argsstring>
        <name>dump</name>
        <param>
          <type>const char *</type>
          <declname>out_file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Module/Module.h" line="20" column="14" bodyfile="src/IR/DumpIR/DumpIR.cpp" bodystart="39" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="class_module_1a2dc94d7fd8189bcb6802d4b3b9129f0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Module::translate_x86</definition>
        <argsstring>(Elf *elf, const char *path_to_assembler_dump) const</argsstring>
        <name>translate_x86</name>
        <param>
          <type><ref refid="struct_elf" kindref="compound">Elf</ref> *</type>
          <declname>elf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path_to_assembler_dump</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Module/Module.h" line="21" column="14" bodyfile="src/IR/TranslateTox86/TranslateIRTox86.cpp" bodystart="108" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="class_module_1a5e025fa9a3b93dc7f04162a07989d63f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Module::add_func</definition>
        <argsstring>(Function *func)</argsstring>
        <name>add_func</name>
        <param>
          <type><ref refid="class_function" kindref="compound">Function</ref> *</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Module/Module.h" line="23" column="14" bodyfile="src/IR/Module/Module.cpp" bodystart="26" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="class_module_1a8a7efa71f6eb564a80c55b1ee621109b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Module::add_var</definition>
        <argsstring>(GlobalVar *var)</argsstring>
        <name>add_var</name>
        <param>
          <type><ref refid="class_global_var" kindref="compound">GlobalVar</ref> *</type>
          <declname>var</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Module/Module.h" line="24" column="14" bodyfile="src/IR/Module/Module.cpp" bodystart="32" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="class_module_1ad2b0862a7f0bc8df29a6d3b379aa7092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Module::add_const</definition>
        <argsstring>(Constant *constant)</argsstring>
        <name>add_const</name>
        <param>
          <type><ref refid="class_constant" kindref="compound">Constant</ref> *</type>
          <declname>constant</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Module/Module.h" line="25" column="14" bodyfile="src/IR/Module/Module.cpp" bodystart="38" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="class_module_1a57db1671464285cfc3bc11032665d68f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Module::dumpGlobalVars</definition>
        <argsstring>() const</argsstring>
        <name>dumpGlobalVars</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Module/Module.h" line="27" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_module_1a8a0b60e19a07a3b49bb2de7b0a9abf81" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Module::dumpFunctions</definition>
        <argsstring>() const</argsstring>
        <name>dumpFunctions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Module/Module.h" line="28" column="14"/>
      </memberdef>
      <memberdef kind="function" id="class_module_1a852eeecfaa9f746d2c1044de9540ce27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_function" kindref="compound">Function</ref> *</type>
        <definition>const Function * Module::find_main</definition>
        <argsstring>() const</argsstring>
        <name>find_main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Module/Module.h" line="30" column="24" bodyfile="src/IR/Module/Module.cpp" bodystart="44" bodyend="56"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/IR/Module/Module.h" line="8" column="1" bodyfile="src/IR/Module/Module.h" bodystart="9" bodyend="31"/>
    <listofallmembers>
      <member refid="class_module_1ad2b0862a7f0bc8df29a6d3b379aa7092" prot="public" virt="non-virtual"><scope>Module</scope><name>add_const</name></member>
      <member refid="class_module_1a5e025fa9a3b93dc7f04162a07989d63f" prot="public" virt="non-virtual"><scope>Module</scope><name>add_func</name></member>
      <member refid="class_module_1a8a7efa71f6eb564a80c55b1ee621109b" prot="public" virt="non-virtual"><scope>Module</scope><name>add_var</name></member>
      <member refid="class_module_1af71b0b4cf32665e003c3bcf747f7457f" prot="private" virt="non-virtual"><scope>Module</scope><name>const_pool</name></member>
      <member refid="class_module_1ac8e961b5570df02e70f81a580e8441b2" prot="public" virt="non-virtual"><scope>Module</scope><name>dump</name></member>
      <member refid="class_module_1a8a0b60e19a07a3b49bb2de7b0a9abf81" prot="public" virt="non-virtual"><scope>Module</scope><name>dumpFunctions</name></member>
      <member refid="class_module_1a57db1671464285cfc3bc11032665d68f" prot="public" virt="non-virtual"><scope>Module</scope><name>dumpGlobalVars</name></member>
      <member refid="class_module_1a852eeecfaa9f746d2c1044de9540ce27" prot="public" virt="non-virtual"><scope>Module</scope><name>find_main</name></member>
      <member refid="class_module_1a45522d56ada60fe7653b29bb2c43ebdd" prot="private" virt="non-virtual"><scope>Module</scope><name>functions</name></member>
      <member refid="class_module_1a6d7640f9286ed875b5239d5d6a1e48d3" prot="private" virt="non-virtual"><scope>Module</scope><name>global_vars</name></member>
      <member refid="class_module_1ac0b59ad515f7ddd34618dc5141a0aab0" prot="public" virt="non-virtual"><scope>Module</scope><name>Module</name></member>
      <member refid="class_module_1a2dc94d7fd8189bcb6802d4b3b9129f0b" prot="public" virt="non-virtual"><scope>Module</scope><name>translate_x86</name></member>
      <member refid="class_module_1a7c9d9c096786d127590fdd8aa2b7d681" prot="public" virt="non-virtual"><scope>Module</scope><name>~Module</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
