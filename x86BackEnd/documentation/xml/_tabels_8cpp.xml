<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_tabels_8cpp" kind="file" language="C++">
    <compoundname>Tabels.cpp</compoundname>
    <includes refid="_tabels_8h" local="yes">Tabels.h</includes>
    <includes refid="_log_macroses_8h" local="yes">LogMacroses.h</includes>
    <incdepgraph>
      <node id="17">
        <label>stdarg.h</label>
      </node>
      <node id="2">
        <label>Tabels.h</label>
        <link refid="_tabels_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>CommonEnums.h</label>
        <link refid="_common_enums_8h_source"/>
      </node>
      <node id="8">
        <label>errno.h</label>
      </node>
      <node id="10">
        <label>Logger.h</label>
        <link refid="_logger_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>LogMacroses.h</label>
        <link refid="_log_macroses_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="4">
        <label>NameTable.h</label>
        <link refid="_name_table_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Token.h</label>
        <link refid="_token_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>string.h</label>
      </node>
      <node id="11">
        <label>LogConfig.h</label>
        <link refid="_log_config_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Legacy/Common/Structures/Tabels/Tabels.cpp</label>
        <link refid="_tabels_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
      <node id="12">
        <label>tostring.h</label>
        <link refid="tostring_8h_source"/>
      </node>
      <node id="16">
        <label>Utils.h</label>
        <link refid="_utils_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>FunctionLogger.h</label>
        <link refid="_function_logger_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>stdio.h</label>
      </node>
      <node id="15">
        <label>LinuxColors.h</label>
        <link refid="_linux_colors_8h_source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_tabels_8cpp_1abfb9baa661a1fc386f8b5f1adc4b2537" prot="public" static="no">
        <name>LABEL_ARR</name>
        <param><defname>tabel</defname></param>
        <initializer>(tabel-&gt;label_arr)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/Tabels.cpp" line="12" column="9" bodyfile="src/Legacy/Common/Structures/Tabels/Tabels.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_tabels_8cpp_1ae4cdc0d04575132934ceb09fd7726172" prot="public" static="no">
        <name>NUMBER_OF_LABELS</name>
        <param><defname>tabel</defname></param>
        <initializer>(tabel-&gt;number_of_labels)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/Tabels.cpp" line="13" column="9" bodyfile="src/Legacy/Common/Structures/Tabels/Tabels.cpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_tabels_8cpp_1a257cb8ba6853c91efbf751180b659032" prot="public" static="no">
        <name>ARR_SIZE</name>
        <param><defname>tabel</defname></param>
        <initializer>(tabel-&gt;arr_size)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/Tabels.cpp" line="14" column="9" bodyfile="src/Legacy/Common/Structures/Tabels/Tabels.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_tabels_8cpp_1a2ddd6a897a525d05d8a98dc30ad67dac" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int GROWTH_RATE</definition>
        <argsstring></argsstring>
        <name>GROWTH_RATE</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/Tabels.cpp" line="5" column="11" bodyfile="src/Legacy/Common/Structures/Tabels/Tabels.cpp" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_tabels_8cpp_1af764c1593d4cc4e1db4fcfd80b5b38fc" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int START_LABEL_ARR_SIZE</definition>
        <argsstring></argsstring>
        <name>START_LABEL_ARR_SIZE</name>
        <initializer>= 10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/Tabels.cpp" line="7" column="11" bodyfile="src/Legacy/Common/Structures/Tabels/Tabels.cpp" bodystart="7" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_tabels_8cpp_1a931326636eecee31eccfbd1ab2f37fe1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ResizeFuncTabel</definition>
        <argsstring>(FuncTabel *func_tabel)</argsstring>
        <name>ResizeFuncTabel</name>
        <param>
          <type><ref refid="struct_func_tabel" kindref="compound">FuncTabel</ref> *</type>
          <declname>func_tabel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/Tabels.cpp" line="180" column="12" bodyfile="src/Legacy/Common/Structures/Tabels/Tabels.cpp" bodystart="180" bodyend="192" declfile="src/Legacy/Common/Structures/Tabels/Tabels.cpp" declline="9" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="_tabels_8cpp_1a5ed14d00e8a3cc67aaf57ce5f8ce92e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ResizeVarTabel</definition>
        <argsstring>(VarTabel *tabel)</argsstring>
        <name>ResizeVarTabel</name>
        <param>
          <type><ref refid="struct_var_tabel" kindref="compound">VarTabel</ref> *</type>
          <declname>tabel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/Tabels.cpp" line="308" column="12" bodyfile="src/Legacy/Common/Structures/Tabels/Tabels.cpp" bodystart="308" bodyend="320" declfile="src/Legacy/Common/Structures/Tabels/Tabels.cpp" declline="10" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="_tabels_8cpp_1a97e55ffe605a97185faad6072f872ac2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_func_tabel" kindref="compound">FuncTabel</ref> *</type>
        <definition>FuncTabel* NewFuncTabel</definition>
        <argsstring>()</argsstring>
        <name>NewFuncTabel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/Tabels.cpp" line="16" column="12" bodyfile="src/Legacy/Common/Structures/Tabels/Tabels.cpp" bodystart="16" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="_tabels_8cpp_1ab067ffb1d44b483d519173cf8b540c2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CloseFuncTabel</definition>
        <argsstring>(FuncTabel *tabel)</argsstring>
        <name>CloseFuncTabel</name>
        <param>
          <type><ref refid="struct_func_tabel" kindref="compound">FuncTabel</ref> *</type>
          <declname>tabel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/Tabels.cpp" line="37" column="5" bodyfile="src/Legacy/Common/Structures/Tabels/Tabels.cpp" bodystart="37" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="_tabels_8cpp_1a88256cb0b3bf389bdc0ea606f83a8c1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int IsFuncLabel</definition>
        <argsstring>(int name_id, FuncTabel *func_tabel)</argsstring>
        <name>IsFuncLabel</name>
        <param>
          <type>int</type>
          <declname>name_id</declname>
        </param>
        <param>
          <type><ref refid="struct_func_tabel" kindref="compound">FuncTabel</ref> *</type>
          <declname>func_tabel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/Tabels.cpp" line="74" column="5" bodyfile="src/Legacy/Common/Structures/Tabels/Tabels.cpp" bodystart="74" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="_tabels_8cpp_1a7a80a195285388e6b7fbdcbb7d437641" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AddFuncLabel</definition>
        <argsstring>(int name_id, int return_type, int body_status, FuncTabel *func_tabel)</argsstring>
        <name>AddFuncLabel</name>
        <param>
          <type>int</type>
          <declname>name_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>return_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>body_status</declname>
        </param>
        <param>
          <type><ref refid="struct_func_tabel" kindref="compound">FuncTabel</ref> *</type>
          <declname>func_tabel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/Tabels.cpp" line="98" column="5" bodyfile="src/Legacy/Common/Structures/Tabels/Tabels.cpp" bodystart="98" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="_tabels_8cpp_1add09627c8c97e7dc0480be3b110365c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AddFuncLabel</definition>
        <argsstring>(FuncLabel *label, FuncTabel *func_tabel)</argsstring>
        <name>AddFuncLabel</name>
        <param>
          <type><ref refid="struct_func_label" kindref="compound">FuncLabel</ref> *</type>
          <declname>label</declname>
        </param>
        <param>
          <type><ref refid="struct_func_tabel" kindref="compound">FuncTabel</ref> *</type>
          <declname>func_tabel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/Tabels.cpp" line="125" column="5" bodyfile="src/Legacy/Common/Structures/Tabels/Tabels.cpp" bodystart="125" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="_tabels_8cpp_1a7c246b00f2cfe7a3b5520c66290a9c07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_func_label" kindref="compound">FuncLabel</ref> *</type>
        <definition>FuncLabel* NewFuncLabel</definition>
        <argsstring>(int name_id, int return_type)</argsstring>
        <name>NewFuncLabel</name>
        <param>
          <type>int</type>
          <declname>name_id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>return_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/Tabels.cpp" line="138" column="11" bodyfile="src/Legacy/Common/Structures/Tabels/Tabels.cpp" bodystart="138" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="_tabels_8cpp_1af6d70b81ed951c2069ec5c2e4063c6f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CompareFuncLabels</definition>
        <argsstring>(FuncLabel *label1, FuncLabel *label2)</argsstring>
        <name>CompareFuncLabels</name>
        <param>
          <type><ref refid="struct_func_label" kindref="compound">FuncLabel</ref> *</type>
          <declname>label1</declname>
        </param>
        <param>
          <type><ref refid="struct_func_label" kindref="compound">FuncLabel</ref> *</type>
          <declname>label2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/Tabels.cpp" line="157" column="5" bodyfile="src/Legacy/Common/Structures/Tabels/Tabels.cpp" bodystart="157" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="_tabels_8cpp_1adadf2b6f3b10fecf35e21883da96d620" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_var_tabel" kindref="compound">VarTabel</ref> *</type>
        <definition>VarTabel* NewVarTabel</definition>
        <argsstring>()</argsstring>
        <name>NewVarTabel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/Tabels.cpp" line="195" column="10" bodyfile="src/Legacy/Common/Structures/Tabels/Tabels.cpp" bodystart="195" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="_tabels_8cpp_1a3b75e9ac61f455138750075d82207e66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CloseVarTabel</definition>
        <argsstring>(VarTabel *tabel)</argsstring>
        <name>CloseVarTabel</name>
        <param>
          <type><ref refid="struct_var_tabel" kindref="compound">VarTabel</ref> *</type>
          <declname>tabel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/Tabels.cpp" line="214" column="5" bodyfile="src/Legacy/Common/Structures/Tabels/Tabels.cpp" bodystart="214" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="_tabels_8cpp_1a718044c2f9cf56fc7d5fba12ef4714ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_var_label" kindref="compound">VarLabel</ref> *</type>
        <definition>VarLabel* IsVarLabel</definition>
        <argsstring>(int name_id, VarTabel *tabel)</argsstring>
        <name>IsVarLabel</name>
        <param>
          <type>int</type>
          <declname>name_id</declname>
        </param>
        <param>
          <type><ref refid="struct_var_tabel" kindref="compound">VarTabel</ref> *</type>
          <declname>tabel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/Tabels.cpp" line="250" column="10" bodyfile="src/Legacy/Common/Structures/Tabels/Tabels.cpp" bodystart="250" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="_tabels_8cpp_1a75a647eabcac5505fd4305ad143d15d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AddVarLabel</definition>
        <argsstring>(VarLabel *label, VarTabel *tabel)</argsstring>
        <name>AddVarLabel</name>
        <param>
          <type><ref refid="struct_var_label" kindref="compound">VarLabel</ref> *</type>
          <declname>label</declname>
        </param>
        <param>
          <type><ref refid="struct_var_tabel" kindref="compound">VarTabel</ref> *</type>
          <declname>tabel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/Tabels.cpp" line="274" column="5" bodyfile="src/Legacy/Common/Structures/Tabels/Tabels.cpp" bodystart="274" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="_tabels_8cpp_1a5097552b26e9fe56cee9602202c23501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int AddVarLabel</definition>
        <argsstring>(int name_id, VarTabel *tabel)</argsstring>
        <name>AddVarLabel</name>
        <param>
          <type>int</type>
          <declname>name_id</declname>
        </param>
        <param>
          <type><ref refid="struct_var_tabel" kindref="compound">VarTabel</ref> *</type>
          <declname>tabel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/Tabels/Tabels.cpp" line="288" column="5" bodyfile="src/Legacy/Common/Structures/Tabels/Tabels.cpp" bodystart="288" bodyend="306"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;Tabels.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LogMacroses.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GROWTH_RATE<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>START_LABEL_ARR_SIZE<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ResizeFuncTabel<sp/>(<ref refid="struct_func_tabel" kindref="compound">FuncTabel</ref>*<sp/>func_tabel);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ResizeVarTabel<sp/><sp/>(<ref refid="struct_var_tabel" kindref="compound">VarTabel</ref>*<sp/>tabel);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LABEL_ARR(tabel)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tabel-&gt;label_arr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUMBER_OF_LABELS(tabel)<sp/>(tabel-&gt;number_of_labels)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARR_SIZE(tabel)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(tabel-&gt;arr_size)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><ref refid="struct_func_tabel" kindref="compound">FuncTabel</ref>*<sp/><sp/>NewFuncTabel()</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_func_tabel" kindref="compound">FuncTabel</ref>*<sp/>tabel<sp/>=<sp/>(<ref refid="struct_func_tabel" kindref="compound">FuncTabel</ref>*)<sp/>CALLOC<sp/>(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tabel[0]));</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tabel)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>LABEL_ARR(tabel)<sp/>=<sp/>(<ref refid="struct_func_label" kindref="compound">FuncLabel</ref>**)<sp/>CALLOC(START_LABEL_ARR_SIZE,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_func_label" kindref="compound">FuncLabel</ref>*));</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!LABEL_ARR(tabel))</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KILL(tabel);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>ARR_SIZE(tabel)<sp/>=<sp/>START_LABEL_ARR_SIZE;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>NUMBER_OF_LABELS(tabel)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tabel;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wformat=&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CloseFuncTabel<sp/>(<ref refid="struct_func_tabel" kindref="compound">FuncTabel</ref>*<sp/>tabel)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(tabel,<sp/>EFAULT,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!LABEL_ARR(tabel))</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Tabel<sp/>%p:<sp/>Null<sp/>label<sp/>arr<sp/>pointer\n&quot;</highlight><highlight class="normal">,<sp/>tabel);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ARR_SIZE(tabel)<sp/>&lt;<sp/>NUMBER_OF_LABELS(tabel))</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Tabel<sp/>%p:<sp/>arr_size<sp/>(%zu)<sp/>less<sp/>than<sp/>namber_of_labels<sp/>(%p)\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tabel,<sp/>ARR_SIZE(tabel),<sp/>NUMBER_OF_LABELS(tabel));<sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NUMBER_OF_LABELS(tabel);<sp/>i++)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(LABEL_ARR(tabel)<sp/>+<sp/>i))</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(</highlight><highlight class="stringliteral">&quot;Tabel<sp/>%p:<sp/>null<sp/>label<sp/>in<sp/>label_arr<sp/>(position<sp/>%zu)\n&quot;</highlight><highlight class="normal">,<sp/>tabel,<sp/>i);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KILL<sp/>(LABEL_ARR(tabel)[i]);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>KILL<sp/>(LABEL_ARR(tabel));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>KILL<sp/>(tabel);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>IsFuncLabel<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>name_id,<sp/><ref refid="struct_func_tabel" kindref="compound">FuncTabel</ref>*<sp/>func_tabel)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(func_tabel,<sp/>EFAULT,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_A_LABEL);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>number_of_labels<sp/>=<sp/>func_tabel-&gt;number_of_labels;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(number_of_labels<sp/>&lt;<sp/>1)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_A_LABEL;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_func_label" kindref="compound">FuncLabel</ref>**<sp/>label_arr<sp/>=<sp/>func_tabel-&gt;label_arr;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!label_arr)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_message(</highlight><highlight class="stringliteral">&quot;Empty<sp/>label<sp/>array<sp/>in<sp/>func<sp/>tabel<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>func_tabel);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_A_LABEL;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>number_of_labels;<sp/>i++)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name_id<sp/>==<sp/>(*(label_arr<sp/>+<sp/>i))-&gt;name)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>i;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NOT_A_LABEL;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AddFuncLabel<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>name_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>return_type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>body_status,<sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_func_tabel" kindref="compound">FuncTabel</ref>*<sp/>func_tabel)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(func_tabel,<sp/>EFAULT,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ARR_SIZE(func_tabel)<sp/>&lt;=<sp/>NUMBER_OF_LABELS(func_tabel))</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(ResizeFuncTabel(func_tabel)<sp/>==<sp/>SUCCESS,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_func_label" kindref="compound">FuncLabel</ref>*<sp/>new_label<sp/>=<sp/>(<ref refid="struct_func_label" kindref="compound">FuncLabel</ref>*)<sp/>CALLOC(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(new_label[0]));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!new_label)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>new_label-&gt;name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>name_id;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>new_label-&gt;ret_type<sp/><sp/><sp/><sp/>=<sp/>return_type;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>new_label-&gt;body_status<sp/>=<sp/>body_status;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>new_label-&gt;number_of_return<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>new_label-&gt;number_of_arguments<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>new_label-&gt;number_of_local_variables<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>*(LABEL_ARR(func_tabel)<sp/>+<sp/>NUMBER_OF_LABELS(func_tabel))<sp/>=<sp/>new_label;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>$lzu(NUMBER_OF_LABELS(func_tabel))</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>NUMBER_OF_LABELS(func_tabel)++;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AddFuncLabel<sp/>(<ref refid="struct_func_label" kindref="compound">FuncLabel</ref>*<sp/>label,<sp/><ref refid="struct_func_tabel" kindref="compound">FuncTabel</ref>*<sp/>func_tabel)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(label,<sp/><sp/><sp/><sp/><sp/><sp/>EFAULT,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(func_tabel,<sp/>EFAULT,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ARR_SIZE(func_tabel)<sp/>&lt;=<sp/>NUMBER_OF_LABELS(func_tabel))</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(ResizeFuncTabel(func_tabel)<sp/>==<sp/>SUCCESS,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>*(LABEL_ARR(func_tabel)<sp/>+<sp/>NUMBER_OF_LABELS(func_tabel))<sp/>=<sp/>label;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>NUMBER_OF_LABELS(func_tabel)++;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><ref refid="struct_func_label" kindref="compound">FuncLabel</ref>*<sp/>NewFuncLabel<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>name_id,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>return_type)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>$log(1)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_func_label" kindref="compound">FuncLabel</ref>*<sp/>new_label<sp/>=<sp/>(<ref refid="struct_func_label" kindref="compound">FuncLabel</ref>*)<sp/>CALLOC(1,<sp/>sizeof(new_label[0]));</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!new_label)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>NULL;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>new_label-&gt;name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>name_id;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>new_label-&gt;ret_type<sp/><sp/><sp/><sp/>=<sp/>return_type;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>new_label-&gt;body_status<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NOT_DECLARED;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>new_label-&gt;number_of_return<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>new_label-&gt;number_of_arguments<sp/>=<sp/>0;src/../src/SyntaxAnalysisUtils_.ars:192</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>new_label-&gt;number_of_local_variables<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>new_label;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CompareFuncLabels<sp/>(<ref refid="struct_func_label" kindref="compound">FuncLabel</ref>*<sp/>label1,<sp/><ref refid="struct_func_label" kindref="compound">FuncLabel</ref>*<sp/>label2)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(label1,<sp/>EFAULT,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(label2,<sp/>EFAULT,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label1-&gt;name<sp/>!=<sp/>label2-&gt;<sp/>name)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label1-&gt;ret_type<sp/>!=<sp/>label2-&gt;ret_type)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(label1-&gt;body_status<sp/>!=<sp/>label2-&gt;body_status)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(label1-&gt;number_of_arguments<sp/>!=<sp/>label2-&gt;number_of_arguments)</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wsign-conversion&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ResizeFuncTabel<sp/>(<ref refid="struct_func_tabel" kindref="compound">FuncTabel</ref>*<sp/>func_tabel)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(func_tabel,<sp/>EFAULT,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_func_label" kindref="compound">FuncLabel</ref>**<sp/>temp_arr<sp/>=<sp/>(<ref refid="struct_func_label" kindref="compound">FuncLabel</ref>**)<sp/>RECALLOC<sp/>(LABEL_ARR(func_tabel),<sp/>ARR_SIZE(func_tabel)<sp/>*<sp/>GROWTH_RATE<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(temp_arr[0]));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!temp_arr)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>LABEL_ARR(func_tabel)<sp/>=<sp/>temp_arr;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>ARR_SIZE(func_tabel)<sp/>*=<sp/>GROWTH_RATE;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><ref refid="struct_var_tabel" kindref="compound">VarTabel</ref>*<sp/>NewVarTabel<sp/>()</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_var_tabel" kindref="compound">VarTabel</ref>*<sp/>tabel<sp/>=<sp/>(<ref refid="struct_var_tabel" kindref="compound">VarTabel</ref>*)<sp/>CALLOC(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(tabel[0]));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tabel)</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>LABEL_ARR(tabel)<sp/>=<sp/>(<ref refid="struct_var_label" kindref="compound">VarLabel</ref>**)<sp/>CALLOC(START_LABEL_ARR_SIZE,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_var_label" kindref="compound">VarLabel</ref>*));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!LABEL_ARR(tabel))</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KILL(tabel);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>ARR_SIZE(tabel)<sp/>=<sp/>START_LABEL_ARR_SIZE;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>NUMBER_OF_LABELS(tabel)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tabel;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CloseVarTabel<sp/>(<ref refid="struct_var_tabel" kindref="compound">VarTabel</ref>*<sp/>tabel)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(tabel,<sp/>EFAULT,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!LABEL_ARR(tabel))</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Tabel<sp/>%p:<sp/>Null<sp/>label<sp/>arr<sp/>pointer\n&quot;</highlight><highlight class="normal">,<sp/>tabel);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ARR_SIZE(tabel)<sp/>&lt;<sp/>NUMBER_OF_LABELS(tabel))</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Tabel<sp/>%p:<sp/>arr_size<sp/>(%zu)<sp/>less<sp/>than<sp/>namber_of_labels<sp/>(%p)\n&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tabel,<sp/>ARR_SIZE(tabel),<sp/>NUMBER_OF_LABELS(tabel));<sp/></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NUMBER_OF_LABELS(tabel);<sp/>i++)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(LABEL_ARR(tabel)<sp/>+<sp/>i))</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(</highlight><highlight class="stringliteral">&quot;Tabel<sp/>%p:<sp/>null<sp/>label<sp/>in<sp/>label_arr<sp/>(position<sp/>%zu)\n&quot;</highlight><highlight class="normal">,<sp/>tabel,<sp/>i);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KILL<sp/>(LABEL_ARR(tabel)[i]);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>KILL<sp/>(LABEL_ARR(tabel));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>KILL<sp/>(tabel);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><ref refid="struct_var_label" kindref="compound">VarLabel</ref>*<sp/>IsVarLabel<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>name_id,<sp/><ref refid="struct_var_tabel" kindref="compound">VarTabel</ref>*<sp/>tabel)</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(tabel,<sp/>EFAULT,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LNULL);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>number_of_labels<sp/>=<sp/>tabel-&gt;number_of_labels;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(number_of_labels<sp/>&lt;<sp/>1)</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_var_label" kindref="compound">VarLabel</ref>**<sp/>label_arr<sp/>=<sp/>tabel-&gt;label_arr;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!label_arr)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func_message(</highlight><highlight class="stringliteral">&quot;Empty<sp/>label<sp/>array<sp/>in<sp/>var<sp/>tabel<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>tabel);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LNULL;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>number_of_labels;<sp/>i++)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name_id<sp/>==<sp/>(*(label_arr<sp/>+<sp/>i))-&gt;name_id)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*(label_arr<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AddVarLabel<sp/>(<ref refid="struct_var_label" kindref="compound">VarLabel</ref>*<sp/>label,<sp/><ref refid="struct_var_tabel" kindref="compound">VarTabel</ref>*<sp/>tabel)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(label,<sp/><sp/><sp/><sp/><sp/><sp/>EFAULT,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(tabel,<sp/><sp/><sp/><sp/><sp/><sp/>EFAULT,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ARR_SIZE(tabel)<sp/>&lt;=<sp/>NUMBER_OF_LABELS(tabel))</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(ResizeVarTabel(tabel)<sp/>==<sp/>SUCCESS,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>*(LABEL_ARR(tabel)<sp/>+<sp/>NUMBER_OF_LABELS(tabel))<sp/>=<sp/>label;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>NUMBER_OF_LABELS(tabel)++;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>AddVarLabel<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>name_id,<sp/><ref refid="struct_var_tabel" kindref="compound">VarTabel</ref>*<sp/>tabel)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(tabel,<sp/>EFAULT,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ARR_SIZE(tabel)<sp/>&lt;=<sp/>NUMBER_OF_LABELS(tabel))</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CHECK(ResizeVarTabel(tabel)<sp/>==<sp/>SUCCESS,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_var_label" kindref="compound">VarLabel</ref>*<sp/>new_label<sp/>=<sp/>(<ref refid="struct_var_label" kindref="compound">VarLabel</ref>*)<sp/>CALLOC(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(new_label[0]));</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!new_label)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>new_label-&gt;name_id<sp/>=<sp/>name_id;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>*(LABEL_ARR(tabel)<sp/>+<sp/>NUMBER_OF_LABELS(tabel))<sp/>=<sp/>new_label;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>NUMBER_OF_LABELS(tabel)++;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ResizeVarTabel<sp/>(<ref refid="struct_var_tabel" kindref="compound">VarTabel</ref>*<sp/>tabel)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>assertlog(tabel,<sp/>EFAULT,<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_var_label" kindref="compound">VarLabel</ref>**<sp/>temp_arr<sp/>=<sp/>(<ref refid="struct_var_label" kindref="compound">VarLabel</ref>**)<sp/>RECALLOC<sp/>(LABEL_ARR(tabel),<sp/>ARR_SIZE(tabel)<sp/>*<sp/>GROWTH_RATE<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(temp_arr[0]));</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!temp_arr)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LFAILURE;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>LABEL_ARR(tabel)<sp/>=<sp/>temp_arr;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>ARR_SIZE(tabel)<sp/>*=<sp/>GROWTH_RATE;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
    </programlisting>
    <location file="src/Legacy/Common/Structures/Tabels/Tabels.cpp"/>
  </compounddef>
</doxygen>
