<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="my__buffer_8h" kind="file" language="C++">
    <compoundname>my_buffer.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">stdio.h</includes>
    <includedby refid="_ars_lib_8h" local="yes">ATC/ArsLib.h</includedby>
    <includedby refid="my__buffer_8cpp" local="yes">ATC/Buffer/my_buffer.cpp</includedby>
    <includedby refid="_logger_8cpp" local="yes">ATC/Logger/Logger.cpp</includedby>
    <includedby refid="_some_stuff_8cpp" local="yes">ATC/RandomStuff/SomeStuff.cpp</includedby>
    <includedby refid="_translate_i_r_tox86_8cpp" local="yes">src/IR/TranslateTox86/TranslateIRTox86.cpp</includedby>
    <includedby refid="_lexical_ctx_8h" local="yes">src/Legacy/Common/LexicalCtx/LexicalCtx.h</includedby>
    <includedby refid="_get_std_8cpp" local="yes">src/Legacy/Common/StandartAWP/GetStd.cpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>ATC/Buffer/my_buffer.h</label>
        <link refid="my__buffer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>src/Legacy/Common/LexicalCtx/LexicalCtx.h</label>
        <link refid="_lexical_ctx_8h_source"/>
      </node>
      <node id="1">
        <label>ATC/Buffer/my_buffer.h</label>
        <link refid="my__buffer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ATC/ArsLib.h</label>
        <link refid="_ars_lib_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_buffer" prot="public">Buffer</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="my__buffer_8h_1a9a41113cc28a2b67396add06da86a18c" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int INDENT_SIZE</definition>
        <argsstring></argsstring>
        <name>INDENT_SIZE</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="32" column="11" bodyfile="ATC/Buffer/my_buffer.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="my__buffer_8h_1a99d0346ca293987838f53d4e75826cb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* GetSrcFile</definition>
        <argsstring>(const char *file_direction)</argsstring>
        <name>GetSrcFile</name>
        <param>
          <type>const char *</type>
          <declname>file_direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>terminate_comments(const char* buffer, char terminator); </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="10" column="7" bodyfile="ATC/Buffer/my_buffer.cpp" bodystart="10" bodyend="46" declfile="ATC/Buffer/my_buffer.h" declline="10" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="my__buffer_8h_1a3a4a5ac60e819c4ce2e822b2b50dc52a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char **</type>
        <definition>const char** DivideBufferIntoLines</definition>
        <argsstring>(char *buffer, size_t number_of_lines)</argsstring>
        <name>DivideBufferIntoLines</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>number_of_lines</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This functions changes all &apos;<linebreak/>
&apos; to &apos;\0&apos; while dividing buffer If you want to split buffer without changing &apos;<linebreak/>
&apos;, then use SplitBufferIntoLines </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="14" column="12" bodyfile="ATC/Buffer/my_buffer.cpp" bodystart="50" bodyend="93" declfile="ATC/Buffer/my_buffer.h" declline="14" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="my__buffer_8h_1a826ec078b8a718bc1c716832ac693bd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char **</type>
        <definition>const char** SplitBufferIntoLines</definition>
        <argsstring>(const char *buffer, size_t number_of_lines)</argsstring>
        <name>SplitBufferIntoLines</name>
        <param>
          <type>const char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>number_of_lines</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="15" column="12" bodyfile="ATC/Buffer/my_buffer.cpp" bodystart="95" bodyend="134" declfile="ATC/Buffer/my_buffer.h" declline="15" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="my__buffer_8h_1aff0ba7ea789f54652510388eaafebab5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* SkipSpaces</definition>
        <argsstring>(const char *s)</argsstring>
        <name>SkipSpaces</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="17" column="7" bodyfile="ATC/Buffer/my_buffer.cpp" bodystart="189" bodyend="198" declfile="ATC/Buffer/my_buffer.h" declline="17" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="my__buffer_8h_1a5a6f44c719cf37841ed850f86879d69b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t CountLines</definition>
        <argsstring>(const char *text, char terminator=&apos;\n&apos;)</argsstring>
        <name>CountLines</name>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>char</type>
          <declname>terminator</declname>
          <defval>&apos;\n&apos;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="19" column="8" bodyfile="ATC/Buffer/my_buffer.cpp" bodystart="136" bodyend="153" declfile="ATC/Buffer/my_buffer.h" declline="19" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="my__buffer_8h_1a110e4aa0430a06403460e20d295fcbcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RemoveComments</definition>
        <argsstring>(char *buffer, char terminator)</argsstring>
        <name>RemoveComments</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>char</type>
          <declname>terminator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="21" column="8" bodyfile="ATC/Buffer/my_buffer.cpp" bodystart="155" bodyend="168" declfile="ATC/Buffer/my_buffer.h" declline="21" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="my__buffer_8h_1a86dc565f44293a2298fad72444a0e443" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RemoveComments</definition>
        <argsstring>(char *buffer, unsigned size, char terminator)</argsstring>
        <name>RemoveComments</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>size</declname>
        </param>
        <param>
          <type>char</type>
          <declname>terminator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="22" column="8" bodyfile="ATC/Buffer/my_buffer.cpp" bodystart="170" bodyend="185" declfile="ATC/Buffer/my_buffer.h" declline="22" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="my__buffer_8h_1ab894be78737dcac7d3f854eb75b6df1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShowLine</definition>
        <argsstring>(const char *line)</argsstring>
        <name>ShowLine</name>
        <param>
          <type>const char *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="24" column="6" bodyfile="ATC/Buffer/my_buffer.cpp" bodystart="200" bodyend="227" declfile="ATC/Buffer/my_buffer.h" declline="24" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="my__buffer_8h_1a7f886f6fb9d16724acb21dca4110ec29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stricmp</definition>
        <argsstring>(const char *s1, const char *s2)</argsstring>
        <name>stricmp</name>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="26" column="5" bodyfile="ATC/Buffer/my_buffer.cpp" bodystart="229" bodyend="238" declfile="ATC/Buffer/my_buffer.h" declline="26" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="my__buffer_8h_1aeab6280b64997359ad5b177dd4855a8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int strnicmp</definition>
        <argsstring>(const char *s1, const char *s2, int number_of_ch)</argsstring>
        <name>strnicmp</name>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>number_of_ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="27" column="5" bodyfile="ATC/Buffer/my_buffer.cpp" bodystart="240" bodyend="249" declfile="ATC/Buffer/my_buffer.h" declline="27" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="my__buffer_8h_1a8b5e146a1ed5682413f1e273642ea970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int strnicmprus</definition>
        <argsstring>(const char *s1, const char *s2, int number_of_ch)</argsstring>
        <name>strnicmprus</name>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>number_of_ch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="28" column="5" bodyfile="ATC/Buffer/my_buffer.cpp" bodystart="252" bodyend="271" declfile="ATC/Buffer/my_buffer.h" declline="28" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="my__buffer_8h_1af28fe6832f4dd3f13033e5c666525f07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ClearBuffer</definition>
        <argsstring>()</argsstring>
        <name>ClearBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="30" column="6" bodyfile="ATC/Buffer/my_buffer.cpp" bodystart="273" bodyend="279" declfile="ATC/Buffer/my_buffer.h" declline="30" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="my__buffer_8h_1a0105dd5c5e5a443043c53e5f3f4596a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void fsetindent</definition>
        <argsstring>(FILE *file, int indent)</argsstring>
        <name>fsetindent</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="34" column="6" bodyfile="ATC/Buffer/my_buffer.cpp" bodystart="281" bodyend="286" declfile="ATC/Buffer/my_buffer.h" declline="34" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="my__buffer_8h_1af3ef11744d639583ff0c10d9f0c05680" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setindent</definition>
        <argsstring>(int indent)</argsstring>
        <name>setindent</name>
        <param>
          <type>int</type>
          <declname>indent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="35" column="6" bodyfile="ATC/Buffer/my_buffer.cpp" bodystart="288" bodyend="293" declfile="ATC/Buffer/my_buffer.h" declline="35" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="my__buffer_8h_1aea5cae10f64edbdba257f772a995ac43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BufferCtor</definition>
        <argsstring>(Buffer *buf, const char *string)</argsstring>
        <name>BufferCtor</name>
        <param>
          <type><ref refid="struct_buffer" kindref="compound">Buffer</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="47" column="5" bodyfile="ATC/Buffer/my_buffer.cpp" bodystart="295" bodyend="307" declfile="ATC/Buffer/my_buffer.h" declline="47" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="my__buffer_8h_1a3e86dcf19f6bafa47e32f13dcf06a37c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BufferCtor</definition>
        <argsstring>(Buffer *buf, int size)</argsstring>
        <name>BufferCtor</name>
        <param>
          <type><ref refid="struct_buffer" kindref="compound">Buffer</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="48" column="5" bodyfile="ATC/Buffer/my_buffer.cpp" bodystart="309" bodyend="323" declfile="ATC/Buffer/my_buffer.h" declline="48" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="my__buffer_8h_1adadfd0e795ee50c71ff33790f2caacbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BufferSkipSpaces</definition>
        <argsstring>(Buffer *buf)</argsstring>
        <name>BufferSkipSpaces</name>
        <param>
          <type><ref refid="struct_buffer" kindref="compound">Buffer</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="53" column="6" bodyfile="ATC/Buffer/my_buffer.cpp" bodystart="337" bodyend="371" declfile="ATC/Buffer/my_buffer.h" declline="53" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="my__buffer_8h_1a90267baca11e8b202a388264593d1392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BufferGetCh</definition>
        <argsstring>(Buffer *buf)</argsstring>
        <name>BufferGetCh</name>
        <param>
          <type><ref refid="struct_buffer" kindref="compound">Buffer</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="55" column="6" bodyfile="ATC/Buffer/my_buffer.cpp" bodystart="392" bodyend="401" declfile="ATC/Buffer/my_buffer.h" declline="55" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="my__buffer_8h_1a25d8125e0a1e8b06cb3a5b88ac615840" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BufferLook</definition>
        <argsstring>(Buffer *buf)</argsstring>
        <name>BufferLook</name>
        <param>
          <type><ref refid="struct_buffer" kindref="compound">Buffer</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="56" column="6" bodyfile="ATC/Buffer/my_buffer.cpp" bodystart="403" bodyend="410" declfile="ATC/Buffer/my_buffer.h" declline="56" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="my__buffer_8h_1a244ee8e0ef995b5efbf7eecd60b3000b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BufferGetDouble</definition>
        <argsstring>(Buffer *buf, double *val)</argsstring>
        <name>BufferGetDouble</name>
        <param>
          <type><ref refid="struct_buffer" kindref="compound">Buffer</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="57" column="6" bodyfile="ATC/Buffer/my_buffer.cpp" bodystart="412" bodyend="428" declfile="ATC/Buffer/my_buffer.h" declline="57" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="my__buffer_8h_1afce423358344c8a1390650a7b93bcf40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BufferSkipCommentLine</definition>
        <argsstring>(Buffer *buf, char terminator)</argsstring>
        <name>BufferSkipCommentLine</name>
        <param>
          <type><ref refid="struct_buffer" kindref="compound">Buffer</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>char</type>
          <declname>terminator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Buffer/my_buffer.h" line="60" column="6" bodyfile="ATC/Buffer/my_buffer.cpp" bodystart="373" bodyend="390" declfile="ATC/Buffer/my_buffer.h" declline="60" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>MY_BUFFER_HACK_YOUR_ASS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MY_BUFFER_HACK_YOUR_ASS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/>GetSrcFile<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file_direction);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>DivideBufferIntoLines<sp/>(<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>number_of_lines);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>SplitBufferIntoLines<sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>number_of_lines);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/>SkipSpaces<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>CountLines<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>text,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>terminator<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>RemoveComments<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>terminator);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/>RemoveComments<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>size,<sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>terminator);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ShowLine(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>line);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stricmp<sp/><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s2);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strnicmp<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_ch);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>strnicmprus<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_ch);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ClearBuffer<sp/>();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>INDENT_SIZE<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>fsetindent<sp/>(FILE*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>setindent<sp/><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NO_BUFFER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="struct_buffer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_buffer" kindref="compound">Buffer</ref></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number_of_lines;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BufferCtor<sp/><sp/>(<ref refid="struct_buffer" kindref="compound">Buffer</ref>*<sp/>buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BufferCtor<sp/><sp/>(<ref refid="struct_buffer" kindref="compound">Buffer</ref>*<sp/>buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Not<sp/>safe<sp/>to<sp/>use,<sp/>cause<sp/>if<sp/>buffer<sp/>skiped<sp/>spaces,<sp/>Ungetch<sp/>won&apos;t<sp/>know<sp/>about<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>void<sp/>BufferUngetCh<sp/>(Buffer*<sp/>buf);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BufferSkipSpaces<sp/>(<ref refid="struct_buffer" kindref="compound">Buffer</ref>*<sp/>buf);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>BufferGetCh<sp/><sp/><sp/>(<ref refid="struct_buffer" kindref="compound">Buffer</ref>*<sp/>buf);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>BufferLook<sp/><sp/><sp/><sp/>(<ref refid="struct_buffer" kindref="compound">Buffer</ref>*<sp/>buf);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>BufferGetDouble<sp/><sp/>(<ref refid="struct_buffer" kindref="compound">Buffer</ref>*<sp/>buf,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/>val);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FOR<sp/>LANG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BufferSkipCommentLine<sp/>(<ref refid="struct_buffer" kindref="compound">Buffer</ref>*<sp/>buf,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>terminator);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOT<sp/>FOR<sp/>LANG<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="64"><highlight class="comment">int<sp/><sp/>BufferPutDouble<sp/>(Buffer*<sp/>buf,<sp/>double<sp/>val);</highlight></codeline>
<codeline lineno="65"><highlight class="comment">int<sp/><sp/>BufferPutChar<sp/><sp/><sp/>(Buffer*<sp/>buf,<sp/>char<sp/><sp/><sp/>ch);</highlight></codeline>
<codeline lineno="66"><highlight class="comment">int<sp/><sp/>BufferPutString<sp/>(Buffer*<sp/>buf,<sp/>const<sp/>char*<sp/><sp/>str);</highlight></codeline>
<codeline lineno="67"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="ATC/Buffer/my_buffer.h"/>
  </compounddef>
</doxygen>
