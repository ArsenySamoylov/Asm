<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="main_8cpp" kind="file" language="C++">
    <compoundname>main.cpp</compoundname>
    <includes refid="_translate_to_asm_8h" local="yes">TranslateToAsm.h</includes>
    <includes refid="_ast_to_i_r_8h" local="yes">AstToIR.h</includes>
    <includes refid="_standart_a_w_p_8h" local="yes">StandartAWP.h</includes>
    <includes refid="_set_token_tree_8h" local="yes">SetTokenTree.h</includes>
    <includes refid="_def_graph_vis_8h" local="yes">DefGraphVis.h</includes>
    <includes local="yes">LogMacroses.h</includes>
    <includes local="yes">EasyDebug.h</includes>
    <includes refid="_elf_8hpp" local="yes">Elf.hpp</includes>
    <incdepgraph>
      <node id="20">
        <label>Instructions.h</label>
        <link refid="_instructions_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>Storage.h</label>
        <link refid="_storage_8h_source"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>SetTokenTree.h</label>
        <link refid="_set_token_tree_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>DefGraphVis.h</label>
        <link refid="_def_graph_vis_8h_source"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>LogMacroses.h</label>
      </node>
      <node id="1">
        <label>src/main.cpp</label>
        <link refid="main_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>stdlib.h</label>
      </node>
      <node id="7">
        <label>Tabels.h</label>
        <link refid="_tabels_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>elf.h</label>
      </node>
      <node id="14">
        <label>cassert</label>
      </node>
      <node id="18">
        <label>TypeDefs.h</label>
        <link refid="_type_defs_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>EasyDebug.h</label>
      </node>
      <node id="2">
        <label>TranslateToAsm.h</label>
        <link refid="_translate_to_asm_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stddef.h</label>
      </node>
      <node id="19">
        <label>RegistersUsage.h</label>
        <link refid="_registers_usage_8h_source"/>
      </node>
      <node id="21">
        <label>StandartAWP.h</label>
        <link refid="_standart_a_w_p_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>NameTable.h</label>
        <link refid="_name_table_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>Token.h</label>
        <link refid="_token_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>ValueArrTemplate.h</label>
        <link refid="_value_arr_template_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>GVConfig.h</label>
        <link refid="_g_v_config_8h_source"/>
      </node>
      <node id="15">
        <label>cstdio</label>
      </node>
      <node id="3">
        <label>Program.h</label>
        <link refid="_program_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>Buffer.hpp</label>
        <link refid="_buffer_8hpp_source"/>
      </node>
      <node id="30">
        <label>Elf.hpp</label>
        <link refid="_elf_8hpp_source"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>Module.h</label>
        <link refid="_module_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>cstdlib</label>
      </node>
      <node id="11">
        <label>cstddef</label>
      </node>
      <node id="8">
        <label>AstToIR.h</label>
        <link refid="_ast_to_i_r_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>Value.h</label>
        <link refid="_value_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>NoCopyable.h</label>
        <link refid="_no_copyable_8h_source"/>
      </node>
      <node id="23">
        <label>BackEndConfig.h</label>
        <link refid="_back_end_config_8h_source"/>
      </node>
      <node id="26">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="main_8cpp_1ab0b03f7f0b84ae9cdbb6708361a489e6" prot="public" static="no">
        <name>GOTO_FAILURE_EXIT</name>
        <param><defname>exit_name</defname></param>
        <initializer>goto fail_exit_label_##exit_name;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="15" column="9" bodyfile="src/main.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8cpp_1a78dd5917e37a61e979b03bd7793dcc48" prot="public" static="no">
        <name>SET_FAILURE_EXIT</name>
        <param><defname>exit_name</defname></param>
        <initializer>fail_exit_label_##exit_name:</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="16" column="9" bodyfile="src/main.cpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="main_8cpp_1a1e2a85e505ab3bbfce756209004ab9fb" prot="public" static="no">
        <name>CHECK_SUCCESS</name>
        <param><defname>condition</defname></param>
        <param><defname>exit_name</defname></param>
        <initializer>if ((condition) != SUCCESS)  { GOTO_FAILURE_EXIT(exit_name)}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="17" column="9" bodyfile="src/main.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="main_8cpp_1a313eaa41255295bf969fb8e99ad32e1b" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* IR_DUMP_FILE</definition>
        <argsstring></argsstring>
        <name>IR_DUMP_FILE</name>
        <initializer>= &quot;tests/dump.ir&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="21" column="12" bodyfile="src/main.cpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a5474498c05858402716a89df8b4d7dcb" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* ASSEMBLER_DUMP_FILE</definition>
        <argsstring></argsstring>
        <name>ASSEMBLER_DUMP_FILE</name>
        <initializer>= &quot;tests/dump.s&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="22" column="12" bodyfile="src/main.cpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="main_8cpp_1a97ee70a8770dc30d06c744b24eb2fcfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void help</definition>
        <argsstring>()</argsstring>
        <name>help</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="78" column="6" bodyfile="src/main.cpp" bodystart="78" bodyend="81" declfile="src/main.cpp" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1ac0f2228420376f4db7e1274f2b41667c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, const char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/main.cpp" line="24" column="5" bodyfile="src/main.cpp" bodystart="24" bodyend="76"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;TranslateToAsm.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;AstToIR.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;StandartAWP.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;SetTokenTree.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;DefGraphVis.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LogMacroses.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;EasyDebug.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Elf.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GOTO_FAILURE_EXIT(exit_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>fail_exit_label_##exit_name;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SET_FAILURE_EXIT(exit_name)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fail_exit_label_##exit_name:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK_SUCCESS(condition,<sp/>exit_name)<sp/>if<sp/>((condition)<sp/>!=<sp/>SUCCESS)<sp/><sp/>{<sp/>GOTO_FAILURE_EXIT(exit_name)}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>help();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>IR_DUMP_FILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;tests/dump.ir&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>ASSEMBLER_DUMP_FILE<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;tests/dump.s&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[])</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(argc<sp/>&lt;<sp/>3)</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>help();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>path_to_awp_file<sp/>=<sp/>argv[1];</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>result_elf_name<sp/><sp/>=<sp/>argv[2];</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><ref refid="struct_program" kindref="compound">Program</ref><sp/>program{};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>ProgramCtor(&amp;program,<sp/>path_to_awp_file);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><ref refid="class_module" kindref="compound">Module</ref><sp/>program_module<sp/>{};</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><ref refid="struct_elf" kindref="compound">Elf</ref><sp/>elf<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>ElfCtor<sp/>(&amp;elf);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>CHECK_SUCCESS<sp/>(GetProgramFromStdAwp(&amp;program,<sp/>path_to_awp_file),<sp/>BAD_SRC_FILE);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>CHECK_SUCCESS<sp/>(AstToIR<sp/>(&amp;program,<sp/>&amp;program_module),<sp/>IR_ERROR);<sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>program_module.dump<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(IR_DUMP_FILE);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>program_module.translate_x86<sp/>(&amp;elf,<sp/>ASSEMBLER_DUMP_FILE);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>WriteElf<sp/>(&amp;elf,<sp/>result_elf_name);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>SYSTEM<sp/>(</highlight><highlight class="stringliteral">&quot;chmod<sp/>+x<sp/>ASM.out\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>ProgramDtor<sp/>(&amp;program);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>ElfDtor<sp/><sp/><sp/><sp/><sp/>(&amp;elf);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">SET_FAILURE_EXIT(BAD_SRC_FILE)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>report<sp/>(</highlight><highlight class="stringliteral">&quot;Bad<sp/>src<sp/>file<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>path_to_awp_file);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>CLEAR_RESOURCES;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">SET_FAILURE_EXIT(IR_ERROR)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>report<sp/>(</highlight><highlight class="stringliteral">&quot;Couldn&apos;t<sp/>translate<sp/>AST<sp/>to<sp/>IR\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>CLEAR_RESOURCES;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">CLEAR_RESOURCES:</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>ProgramDtor<sp/>(&amp;program);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>ElfDtor<sp/><sp/><sp/><sp/><sp/>(&amp;elf);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FAILURE;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>help()</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Enter<sp/>AWP<sp/>file<sp/>to<sp/>compile,<sp/>and<sp/>output<sp/>executable<sp/>file<sp/>name\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
    </programlisting>
    <location file="src/main.cpp"/>
  </compounddef>
</doxygen>
