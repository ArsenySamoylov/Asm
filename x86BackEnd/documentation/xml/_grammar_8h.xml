<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_grammar_8h" kind="file" language="C++">
    <compoundname>Grammar.h</compoundname>
    <includes refid="_token_types_8h" local="yes">TokenTypes.h</includes>
    <includedby refid="_ast_to_i_r_8cpp" local="yes">src/IR/AstToIR/AstToIR.cpp</includedby>
    <includedby refid="_builder_8cpp" local="yes">src/IR/AstToIR/Builder.cpp</includedby>
    <includedby refid="_get_std_8cpp" local="yes">src/Legacy/Common/StandartAWP/GetStd.cpp</includedby>
    <includedby refid="_put_std_8cpp" local="yes">src/Legacy/Common/StandartAWP/PutStd.cpp</includedby>
    <includedby refid="_graph_vis_8cpp" local="yes">src/Legacy/Common/Utils/GraphVis.cpp</includedby>
    <includedby refid="_lang_utils_8cpp" local="yes">src/Legacy/Common/Utils/LangUtils.cpp</includedby>
    <includedby refid="_set_token_tree_8cpp" local="yes">src/Legacy/SetTokenTree.cpp</includedby>
    <includedby refid="_translate_to_asm_8cpp" local="yes">src/Legacy/TranslateToAsm.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>src/Legacy/Common/Grammar.h</label>
        <link refid="_grammar_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>TokenTypes.h</label>
        <link refid="_token_types_8h_source"/>
      </node>
    </incdepgraph>
    <innerclass refid="struct_native_function_struct" prot="public">NativeFunctionStruct</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="_grammar_8h_1a961b1febb3e047f8837575c921f79fc8" prot="public" static="no">
        <name>TOKEN_TYPE</name>
        <param><defname>name</defname></param>
        <param><defname>val</defname></param>
        <param><defname>specificator</defname></param>
        <param><defname>...</defname></param>
        <initializer>name = val,</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Grammar.h" line="5" column="13" bodyfile="src/Legacy/Common/Grammar.h" bodystart="5" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="_grammar_8h_1aa520fbf142ba1e7e659590c07da31921" prot="public" static="no" strong="no">
        <type></type>
        <name>TokenType</name>
        <enumvalue id="_grammar_8h_1aa520fbf142ba1e7e659590c07da31921a844eb8b9774b3023512eb45209df228c" prot="public">
          <name>UNKNOWN_TYPE</name>
          <initializer>= -999</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Grammar.h" line="3" column="1" bodyfile="src/Legacy/Common/Grammar.h" bodystart="4" bodyend="11"/>
      </memberdef>
      <memberdef kind="enum" id="_grammar_8h_1aaef0dc9d159819a449d4c3063744ea60" prot="public" static="no" strong="no">
        <type></type>
        <name>INSTUCTIONS_NUM</name>
        <enumvalue id="_grammar_8h_1aaef0dc9d159819a449d4c3063744ea60a252802eda493fb6b4a279c4452acb547" prot="public">
          <name>IF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_grammar_8h_1aaef0dc9d159819a449d4c3063744ea60a90d649d830ea440c8b8a56c7ef23c426" prot="public">
          <name>ELSE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_grammar_8h_1aaef0dc9d159819a449d4c3063744ea60a3278fd035226215822c903790a1eee73" prot="public">
          <name>WHILE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_grammar_8h_1aaef0dc9d159819a449d4c3063744ea60a520e09ffec033636dba711f3441cc600" prot="public">
          <name>RETURN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_grammar_8h_1aaef0dc9d159819a449d4c3063744ea60aee00b5d0240596f53c1c7aeff443cb48" prot="public">
          <name>NUMBER_OF_INSTUCTIONS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Grammar.h" line="14" column="1" bodyfile="src/Legacy/Common/Grammar.h" bodystart="14" bodyend="14"/>
      </memberdef>
      <memberdef kind="enum" id="_grammar_8h_1a7249cfa7f7e35d350d466c9a20216754" prot="public" static="no" strong="no">
        <type></type>
        <name>FUNCTION_RET_TYPES_NUM</name>
        <enumvalue id="_grammar_8h_1a7249cfa7f7e35d350d466c9a20216754a33465d1d419b1074fb259ef444609e92" prot="public">
          <name>DOUBLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_grammar_8h_1a7249cfa7f7e35d350d466c9a20216754adb31f5ef7acca5e1131fcc0fbfa6911d" prot="public">
          <name>VOID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_grammar_8h_1a7249cfa7f7e35d350d466c9a20216754adfac0e0c8dc78e7d3bcde1a3e64fa519" prot="public">
          <name>NUMBER_OF_FUNCTION_RET_TYPES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Grammar.h" line="24" column="1" bodyfile="src/Legacy/Common/Grammar.h" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="enum" id="_grammar_8h_1afaf9bb9c2b4a8ced5b8d3b9b2fc098d8" prot="public" static="no" strong="no">
        <type></type>
        <name>NATIVE_FUNCTIONS_NUM</name>
        <enumvalue id="_grammar_8h_1afaf9bb9c2b4a8ced5b8d3b9b2fc098d8a0f4c8240bdb97fc51b99296106df94e0" prot="public">
          <name>FOUT</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_grammar_8h_1afaf9bb9c2b4a8ced5b8d3b9b2fc098d8aea3c073df31939c172972ef6ccbc988b" prot="public">
          <name>FIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_grammar_8h_1afaf9bb9c2b4a8ced5b8d3b9b2fc098d8a55720cf0d1ebf3d6f0eac12f2dffbfa2" prot="public">
          <name>SIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_grammar_8h_1afaf9bb9c2b4a8ced5b8d3b9b2fc098d8a493e49dc3b2f8cf43d8ae13fcdde6639" prot="public">
          <name>COS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_grammar_8h_1afaf9bb9c2b4a8ced5b8d3b9b2fc098d8a2f4ddc85dd27c0d03482e36ec69479a7" prot="public">
          <name>POW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_grammar_8h_1afaf9bb9c2b4a8ced5b8d3b9b2fc098d8a3c3c8b964d8c7b30416307e481e1cf53" prot="public">
          <name>NUMBER_OF_NATIVE_FUNCTIONS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Grammar.h" line="39" column="1" bodyfile="src/Legacy/Common/Grammar.h" bodystart="40" bodyend="47"/>
      </memberdef>
      <memberdef kind="enum" id="_grammar_8h_1aeea3539aa499f9fabd6cd879b83ffd54" prot="public" static="no" strong="no">
        <type></type>
        <name>INITIALIZATORS_NUM</name>
        <enumvalue id="_grammar_8h_1aeea3539aa499f9fabd6cd879b83ffd54acadbc87b5f831ce37e107f7f77420ebd" prot="public">
          <name>FUNCTION_INITIALIZATOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_grammar_8h_1aeea3539aa499f9fabd6cd879b83ffd54acaa9851090c7fe67590514dc6d853ee5" prot="public">
          <name>VARIABLE_INITIALIZATOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_grammar_8h_1aeea3539aa499f9fabd6cd879b83ffd54a104c1da96aa680f8c4fd1e3a15493321" prot="public">
          <name>NUMBER_OF_INITIALIZATORS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Grammar.h" line="63" column="1" bodyfile="src/Legacy/Common/Grammar.h" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="enum" id="_grammar_8h_1a5d209cf6ddf8ed79ada8d8054b03d17d" prot="public" static="no" strong="no">
        <type></type>
        <name>OPERATOR_NUM</name>
        <enumvalue id="_grammar_8h_1a5d209cf6ddf8ed79ada8d8054b03d17dacfcf145f2788bf340ff3f3098bc54909" prot="public">
          <name>ADD</name>
          <initializer>= &apos;+&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_grammar_8h_1a5d209cf6ddf8ed79ada8d8054b03d17da12b733d4941495e86811fe6ceeeff9da" prot="public">
          <name>SUB</name>
          <initializer>= &apos;-&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_grammar_8h_1a5d209cf6ddf8ed79ada8d8054b03d17da8565f0d60c3ba6d468661c49d86e9744" prot="public">
          <name>DIV</name>
          <initializer>= &apos;/&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_grammar_8h_1a5d209cf6ddf8ed79ada8d8054b03d17da086ab1f2f4dac104b6826ebe0eaba8fd" prot="public">
          <name>MUL</name>
          <initializer>= &apos;*&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_grammar_8h_1a5d209cf6ddf8ed79ada8d8054b03d17dac72cb4ba9e379a25e80f157177dbe2b8" prot="public">
          <name>OUT</name>
          <initializer>= &apos;&lt;&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_grammar_8h_1a5d209cf6ddf8ed79ada8d8054b03d17daf3180515f5867a29932df1dc207b31ad" prot="public">
          <name>IN</name>
          <initializer>= &apos;&gt;&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_grammar_8h_1a5d209cf6ddf8ed79ada8d8054b03d17daba63a604e56e6c9ea24e738bd422fb2b" prot="public">
          <name>BIGGER</name>
          <initializer>= &apos;&gt;&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="_grammar_8h_1a5d209cf6ddf8ed79ada8d8054b03d17da95c736070f99b99eb80d1eac1f4ca60f" prot="public">
          <name>LESS</name>
          <initializer>= &apos;&lt;&apos;</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Grammar.h" line="68" column="1" bodyfile="src/Legacy/Common/Grammar.h" bodystart="69" bodyend="80"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_grammar_8h_1a1c92afde8ad86ee3291e83fe96da422b" prot="public" static="no" mutable="no">
        <type>const char *const</type>
        <definition>const char* const INSTRUCTIONS[]</definition>
        <argsstring>[]</argsstring>
        <name>INSTRUCTIONS</name>
        <initializer>= { &quot;if&quot;, &quot;else&quot;, &quot;while&quot;, &quot;return&quot; }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Grammar.h" line="15" column="18" bodyfile="src/Legacy/Common/Grammar.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_grammar_8h_1a6c2899875be7f2d63d2ef01eafb12700" prot="public" static="no" mutable="no">
        <type>const char *const</type>
        <definition>const char* const FUNCTION_RET_TYPES[]</definition>
        <argsstring>[]</argsstring>
        <name>FUNCTION_RET_TYPES</name>
        <initializer>= {&quot;double&quot;, &quot;void&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Grammar.h" line="25" column="18" bodyfile="src/Legacy/Common/Grammar.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_grammar_8h_1aa18c2d10d8058399457c4219fae1bd51" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_native_function_struct" kindref="compound">NativeFunctionStruct</ref></type>
        <definition>const NativeFunctionStruct NATIVE_FUNCTIONS[]</definition>
        <argsstring>[]</argsstring>
        <name>NATIVE_FUNCTIONS</name>
        <initializer>= {
            {&quot;fout&quot;, FOUT, 1, VOID},
            {&quot;fin&quot;,  FIN,  1, DOUBLE},
            {&quot;sin&quot;,  SIN,  1, DOUBLE},
            {&quot;cos&quot;,  COS,  1, DOUBLE},
            {&quot;pow&quot;,  POW,  2, DOUBLE},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Grammar.h" line="50" column="28" bodyfile="src/Legacy/Common/Grammar.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_grammar_8h_1adeb76f12912d579028ce63b3e16f399d" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int NUMBER_OF_NATIVE_FUNCTIONS_STRUCT</definition>
        <argsstring></argsstring>
        <name>NUMBER_OF_NATIVE_FUNCTIONS_STRUCT</name>
        <initializer>= sizeof(NATIVE_FUNCTIONS) / sizeof(NATIVE_FUNCTIONS[0])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Grammar.h" line="58" column="11" bodyfile="src/Legacy/Common/Grammar.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_grammar_8h_1ad606fd5f197298ba72be8b3a796a19ed" prot="public" static="no" mutable="no">
        <type>const char *const</type>
        <definition>const char* const INITIALIZATORS[]</definition>
        <argsstring>[]</argsstring>
        <name>INITIALIZATORS</name>
        <initializer>= {&quot;extern&quot;,                &quot;var&quot;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Grammar.h" line="64" column="18" bodyfile="src/Legacy/Common/Grammar.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_grammar_8h_1a514566429a3e783273c7dc370bd4ea35" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char OPERATORS[]</definition>
        <argsstring>[]</argsstring>
        <name>OPERATORS</name>
        <initializer>= &quot;+-/*&lt;&lt;&gt;&gt;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Grammar.h" line="67" column="12" bodyfile="src/Legacy/Common/Grammar.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_grammar_8h_1a68314008c564db9a47fc9136a6eeec3e" prot="public" static="no" mutable="no">
        <type>const char</type>
        <definition>const char COMMENT</definition>
        <argsstring></argsstring>
        <name>COMMENT</name>
        <initializer>= &apos;#&apos;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Grammar.h" line="82" column="12" bodyfile="src/Legacy/Common/Grammar.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_grammar_8h_1a8131875ef6852f62baf79e8c3f8db63d" prot="public" static="no" mutable="no">
        <type>const char *const</type>
        <definition>const char* const MAIN_NAME</definition>
        <argsstring></argsstring>
        <name>MAIN_NAME</name>
        <initializer>= &quot;main&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Grammar.h" line="84" column="18" bodyfile="src/Legacy/Common/Grammar.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_grammar_8h_1a50325d38d6d8ed95df20629c92d9a3f9" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int MAX_FUNCTION_NAME_LENGTH</definition>
        <argsstring></argsstring>
        <name>MAX_FUNCTION_NAME_LENGTH</name>
        <initializer>= 256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Grammar.h" line="86" column="11" bodyfile="src/Legacy/Common/Grammar.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_grammar_8h_1ae803818934030c2d59704e8300b98311" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int MAX_WORD_LENGTH</definition>
        <argsstring></argsstring>
        <name>MAX_WORD_LENGTH</name>
        <initializer>= 256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Grammar.h" line="87" column="11" bodyfile="src/Legacy/Common/Grammar.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>TokenType</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>TOKEN_TYPE(name,<sp/>val,<sp/>specificator,<sp/>...)<sp/><sp/>name<sp/>=<sp/>val,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#include<sp/>&quot;TokenTypes.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#undef<sp/>TOKEN_TYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>UNKNOWN_TYPE<sp/><sp/>=<sp/>-999,</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INSTUCTIONS_NUM<sp/><sp/><sp/>{<sp/><sp/>IF,<sp/><sp/>ELSE,<sp/><sp/><sp/>WHILE,<sp/><sp/><sp/>RETURN,<sp/>NUMBER_OF_INSTUCTIONS<sp/>};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>INSTRUCTIONS[]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;if&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;else&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;while&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;return&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>change<sp/>to<sp/>CPU<sp/>functions<sp/>or<sp/>CPU<sp/>commands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="20"><highlight class="comment">const<sp/>char<sp/>*const<sp/>NATIVE_FUNCTIONS[]<sp/>=<sp/>{<sp/>&quot;fout&quot;,<sp/>&quot;fin&quot;,<sp/>&quot;sin&quot;,<sp/>&quot;cos&quot;<sp/>};</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FUNCTION_RET_TYPES_NUM<sp/>{<sp/>DOUBLE,<sp/><sp/><sp/>VOID,<sp/><sp/>NUMBER_OF_FUNCTION_RET_TYPES<sp/>};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FUNCTION_RET_TYPES[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;void&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="struct_native_function_struct" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_native_function_struct" kindref="compound">NativeFunctionStruct</ref></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str;<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number_of_parametres;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>added<sp/>on<sp/>19.5.2023</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret_type;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>19.2023<sp/>in<sp/>AstToIr.cpp<sp/>I<sp/>use<sp/>Function_NUM<sp/>as<sp/>index<sp/>in<sp/>functions<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>!!!<sp/>BE<sp/>accurate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>NATIVE_FUNCTIONS_NUM<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/><sp/></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>FOUT<sp/>=<sp/>0,<sp/><sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>FIN,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>SIN,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>COS,<sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>POW,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>NUMBER_OF_NATIVE_FUNCTIONS,<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>19.2023<sp/>in<sp/>AstToIr.cpp<sp/>I<sp/>use<sp/>Function_NUM<sp/>as<sp/>index<sp/>in<sp/>functions<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>!!!<sp/>BE<sp/>accurate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_native_function_struct" kindref="compound">NativeFunctionStruct</ref><sp/>NATIVE_FUNCTIONS[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;fout&quot;</highlight><highlight class="normal">,<sp/>FOUT,<sp/>1,<sp/>VOID},</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;fin&quot;</highlight><highlight class="normal">,<sp/><sp/>FIN,<sp/><sp/>1,<sp/>DOUBLE},</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;sin&quot;</highlight><highlight class="normal">,<sp/><sp/>SIN,<sp/><sp/>1,<sp/>DOUBLE},</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;cos&quot;</highlight><highlight class="normal">,<sp/><sp/>COS,<sp/><sp/>1,<sp/>DOUBLE},</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;pow&quot;</highlight><highlight class="normal">,<sp/><sp/>POW,<sp/><sp/>2,<sp/>DOUBLE},</highlight></codeline>
<codeline lineno="56"><highlight class="normal">};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NUMBER_OF_NATIVE_FUNCTIONS_STRUCT<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(NATIVE_FUNCTIONS)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(NATIVE_FUNCTIONS[0]);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal">static_assert(NUMBER_OF_NATIVE_FUNCTIONS_STRUCT<sp/>==<sp/>NUMBER_OF_NATIVE_FUNCTIONS);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>INITIALIZATORS_NUM<sp/>{<sp/>FUNCTION_INITIALIZATOR,<sp/>VARIABLE_INITIALIZATOR,<sp/>NUMBER_OF_INITIALIZATORS<sp/>};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>INITIALIZATORS[]<sp/>=<sp/>{</highlight><highlight class="stringliteral">&quot;extern&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;var&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>OPERATORS[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;+-/*&lt;&lt;&gt;&gt;&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>^</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>OPERATOR_NUM<sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>ADD<sp/>=<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>SUB<sp/>=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>DIV<sp/>=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>MUL<sp/>=<sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>POW<sp/>=<sp/>&apos;^&apos;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>OUT<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>&apos;&lt;&lt;&apos;<sp/><sp/>//<sp/>also<sp/>for<sp/>FIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>IN<sp/><sp/>=<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="comment">//<sp/>&apos;&gt;&gt;&apos;<sp/><sp/>//<sp/>TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGGER<sp/>=<sp/></highlight><highlight class="charliteral">&apos;&gt;&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>LESS<sp/><sp/><sp/>=<sp/></highlight><highlight class="charliteral">&apos;&lt;&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>COMMENT<sp/>=<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MAIN_NAME<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;main&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MAX_FUNCTION_NAME_LENGTH<sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MAX_WORD_LENGTH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>256;</highlight></codeline>
    </programlisting>
    <location file="src/Legacy/Common/Grammar.h"/>
  </compounddef>
</doxygen>
