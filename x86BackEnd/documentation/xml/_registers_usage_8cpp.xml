<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_registers_usage_8cpp" kind="file" language="C++">
    <compoundname>RegistersUsage.cpp</compoundname>
    <includes local="no">assert.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stddef.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="_registers_usage_8h" local="yes">RegistersUsage.h</includes>
    <includes refid="_instructions_8h" local="yes">Instructions.h</includes>
    <includes refid="_common_enums_8h" local="yes">CommonEnums.h</includes>
    <includes refid="_log_macroses_8h" local="yes">LogMacroses.h</includes>
    <includes local="no">stack</includes>
    <incdepgraph>
      <node id="7">
        <label>Instructions.h</label>
        <link refid="_instructions_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>stdarg.h</label>
      </node>
      <node id="14">
        <label>Storage.h</label>
        <link refid="_storage_8h_source"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>assert.h</label>
      </node>
      <node id="5">
        <label>stdlib.h</label>
      </node>
      <node id="17">
        <label>CommonEnums.h</label>
        <link refid="_common_enums_8h_source"/>
      </node>
      <node id="20">
        <label>errno.h</label>
      </node>
      <node id="22">
        <label>Logger.h</label>
        <link refid="_logger_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>LogMacroses.h</label>
        <link refid="_log_macroses_8h_source"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>cassert</label>
      </node>
      <node id="16">
        <label>TypeDefs.h</label>
        <link refid="_type_defs_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/IR/TranslateTox86/RegistersUsage.cpp</label>
        <link refid="_registers_usage_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="6">
        <label>RegistersUsage.h</label>
        <link refid="_registers_usage_8h_source"/>
      </node>
      <node id="21">
        <label>string.h</label>
      </node>
      <node id="10">
        <label>ValueArrTemplate.h</label>
        <link refid="_value_arr_template_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>cstdio</label>
      </node>
      <node id="29">
        <label>stack</label>
      </node>
      <node id="23">
        <label>LogConfig.h</label>
        <link refid="_log_config_8h_source"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>cstdlib</label>
      </node>
      <node id="19">
        <label>iostream</label>
      </node>
      <node id="9">
        <label>cstddef</label>
      </node>
      <node id="24">
        <label>tostring.h</label>
        <link refid="tostring_8h_source"/>
      </node>
      <node id="27">
        <label>Utils.h</label>
        <link refid="_utils_8h_source"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>FunctionLogger.h</label>
        <link refid="_function_logger_8h_source"/>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Value.h</label>
        <link refid="_value_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>NoCopyable.h</label>
        <link refid="_no_copyable_8h_source"/>
      </node>
      <node id="26">
        <label>LinuxColors.h</label>
        <link refid="_linux_colors_8h_source"/>
      </node>
      <node id="3">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_registers_usage_8cpp_1a4ca337b8557619343ca4e59487678458" prot="public" static="no" mutable="no">
        <type><ref refid="struct_reg" kindref="compound">Reg</ref></type>
        <definition>Reg GeneralPurposeRegs[]</definition>
        <argsstring>[]</argsstring>
        <name>GeneralPurposeRegs</name>
        <initializer>= {
{ RAX, FREE, NotAllocatable, 0 }, 

{ RDI, FREE, Allocatable,    7 }, 
{ RSI, FREE, Allocatable,    6 }, 
{ RDX, FREE, Allocatable,    2}, 
{ RCX, FREE, Allocatable,    1 }, 
{ R8,  FREE, Allocatable,    8 }, 
{ R9,  FREE, Allocatable,    9 },

{ RSP, BUSY, NotAllocatable, 4 },

{ RBX, FREE, Allocatable,    3 }, 
{ RBP, BUSY, NotAllocatable, 5 }, 

{ R10, FREE, Allocatable,    10}, 
{ R11, FREE, Allocatable,    11 }, 
{ R12, FREE, Allocatable,    12 }, 
{ R13, FREE, Allocatable,    13 }, 
{ R14, FREE, Allocatable,    14 }, 
{ R15, FREE, Allocatable,    15 }, 
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/RegistersUsage.cpp" line="12" column="5" bodyfile="src/IR/TranslateTox86/RegistersUsage.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_registers_usage_8cpp_1ad0514685366ee269697f53fde1235be5" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int NUMBER_OF_REGS</definition>
        <argsstring></argsstring>
        <name>NUMBER_OF_REGS</name>
        <initializer>= sizeof(GeneralPurposeRegs) / sizeof(<ref refid="struct_reg" kindref="compound">Reg</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/RegistersUsage.cpp" line="35" column="11" bodyfile="src/IR/TranslateTox86/RegistersUsage.cpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_registers_usage_8cpp_1a3df6809b16e74095a6de3d4b805688a0" prot="public" static="yes" mutable="no">
        <type>stack&lt; <ref refid="struct_reg" kindref="compound">Reg</ref> * &gt;</type>
        <definition>stack&lt;Reg*&gt; FreeRegs</definition>
        <argsstring></argsstring>
        <name>FreeRegs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/RegistersUsage.cpp" line="39" column="16" bodyfile="src/IR/TranslateTox86/RegistersUsage.cpp" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_registers_usage_8cpp_1a11f89ea657ceb67914e0156860e99dea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int ResetRegisters</definition>
        <argsstring>()</argsstring>
        <name>ResetRegisters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/RegistersUsage.cpp" line="41" column="5" bodyfile="src/IR/TranslateTox86/RegistersUsage.cpp" bodystart="41" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="_registers_usage_8cpp_1a725f0014f3be4d65d01ffd02d71cb8e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_reg" kindref="compound">Reg</ref> *</type>
        <definition>Reg* GetReg</definition>
        <argsstring>(int number)</argsstring>
        <name>GetReg</name>
        <param>
          <type>int</type>
          <declname>number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/RegistersUsage.cpp" line="57" column="5" bodyfile="src/IR/TranslateTox86/RegistersUsage.cpp" bodystart="57" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="_registers_usage_8cpp_1a0e50906d74eb57d20cfca2224eee7ff1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* GetRegName</definition>
        <argsstring>(int reg)</argsstring>
        <name>GetRegName</name>
        <param>
          <type>int</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/RegistersUsage.cpp" line="63" column="12" bodyfile="src/IR/TranslateTox86/RegistersUsage.cpp" bodystart="63" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="_registers_usage_8cpp_1acf0faddab391c031ef1e0740b39c5993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int PrintReg</definition>
        <argsstring>(int number)</argsstring>
        <name>PrintReg</name>
        <param>
          <type>int</type>
          <declname>number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/RegistersUsage.cpp" line="91" column="5" bodyfile="src/IR/TranslateTox86/RegistersUsage.cpp" bodystart="91" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="_registers_usage_8cpp_1aef0ff938b99d54c9f324f0b02f3e287b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_reg" kindref="compound">Reg</ref> *</type>
        <definition>Reg* AllocateReg</definition>
        <argsstring>()</argsstring>
        <name>AllocateReg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/RegistersUsage.cpp" line="104" column="5" bodyfile="src/IR/TranslateTox86/RegistersUsage.cpp" bodystart="104" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="_registers_usage_8cpp_1a54b4da54363ec2e5e80553479057f05f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int FreeAllocatableReg</definition>
        <argsstring>(Reg *reg)</argsstring>
        <name>FreeAllocatableReg</name>
        <param>
          <type><ref refid="struct_reg" kindref="compound">Reg</ref> *</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/RegistersUsage.cpp" line="148" column="12" bodyfile="src/IR/TranslateTox86/RegistersUsage.cpp" bodystart="148" bodyend="157" declfile="src/IR/TranslateTox86/RegistersUsage.cpp" declline="131" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="_registers_usage_8cpp_1ab6d471e4c9c857ddd853f8881bd3db19" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int FreeNotAllocatableReg</definition>
        <argsstring>(Reg *reg)</argsstring>
        <name>FreeNotAllocatableReg</name>
        <param>
          <type><ref refid="struct_reg" kindref="compound">Reg</ref> *</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/RegistersUsage.cpp" line="159" column="12" bodyfile="src/IR/TranslateTox86/RegistersUsage.cpp" bodystart="159" bodyend="167" declfile="src/IR/TranslateTox86/RegistersUsage.cpp" declline="132" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="_registers_usage_8cpp_1acfcde587fcdb8ecdc22e3b2deea7eaa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int FreeReg</definition>
        <argsstring>(int reg_number)</argsstring>
        <name>FreeReg</name>
        <param>
          <type>int</type>
          <declname>reg_number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/TranslateTox86/RegistersUsage.cpp" line="134" column="5" bodyfile="src/IR/TranslateTox86/RegistersUsage.cpp" bodystart="134" bodyend="146"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;RegistersUsage.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_instructions_8h" kindref="compound">Instructions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CommonEnums.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LogMacroses.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><ref refid="struct_reg" kindref="compound">Reg</ref><sp/>GeneralPurposeRegs[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{<sp/>RAX,<sp/>FREE,<sp/>NotAllocatable,<sp/>0<sp/>},<sp/></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">{<sp/>RDI,<sp/>FREE,<sp/>Allocatable,<sp/><sp/><sp/><sp/>7<sp/>},<sp/></highlight></codeline>
<codeline lineno="16"><highlight class="normal">{<sp/>RSI,<sp/>FREE,<sp/>Allocatable,<sp/><sp/><sp/><sp/>6<sp/>},<sp/></highlight></codeline>
<codeline lineno="17"><highlight class="normal">{<sp/>RDX,<sp/>FREE,<sp/>Allocatable,<sp/><sp/><sp/><sp/>2},<sp/></highlight></codeline>
<codeline lineno="18"><highlight class="normal">{<sp/>RCX,<sp/>FREE,<sp/>Allocatable,<sp/><sp/><sp/><sp/>1<sp/>},<sp/></highlight></codeline>
<codeline lineno="19"><highlight class="normal">{<sp/>R8,<sp/><sp/>FREE,<sp/>Allocatable,<sp/><sp/><sp/><sp/>8<sp/>},<sp/></highlight></codeline>
<codeline lineno="20"><highlight class="normal">{<sp/>R9,<sp/><sp/>FREE,<sp/>Allocatable,<sp/><sp/><sp/><sp/>9<sp/>},</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">{<sp/>RSP,<sp/>BUSY,<sp/>NotAllocatable,<sp/>4<sp/>},</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">{<sp/>RBX,<sp/>FREE,<sp/>Allocatable,<sp/><sp/><sp/><sp/>3<sp/>},<sp/></highlight></codeline>
<codeline lineno="25"><highlight class="normal">{<sp/>RBP,<sp/>BUSY,<sp/>NotAllocatable,<sp/>5<sp/>},<sp/></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">{<sp/>R10,<sp/>FREE,<sp/>Allocatable,<sp/><sp/><sp/><sp/>10},<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal">{<sp/>R11,<sp/>FREE,<sp/>Allocatable,<sp/><sp/><sp/><sp/>11<sp/>},<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal">{<sp/>R12,<sp/>FREE,<sp/>Allocatable,<sp/><sp/><sp/><sp/>12<sp/>},<sp/></highlight></codeline>
<codeline lineno="30"><highlight class="normal">{<sp/>R13,<sp/>FREE,<sp/>Allocatable,<sp/><sp/><sp/><sp/>13<sp/>},<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="normal">{<sp/>R14,<sp/>FREE,<sp/>Allocatable,<sp/><sp/><sp/><sp/>14<sp/>},<sp/></highlight></codeline>
<codeline lineno="32"><highlight class="normal">{<sp/>R15,<sp/>FREE,<sp/>Allocatable,<sp/><sp/><sp/><sp/>15<sp/>},<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal">};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NUMBER_OF_REGS<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(GeneralPurposeRegs)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_reg" kindref="compound">Reg</ref>);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stack&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><sp/>stack<sp/>&lt;Reg*&gt;<sp/>FreeRegs;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ResetRegisters<sp/>()</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>NUMBER_OF_REGS;<sp/>i++)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>RSP)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_reg" kindref="compound">Reg</ref>*<sp/><sp/><sp/><sp/>reg<sp/>=<sp/>GetReg<sp/>(i);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(reg);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FreeReg<sp/>(i);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><ref refid="struct_reg" kindref="compound">Reg</ref>*<sp/>GetReg<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(number<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>number<sp/>&lt;<sp/>NUMBER_OF_REGS);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GeneralPurposeRegs<sp/>+<sp/>number;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>GetRegName<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(reg)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RAX:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%rax&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RDI:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%rdi&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RSI:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%rsi&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RDX:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%rdx&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RCX:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%rcx&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>R8:<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%r8&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>R9:<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%r9&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RSP:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%rsp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RBX:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%rbx&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>RBP:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%rbp&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>R10:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%r10&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>R11:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%r11&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>R12:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%r12&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>R13:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%r13&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>R14:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%r14&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>R15:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;%r15&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;unknown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>PrintReg<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(number<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>number<sp/>&lt;<sp/>NUMBER_OF_REGS);<sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_reg" kindref="compound">Reg</ref>*<sp/>reg<sp/>=<sp/><sp/>GeneralPurposeRegs<sp/>+<sp/>number;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>printf<sp/>(</highlight><highlight class="stringliteral">&quot;%s,<sp/>status<sp/>%s,<sp/>\n\t&quot;</highlight><highlight class="normal">,<sp/>GetRegName<sp/>(reg-&gt;number),<sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reg-&gt;status<sp/>==<sp/><sp/>BUSY<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;BUSY&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;FREE&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><ref refid="struct_reg" kindref="compound">Reg</ref>*<sp/>AllocateReg<sp/>()</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FreeRegs.empty())</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(0);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_reg" kindref="compound">Reg</ref>*<sp/><sp/><sp/><sp/>free_reg<sp/>=<sp/>FreeRegs.top();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(free_reg);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(free_reg-&gt;allocation_status<sp/>==<sp/>Allocatable);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>FreeRegs.pop();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(free_reg-&gt;status<sp/>!=<sp/>FREE)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FreeRegs.empty())</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(0);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free_reg<sp/>=<sp/>FreeRegs.top();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FreeRegs.pop();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(free_reg);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(free_reg-&gt;allocation_status<sp/>==<sp/>Allocatable);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>free_reg;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FreeAllocatableReg<sp/><sp/><sp/><sp/>(<ref refid="struct_reg" kindref="compound">Reg</ref>*<sp/>reg);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FreeNotAllocatableReg<sp/>(<ref refid="struct_reg" kindref="compound">Reg</ref>*<sp/>reg);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FreeReg<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reg_number)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_reg" kindref="compound">Reg</ref>*<sp/><sp/><sp/><sp/>reg<sp/>=<sp/>GetReg<sp/>(reg_number);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(reg);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reg-&gt;allocation_status<sp/>==<sp/>Allocatable)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FreeAllocatableReg<sp/>(reg);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reg-&gt;allocation_status<sp/>==<sp/>NotAllocatable)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FreeNotAllocatableReg<sp/>(reg);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FreeAllocatableReg<sp/>(<ref refid="struct_reg" kindref="compound">Reg</ref>*<sp/>reg)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(reg);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(reg-&gt;allocation_status<sp/>==<sp/>Allocatable);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>FreeRegs.push<sp/>(reg);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>reg-&gt;status<sp/>=<sp/>FREE;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FreeNotAllocatableReg<sp/>(<ref refid="struct_reg" kindref="compound">Reg</ref>*<sp/>reg)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(reg);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>assert<sp/>(reg-&gt;allocation_status<sp/>==<sp/>NotAllocatable);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>reg-&gt;status<sp/>=<sp/>FREE;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SUCCESS;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
    </programlisting>
    <location file="src/IR/TranslateTox86/RegistersUsage.cpp"/>
  </compounddef>
</doxygen>
