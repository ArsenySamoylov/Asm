<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="class_base_block" kind="class" language="C++" prot="public">
    <compoundname>BaseBlock</compoundname>
    <basecompoundref refid="class_value" prot="public" virt="non-virtual">Value</basecompoundref>
    <includes refid="_value_8h" local="no">Value.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_base_block_1a7dfc76b50a5c2a4257e6a52d17043612" prot="private" static="no" mutable="no">
        <type><ref refid="class_value_arr" kindref="compound">ValueArr</ref>&lt; <ref refid="class_instruction" kindref="compound">Instruction</ref> &gt;</type>
        <definition>ValueArr&lt;Instruction&gt; BaseBlock::inst_arr</definition>
        <argsstring></argsstring>
        <name>inst_arr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Value/Value.h" line="104" column="19" bodyfile="src/IR/Value/Value.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_base_block_1a9fd10bb1e3a87dfec36809ace3dccc35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BaseBlock::BaseBlock</definition>
        <argsstring>(name_t name_param)</argsstring>
        <name>BaseBlock</name>
        <param>
          <type>name_t</type>
          <declname>name_param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Value/Value.h" line="107" column="9" bodyfile="src/IR/Value/Value.cpp" bodystart="24" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="class_base_block_1a7935de0a215a4cf1bdb3d86e740272d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BaseBlock::~BaseBlock</definition>
        <argsstring>() override</argsstring>
        <name>~BaseBlock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Value/Value.h" line="108" column="8" bodyfile="src/IR/Value/Value.cpp" bodystart="28" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="class_base_block_1ab90a362d8bcd71c015102a5965843d79" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BaseBlock::dump</definition>
        <argsstring>() const override</argsstring>
        <name>dump</name>
        <reimplements refid="class_value_1ad58adc30ecd6e33f8344b76bb94ad9a9">dump</reimplements>
        <briefdescription>
<para>Print <ref refid="class_value" kindref="compound">Value</ref> in human-readable format to file DUMP. </para>
        </briefdescription>
        <detaileddescription>
<para>Print <ref refid="class_value" kindref="compound">Value</ref> in human-readable format to file DUMP. PRINT_NEW_LINES regulates if printed <ref refid="class_value" kindref="compound">Value</ref> generates extra new line chars </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Value/Value.h" line="110" column="19" bodyfile="src/IR/DumpIR/DumpIR.cpp" bodystart="117" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="class_base_block_1ab680e5829bf197f7828b6261ac62e5f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>ValueType</type>
        <definition>ValueType BaseBlock::get_type</definition>
        <argsstring>() const override</argsstring>
        <name>get_type</name>
        <reimplements refid="class_value_1a81566c2e0f8d9c81fe18ad4ae251e471">get_type</reimplements>
        <briefdescription>
<para>Get <ref refid="class_value" kindref="compound">Value</ref> type. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>debug purpose only </para>
</simplesect>
<simplesect kind="return"><para>ValueType </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Value/Value.h" line="111" column="19" bodyfile="src/IR/Value/Value.cpp" bodystart="34" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="class_base_block_1ace2f438ad119bd610183103a39131101" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BaseBlock::translate_x86</definition>
        <argsstring>(Context *ctx) const override</argsstring>
        <name>translate_x86</name>
        <reimplements refid="class_value_1a5c80febbb8171e7c60cdd1598c47fe53">translate_x86</reimplements>
        <param>
          <type><ref refid="struct_context" kindref="compound">Context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Translate <ref refid="class_value" kindref="compound">Value</ref> to x86 code. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ctx</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Value/Value.h" line="113" column="14" bodyfile="src/IR/TranslateTox86/TranslateIRTox86.cpp" bodystart="312" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="class_base_block_1aaf4bb16294f85cab75262a9fc80ca83c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void BaseBlock::set_storage</definition>
        <argsstring>() const override</argsstring>
        <name>set_storage</name>
        <reimplements refid="class_value_1a8bc56c2cc9d6cb4aade7084277d9df26">set_storage</reimplements>
        <briefdescription>
<para>Set the <emphasis>storage</emphasis> </para>
        </briefdescription>
        <detaileddescription>
<para>This functions sets <emphasis>storage_type</emphasis> for value In <ref refid="class_function" kindref="compound">Function</ref> and <ref refid="class_base_block" kindref="compound">BaseBlock</ref> this function call this this function for all objects from their ValueArr&lt;&gt; members <simplesect kind="note"><para>for <ref refid="class_constant" kindref="compound">Constant</ref> this function only checks <emphasis>storage_type</emphasis> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Value/Value.h" line="114" column="14" bodyfile="src/IR/Storage/Storage.cpp" bodystart="143" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="class_base_block_1a496bc6a804fa84ecee9882e2970e17ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_instruction" kindref="compound">Instruction</ref> *</type>
        <definition>Instruction * BaseBlock::add_instr</definition>
        <argsstring>(Instruction *instr)</argsstring>
        <name>add_instr</name>
        <param>
          <type><ref refid="class_instruction" kindref="compound">Instruction</ref> *</type>
          <declname>instr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Value/Value.h" line="116" column="21" bodyfile="src/IR/Value/Value.cpp" bodystart="40" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="class_base_block_1af7028d741df123fdbaecf4bcd42cdd12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BaseBlock::set_address</definition>
        <argsstring>(address_t address) const</argsstring>
        <name>set_address</name>
        <param>
          <type>address_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/IR/Value/Value.h" line="117" column="14" bodyfile="src/IR/Value/Value.cpp" bodystart="47" bodyend="51"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Block of Instructions. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_base_block" kindref="compound">BaseBlock</ref> is array of Instructions that will be executed continuously. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>BaseBlock</label>
        <link refid="class_base_block"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>NoCopyable</label>
        <link refid="class_no_copyable"/>
      </node>
      <node id="2">
        <label>Value</label>
        <link refid="class_value"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4">
        <label>Storage</label>
        <link refid="class_storage"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>BaseBlock</label>
        <link refid="class_base_block"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>NoCopyable</label>
        <link refid="class_no_copyable"/>
      </node>
      <node id="2">
        <label>Value</label>
        <link refid="class_value"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>storage</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/IR/Value/Value.h" line="101" column="1" bodyfile="src/IR/Value/Value.h" bodystart="102" bodyend="118"/>
    <listofallmembers>
      <member refid="class_base_block_1a496bc6a804fa84ecee9882e2970e17ba" prot="public" virt="non-virtual"><scope>BaseBlock</scope><name>add_instr</name></member>
      <member refid="class_base_block_1a9fd10bb1e3a87dfec36809ace3dccc35" prot="public" virt="non-virtual"><scope>BaseBlock</scope><name>BaseBlock</name></member>
      <member refid="class_base_block_1ab90a362d8bcd71c015102a5965843d79" prot="public" virt="virtual"><scope>BaseBlock</scope><name>dump</name></member>
      <member refid="class_value_1a86a3eef266571401ec6c189abaaf106d" prot="public" virt="non-virtual"><scope>BaseBlock</scope><name>get_name</name></member>
      <member refid="class_value_1ad8439f42b7727f74160f4d4233300b73" prot="public" virt="non-virtual"><scope>BaseBlock</scope><name>get_storage</name></member>
      <member refid="class_base_block_1ab680e5829bf197f7828b6261ac62e5f7" prot="public" virt="virtual"><scope>BaseBlock</scope><name>get_type</name></member>
      <member refid="class_base_block_1a7dfc76b50a5c2a4257e6a52d17043612" prot="private" virt="non-virtual"><scope>BaseBlock</scope><name>inst_arr</name></member>
      <member refid="class_value_1a62d78645b07ba16cce8dbaec863b13ab" prot="protected" virt="non-virtual"><scope>BaseBlock</scope><name>name</name></member>
      <member refid="class_no_copyable_1ade9c96e3484b122001dd4f42e6c28047" prot="public" virt="non-virtual"><scope>BaseBlock</scope><name>NoCopyable</name></member>
      <member refid="class_no_copyable_1a00d3c509a77e0c5e25d92714551c54d1" prot="public" virt="non-virtual"><scope>BaseBlock</scope><name>NoCopyable</name></member>
      <member refid="class_no_copyable_1a976985434b31929677d366614d803157" prot="public" virt="non-virtual"><scope>BaseBlock</scope><name>operator=</name></member>
      <member refid="class_value_1ab68f4bce225da0bdba8085c85b90ca0f" prot="public" virt="non-virtual"><scope>BaseBlock</scope><name>put_to_reg</name></member>
      <member refid="class_base_block_1af7028d741df123fdbaecf4bcd42cdd12" prot="public" virt="non-virtual"><scope>BaseBlock</scope><name>set_address</name></member>
      <member refid="class_base_block_1aaf4bb16294f85cab75262a9fc80ca83c" prot="public" virt="virtual"><scope>BaseBlock</scope><name>set_storage</name></member>
      <member refid="class_value_1a3cb086c23a5174753c024a49ed180ab3" prot="protected" virt="non-virtual"><scope>BaseBlock</scope><name>storage</name></member>
      <member refid="class_base_block_1ace2f438ad119bd610183103a39131101" prot="public" virt="virtual"><scope>BaseBlock</scope><name>translate_x86</name></member>
      <member refid="class_value_1a0353abaaf3f5a0bf5a01c8daad238449" prot="protected" virt="non-virtual"><scope>BaseBlock</scope><name>type</name></member>
      <member refid="class_value_1a34b3fd7da89c8da39158746671fff0f6" prot="public" virt="non-virtual"><scope>BaseBlock</scope><name>Value</name></member>
      <member refid="class_base_block_1a7935de0a215a4cf1bdb3d86e740272d1" prot="public" virt="non-virtual"><scope>BaseBlock</scope><name>~BaseBlock</name></member>
      <member refid="class_no_copyable_1a6704c3bd291a78054b26b83a63af0756" prot="public" virt="virtual"><scope>BaseBlock</scope><name>~NoCopyable</name></member>
      <member refid="class_value_1a71443c24b0e8b94a71c3315b11c30e98" prot="public" virt="virtual"><scope>BaseBlock</scope><name>~Value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
