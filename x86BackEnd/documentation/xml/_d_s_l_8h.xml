<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_d_s_l_8h" kind="file" language="C++">
    <compoundname>DSL.h</compoundname>
    <includes refid="_log_macroses_8h" local="yes">LogMacroses.h</includes>
    <includedby refid="_ast_to_i_r_8cpp" local="yes">src/IR/AstToIR/AstToIR.cpp</includedby>
    <includedby refid="_lexical_ctx_8cpp" local="yes">src/Legacy/Common/LexicalCtx/LexicalCtx.cpp</includedby>
    <includedby refid="_get_std_8cpp" local="yes">src/Legacy/Common/StandartAWP/GetStd.cpp</includedby>
    <includedby refid="_put_std_8cpp" local="yes">src/Legacy/Common/StandartAWP/PutStd.cpp</includedby>
    <includedby refid="_graph_vis_8cpp" local="yes">src/Legacy/Common/Utils/GraphVis.cpp</includedby>
    <includedby refid="_lang_utils_8cpp" local="yes">src/Legacy/Common/Utils/LangUtils.cpp</includedby>
    <includedby refid="_set_token_tree_8cpp" local="yes">src/Legacy/SetTokenTree.cpp</includedby>
    <includedby refid="_translate_to_asm_8cpp" local="yes">src/Legacy/TranslateToAsm.cpp</includedby>
    <incdepgraph>
      <node id="13">
        <label>stdarg.h</label>
      </node>
      <node id="10">
        <label>CommonEnums.h</label>
        <link refid="_common_enums_8h_source"/>
      </node>
      <node id="4">
        <label>errno.h</label>
      </node>
      <node id="6">
        <label>Logger.h</label>
        <link refid="_logger_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>LogMacroses.h</label>
        <link refid="_log_macroses_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/Legacy/Common/Structures/DSL.h</label>
        <link refid="_d_s_l_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="7">
        <label>LogConfig.h</label>
        <link refid="_log_config_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="8">
        <label>tostring.h</label>
        <link refid="tostring_8h_source"/>
      </node>
      <node id="12">
        <label>Utils.h</label>
        <link refid="_utils_8h_source"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>FunctionLogger.h</label>
        <link refid="_function_logger_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>stdio.h</label>
      </node>
      <node id="11">
        <label>LinuxColors.h</label>
        <link refid="_linux_colors_8h_source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_d_s_l_8h_1abf5153fd41479b942dc8c8ad63bef0a8" prot="public" static="no">
        <name>TYPE</name>
        <param><defname>node</defname></param>
        <initializer>node-&gt;type</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="4" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="4" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1a28b78b9c1688da857c1bf0e0ea49e176" prot="public" static="no">
        <name>VALUE</name>
        <param><defname>node</defname></param>
        <initializer>node-&gt;value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="5" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1af9fb9185ecf739605eee31f480c28c75" prot="public" static="no">
        <name>LEFT</name>
        <param><defname>node</defname></param>
        <initializer>node-&gt;left_child</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="7" column="10" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1a380515ccd869d548677fca725d285480" prot="public" static="no">
        <name>RIGHT</name>
        <param><defname>node</defname></param>
        <initializer>node-&gt;right_child</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="8" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1ab8d413d0028bdd12a3d7aef90b25fa5b" prot="public" static="no">
        <name>NewConstNode</name>
        <param><defname>value</defname></param>
        <initializer>NewDefNode (CONSTANT, {.t_constant = value})</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="11" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1a2f620e54c0b22a5b7f663888921a6f77" prot="public" static="no">
        <name>NewOpNode</name>
        <param><defname>op</defname></param>
        <param><defname>left</defname></param>
        <param><defname>right</defname></param>
        <initializer>NewDefNode (OPERATOR, {.t_operator = op}, left, right)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="12" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1ae2f4e889a387ddf5a185ac303f36ce85" prot="public" static="no">
        <name>NewFunctNode</name>
        <param><defname>functor</defname></param>
        <param><defname>left</defname></param>
        <param><defname>right</defname></param>
        <initializer>NewDefNode (FUNCTOR,  {.t_operator = functor}, left, right)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="13" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1a4297d3c7b350741bd108e6bb43c54057" prot="public" static="no">
        <name>TYPE_IS</name>
        <param><defname>node</defname></param>
        <param><defname>t_type</defname></param>
        <initializer>((node) &amp;&amp; (node-&gt;type == t_type) ? true : false)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="15" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1a438400b9468b1ec582a76b2932655d66" prot="public" static="no">
        <name>CONST</name>
        <param><defname>node</defname></param>
        <initializer>node-&gt;value.t_constant</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="17" column="15" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1ab76a1b3048d9481b48033a4c9f26d96f" prot="public" static="no">
        <name>LEFT_CONST</name>
        <param><defname>node</defname></param>
        <initializer>CONST( LEFT(node))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="18" column="10" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1a83c7a6658b80bfd7e10a74cdad180cac" prot="public" static="no">
        <name>RIGHT_CONST</name>
        <param><defname>node</defname></param>
        <initializer>CONST(RIGHT(node))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="19" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1a5750391ca5250a46647579019ec69b74" prot="public" static="no">
        <name>OP</name>
        <param><defname>node</defname></param>
        <initializer>node-&gt;value.t_operator</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="21" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1ac69c093902eadd4df0f59976f6f18f76" prot="public" static="no">
        <name>VAR</name>
        <param><defname>node</defname></param>
        <initializer>node-&gt;value.t_variable</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="22" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1a6053036caa25b658bc88974e265374c7" prot="public" static="no">
        <name>INSTR</name>
        <param><defname>node</defname></param>
        <initializer>node-&gt;value.t_instruction</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="24" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1af31c4eeb82ace1d0b1f735a7ffdcd5ee" prot="public" static="no">
        <name>INSTR_STR</name>
        <param><defname>node</defname></param>
        <initializer>(IS_INSTRUCTION(node) ? INSTRUCTIONS[INSTR(node)] : &quot;NOT A INSTRUCTION&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="25" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1afdc2a48308d1b6391d5748cc0eec7d3e" prot="public" static="no">
        <name>NAME_PTR</name>
        <param><defname>node</defname></param>
        <initializer>VALUE(node).t_name_ptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="27" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1ae53477e5d677fca68b05cfc941881384" prot="public" static="no">
        <name>NAME_ID</name>
        <param><defname>node</defname></param>
        <initializer>VALUE(node).t_name_id</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="28" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1a39921226a5772661e304883844faa382" prot="public" static="no">
        <name>RET_TYPE</name>
        <param><defname>node</defname></param>
        <initializer>VALUE(node).t_function_ret_type</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="29" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1a16a84c9e8624a682d5892dcc88c54742" prot="public" static="no">
        <name>INITIALIZATOR</name>
        <param><defname>node</defname></param>
        <initializer>VALUE(node).t_initializator</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="31" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1a764231e1cd60b89a8a1c4bf921aab094" prot="public" static="no">
        <name>NATIVE_FUNC</name>
        <param><defname>node</defname></param>
        <initializer>VALUE(node).t_native_function</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="32" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1a158e72a5f3f52febb7cf8a3183052ef3" prot="public" static="no">
        <name>NUM_OF_VARS</name>
        <param><defname>node</defname></param>
        <initializer>VALUE(node).t_number_of_variables</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="34" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1abe88b69414e920aeeb5ba569f5328e3d" prot="public" static="no">
        <name>VAR_NUMBER</name>
        <param><defname>node</defname></param>
        <initializer>VALUE(node).t_varible_number</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="35" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1aea68850acd5fd924a0098753f8436032" prot="public" static="no">
        <name>LABEL_PTR</name>
        <param><defname>node</defname></param>
        <initializer>node-&gt;t_label_ptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="37" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1a7ba8dd15973858ae192003c04cac11f8" prot="public" static="no">
        <name>IS_OP</name>
        <param><defname>node</defname></param>
        <initializer>( (node) &amp;&amp; (node-&gt;type == OPERATOR ) ? true : false )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="56" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1a0ecafa5091b52842355c2aa29afe46a5" prot="public" static="no">
        <name>IS_CONST</name>
        <param><defname>node</defname></param>
        <initializer>( (node) &amp;&amp; (node-&gt;type == CONSTANT ) ? true : false )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="57" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1ac23c0cdf8a5f3a09af126d7e3bf9f653" prot="public" static="no">
        <name>IS_VAR</name>
        <param><defname>node</defname></param>
        <initializer>( (node) &amp;&amp; (node-&gt;type == VARIABLE ) ? true : false )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="58" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1a918660e106bf8f7eb776a9631e87db17" prot="public" static="no">
        <name>IS_FUNC</name>
        <param><defname>node</defname></param>
        <initializer>( (node) &amp;&amp; (node-&gt;type == FUNCTION ) ? true : false )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="59" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1a64b0b334c2759322c49fe842b38e5511" prot="public" static="no">
        <name>IS_STATEMENT</name>
        <param><defname>node</defname></param>
        <initializer>( (node) &amp;&amp; (node-&gt;type == STATEMENT) ? true : false )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="60" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1a9dca7b4aeb6e2f61e61927b777b90862" prot="public" static="no">
        <name>IS_ASSIGMENT</name>
        <param><defname>node</defname></param>
        <initializer>( (node) &amp;&amp; (node-&gt;type == ASSIGMENT) ? true : false )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="61" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_d_s_l_8h_1a401f2e01d8fdc2bc658db0520f5e85f9" prot="public" static="no">
        <name>IS_INSTRUCTION</name>
        <param><defname>node</defname></param>
        <initializer>((node) &amp;&amp; (node-&gt;type == INSTRUCTION) ? true : false)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Legacy/Common/Structures/DSL.h" line="62" column="9" bodyfile="src/Legacy/Common/Structures/DSL.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LogMacroses.h&quot;</highlight></codeline>
<codeline lineno="4"><highlight class="preprocessor">#define<sp/>TYPE(node)<sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;type<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VALUE(node)<sp/><sp/><sp/><sp/><sp/>node-&gt;value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>LEFT(node)<sp/><sp/><sp/>node-&gt;left_child</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RIGHT(node)<sp/><sp/><sp/>node-&gt;right_child</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="preprocessor">#define<sp/>NewConstNode(value)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NewDefNode<sp/>(CONSTANT,<sp/>{.t_constant<sp/>=<sp/>value})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NewOpNode(op,<sp/>left,<sp/>right)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NewDefNode<sp/>(OPERATOR,<sp/>{.t_operator<sp/>=<sp/>op},<sp/>left,<sp/>right)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NewFunctNode(functor,<sp/>left,<sp/>right)<sp/>NewDefNode<sp/>(FUNCTOR,<sp/><sp/>{.t_operator<sp/>=<sp/>functor},<sp/>left,<sp/>right)</highlight></codeline>
<codeline lineno="15"><highlight class="preprocessor">#define<sp/>TYPE_IS(node,<sp/>t_type)<sp/>((node)<sp/>&amp;&amp;<sp/>(node-&gt;type<sp/>==<sp/>t_type)<sp/>?<sp/>true<sp/>:<sp/>false)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/><sp/><sp/>CONST(node)<sp/><sp/>node-&gt;value.t_constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>LEFT_CONST(node)<sp/><sp/>CONST(<sp/>LEFT(node))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RIGHT_CONST(node)<sp/><sp/>CONST(RIGHT(node))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OP(node)<sp/><sp/>node-&gt;value.t_operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VAR(node)<sp/>node-&gt;value.t_variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INSTR(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;value.t_instruction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INSTR_STR(node)<sp/><sp/><sp/><sp/>(IS_INSTRUCTION(node)<sp/>?<sp/>INSTRUCTIONS[INSTR(node)]<sp/>:<sp/>&quot;NOT<sp/>A<sp/>INSTRUCTION&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NAME_PTR(node)<sp/><sp/><sp/><sp/><sp/>VALUE(node).t_name_ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NAME_ID(node)<sp/><sp/><sp/><sp/><sp/><sp/>VALUE(node).t_name_id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RET_TYPE(node)<sp/><sp/><sp/><sp/><sp/>VALUE(node).t_function_ret_type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INITIALIZATOR(node)<sp/>VALUE(node).t_initializator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NATIVE_FUNC(node)<sp/><sp/><sp/>VALUE(node).t_native_function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUM_OF_VARS(node)<sp/><sp/>VALUE(node).t_number_of_variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VAR_NUMBER(node)<sp/><sp/><sp/>VALUE(node).t_varible_number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LABEL_PTR(node)<sp/><sp/><sp/><sp/>node-&gt;t_label_ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>STR(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;value.t_string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="41"><highlight class="comment">#define<sp/><sp/><sp/><sp/><sp/><sp/><sp/>FUNC(node)<sp/><sp/><sp/>node-&gt;value.t_functor</highlight></codeline>
<codeline lineno="42"><highlight class="comment">#define<sp/><sp/>LEFT_FUNC(node)<sp/><sp/><sp/>FUNC(<sp/>LEFT(node))</highlight></codeline>
<codeline lineno="43"><highlight class="comment">#define<sp/>RIGHT_FUNC(node)<sp/><sp/><sp/>FUNC(RIGHT(node))</highlight></codeline>
<codeline lineno="44"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="comment">//<sp/>#define<sp/>OP_IS(op)<sp/>(<sp/>(<sp/>(NODE)<sp/>&amp;&amp;<sp/>(NODE-&gt;type<sp/>==<sp/>OPERATOR)<sp/>&amp;&amp;<sp/>(NODE-&gt;value.t_operator<sp/>==<sp/>op))<sp/>?<sp/>true<sp/>:<sp/>false<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="50"><highlight class="comment">#define<sp/><sp/><sp/><sp/><sp/><sp/><sp/>COPY(node)<sp/><sp/>(<sp/>(node)<sp/>?<sp/>CopyBranch(node)<sp/>:<sp/>nullptr)</highlight></codeline>
<codeline lineno="51"><highlight class="comment">#define<sp/><sp/>COPY_LEFT(node)<sp/><sp/>(<sp/>(node)<sp/>?<sp/>CopyBranch(node-&gt;<sp/>left_child)<sp/>:<sp/>nullptr)</highlight></codeline>
<codeline lineno="52"><highlight class="comment">#define<sp/>COPY_RIGHT(node)<sp/><sp/>(<sp/>(node)<sp/>?<sp/>CopyBranch(node-&gt;right_child)<sp/>:<sp/>nullptr)</highlight></codeline>
<codeline lineno="53"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor">#define<sp/>IS_OP(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(node)<sp/>&amp;&amp;<sp/>(node-&gt;type<sp/>==<sp/>OPERATOR<sp/>)<sp/>?<sp/>true<sp/>:<sp/>false<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_CONST(node)<sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(node)<sp/>&amp;&amp;<sp/>(node-&gt;type<sp/>==<sp/>CONSTANT<sp/>)<sp/>?<sp/>true<sp/>:<sp/>false<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_VAR(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(node)<sp/>&amp;&amp;<sp/>(node-&gt;type<sp/>==<sp/>VARIABLE<sp/>)<sp/>?<sp/>true<sp/>:<sp/>false<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_FUNC(node)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(node)<sp/>&amp;&amp;<sp/>(node-&gt;type<sp/>==<sp/>FUNCTION<sp/>)<sp/>?<sp/>true<sp/>:<sp/>false<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_STATEMENT(node)<sp/><sp/>(<sp/>(node)<sp/>&amp;&amp;<sp/>(node-&gt;type<sp/>==<sp/>STATEMENT)<sp/>?<sp/>true<sp/>:<sp/>false<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_ASSIGMENT(node)<sp/><sp/>(<sp/>(node)<sp/>&amp;&amp;<sp/>(node-&gt;type<sp/>==<sp/>ASSIGMENT)<sp/>?<sp/>true<sp/>:<sp/>false<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_INSTRUCTION(node)<sp/>((node)<sp/>&amp;&amp;<sp/>(node-&gt;type<sp/>==<sp/>INSTRUCTION)<sp/>?<sp/>true<sp/>:<sp/>false)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="64"><highlight class="comment">#define<sp/>IS_ZERO(node)<sp/><sp/>(<sp/>IS_CONST(node)<sp/>&amp;&amp;<sp/>(node-&gt;value.t_constant<sp/>==<sp/>0)<sp/>?<sp/>true<sp/>:<sp/>false<sp/>)<sp/></highlight></codeline>
<codeline lineno="65"><highlight class="comment">#define<sp/>IS_ONE(node)<sp/><sp/><sp/>(<sp/>IS_CONST(node)<sp/>&amp;&amp;<sp/>(node-&gt;value.t_constant<sp/>==<sp/>1)<sp/>?<sp/>true<sp/>:<sp/>false<sp/>)<sp/></highlight></codeline>
<codeline lineno="66"><highlight class="comment">*/</highlight></codeline>
<codeline lineno="68"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="69"><highlight class="comment">#define<sp/>KILL_BRANCHES(node)<sp/>do<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeleteBranch(<sp/>LEFT(node));<sp/><sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DeleteBranch(RIGHT(node));<sp/><sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while(0);<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/Legacy/Common/Structures/DSL.h"/>
  </compounddef>
</doxygen>
