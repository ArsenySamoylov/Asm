<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="_log_macroses_8h" kind="file" language="C++">
    <compoundname>LogMacroses.h</compoundname>
    <includes local="no">iostream</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="_logger_8h" local="yes">Logger.h</includes>
    <includes refid="_function_logger_8h" local="yes">FunctionLogger.h</includes>
    <includes refid="_common_enums_8h" local="yes">CommonEnums.h</includes>
    <includes refid="_linux_colors_8h" local="yes">LinuxColors.h</includes>
    <includes refid="_utils_8h" local="yes">Utils.h</includes>
    <includedby refid="_ars_lib_8h" local="yes">ATC/ArsLib.h</includedby>
    <includedby refid="my__buffer_8cpp" local="yes">ATC/Buffer/my_buffer.cpp</includedby>
    <includedby refid="tostring_8cpp" local="yes">ATC/Logger/tostring.cpp</includedby>
    <includedby refid="_builder_8cpp" local="yes">src/IR/AstToIR/Builder.cpp</includedby>
    <includedby refid="_string_pool_8cpp" local="yes">src/IR/AstToIR/StringPool.cpp</includedby>
    <includedby refid="_value_label_8cpp" local="yes">src/IR/AstToIR/ValueLabel.cpp</includedby>
    <includedby refid="_dump_i_r_8cpp" local="yes">src/IR/DumpIR/DumpIR.cpp</includedby>
    <includedby refid="_i_r_context_8cpp" local="yes">src/IR/TranslateTox86/IRContext.cpp</includedby>
    <includedby refid="_registers_usage_8cpp" local="yes">src/IR/TranslateTox86/RegistersUsage.cpp</includedby>
    <includedby refid="_translate_i_r_tox86_8cpp" local="yes">src/IR/TranslateTox86/TranslateIRTox86.cpp</includedby>
    <includedby refid="_asm_ctx_8cpp" local="yes">src/Legacy/AsmCtx.cpp</includedby>
    <includedby refid="_lexical_ctx_8cpp" local="yes">src/Legacy/Common/LexicalCtx/LexicalCtx.cpp</includedby>
    <includedby refid="_get_std_8cpp" local="yes">src/Legacy/Common/StandartAWP/GetStd.cpp</includedby>
    <includedby refid="_put_std_8cpp" local="yes">src/Legacy/Common/StandartAWP/PutStd.cpp</includedby>
    <includedby refid="_d_s_l_8h" local="yes">src/Legacy/Common/Structures/DSL.h</includedby>
    <includedby refid="_program_8cpp" local="yes">src/Legacy/Common/Structures/Program/Program.cpp</includedby>
    <includedby refid="_name_table_8cpp" local="yes">src/Legacy/Common/Structures/Tabels/NameTable.cpp</includedby>
    <includedby refid="_tabels_8cpp" local="yes">src/Legacy/Common/Structures/Tabels/Tabels.cpp</includedby>
    <includedby refid="_token_8cpp" local="yes">src/Legacy/Common/Structures/Token/Token.cpp</includedby>
    <includedby refid="_graph_vis_8cpp" local="yes">src/Legacy/Common/Utils/GraphVis.cpp</includedby>
    <includedby refid="_lang_utils_8cpp" local="yes">src/Legacy/Common/Utils/LangUtils.cpp</includedby>
    <includedby refid="_set_token_tree_8cpp" local="yes">src/Legacy/SetTokenTree.cpp</includedby>
    <includedby refid="_translate_to_asm_8cpp" local="yes">src/Legacy/TranslateToAsm.cpp</includedby>
    <includedby refid="src_2main_8cpp" local="yes">src/main.cpp</includedby>
    <incdepgraph>
      <node id="12">
        <label>stdarg.h</label>
      </node>
      <node id="9">
        <label>CommonEnums.h</label>
        <link refid="_common_enums_8h_source"/>
      </node>
      <node id="3">
        <label>errno.h</label>
      </node>
      <node id="5">
        <label>Logger.h</label>
        <link refid="_logger_8h_source"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>ATC/Logger/LogMacroses.h</label>
        <link refid="_log_macroses_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
      <node id="6">
        <label>LogConfig.h</label>
        <link refid="_log_config_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="7">
        <label>tostring.h</label>
        <link refid="tostring_8h_source"/>
      </node>
      <node id="11">
        <label>Utils.h</label>
        <link refid="_utils_8h_source"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>FunctionLogger.h</label>
        <link refid="_function_logger_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>stdio.h</label>
      </node>
      <node id="10">
        <label>LinuxColors.h</label>
        <link refid="_linux_colors_8h_source"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>ATC/Logger/LogMacroses.h</label>
        <link refid="_log_macroses_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/Legacy/Common/Structures/DSL.h</label>
        <link refid="_d_s_l_8h_source"/>
      </node>
      <node id="2">
        <label>ATC/ArsLib.h</label>
        <link refid="_ars_lib_8h_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="_log_macroses_8h_1a3aa431d89913e2b99d29d844e5440e12" prot="public" static="no">
        <name>report</name>
        <param><defname>format</defname></param>
        <param><defname>...</defname></param>
        <initializer>printf (yellowcolor &quot;(%s:%d)&quot; resetconsole &quot; &quot; format, __FILE__, __LINE__ __VA_OPT__(,) __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="14" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1a951d4516410f5848849d2cf017ea6286" prot="public" static="no">
        <name>LOG__</name>
        <initializer>Logger::getInstance()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="15" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1a4778f3d3543b62c61928720ae9f9d59b" prot="public" static="no">
        <name>log_function</name>
        <initializer>LOG__.log(&quot;%s: &quot;, __func__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="17" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1a159ca84d25a5487d8e81e4438725df19" prot="public" static="no">
        <name>LOG</name>
        <initializer>log_function;   LOG__</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="18" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1acc93613d406017e99744bc9d133d1eb0" prot="public" static="no">
        <name>flog</name>
        <initializer>LOG__.log(&quot;&quot;); LOG__</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="21" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1a66e5698f7365d89a0bb657db6da75c02" prot="public" static="no">
        <name>logf</name>
        <param><defname>format</defname></param>
        <param><defname>...</defname></param>
        <initializer>LOG__.log(format __VA_OPT__(,) __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="22" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1a64da409cc8540790b0b460e17ef7c180" prot="public" static="no">
        <name>logf_ni</name>
        <param><defname>format</defname></param>
        <param><defname>...</defname></param>
        <initializer>LOG__.log_no_indent(format __VA_OPT__(,) __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="23" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1a05b74d67856a391add2aecd05740f32f" prot="public" static="no">
        <name>CALLOC</name>
        <param><defname>number_of_elements</defname></param>
        <param><defname>size_of_element</defname></param>
        <initializer>LOG__.CAL_LOG   (number_of_elements, size_of_element, __FILE__, __func__, __LINE__);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="26" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1a4b28dc90351783763ca28132cf89ea70" prot="public" static="no">
        <name>KILL</name>
        <param><defname>ptr</defname></param>
        <initializer>LOG__.FREE_LOG  (ptr,                                 __FILE__, __func__, __LINE__);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="27" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1a1eb91c10363cd46f2fc0e747827068bf" prot="public" static="no">
        <name>RECALLOC</name>
        <param><defname>ptr</defname></param>
        <param><defname>size</defname></param>
        <initializer>LOG__.RECAL_LOG (ptr, size,                           __FILE__, __func__, __LINE__);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="28" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1a9ac9dd35b93432c0b194466d2aa84788" prot="public" static="no">
        <name>PASTE</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>x ## _ ## y</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="31" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1ae4814861c311b8fc7925babf0298d2c3" prot="public" static="no">
        <name>EVAL</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>PASTE(x,y)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="32" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1a40e05a779a8b278b653ac93e31ec17ea" prot="public" static="no">
        <name>RAND_NAME</name>
        <param><defname>func</defname></param>
        <initializer>EVAL(func, __LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="33" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1a517f0e22c72903ef264b2a871617d8c1" prot="public" static="no">
        <name>log</name>
        <param><defname>level</defname></param>
        <initializer><ref refid="class_function_logger" kindref="compound">FunctionLogger</ref> RAND_NAME(func) {level, __func__};</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="35" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1a8f165fd92ece19f7877d30238c45d523" prot="public" static="no">
        <name>LSUCCESS</name>
        <initializer>LOG__.LogMsgRet (SUCCESS, &quot;%s:%d returned SUCCESS &quot;, __func__, __LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="43" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1aa58eac5e7e69eb8be5ffd086fc4fa709" prot="public" static="no">
        <name>LFAILURE</name>
        <initializer>LOG__.LogMsgRet (FAILURE, &quot;Failed (%s:%d, %s:%d)&quot;,   __FILE__, __LINE__, __func__, __LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="44" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1a2c228d5ca54877848262edfd5d76dd06" prot="public" static="no">
        <name>LNULL</name>
        <initializer>LOG__.LogMsgNullRet(&quot;Returnig null ptr (%s:%d, %s)&quot;, __FILE__, __LINE__, __func__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="45" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1a8945987fe3c2a1c8a32affd9d8cf5333" prot="public" static="no">
        <name>LOUD_FAILURE</name>
        <initializer>LOG__.LogMsgRet (MsgRet(FAILURE, redcolor &quot;Failed %s:%d (%s:%d)\n&quot; resetconsole, __FILE__, __LINE__,  __func__, __LINE__), &quot;Failed (%s:%d, %s:%d)&quot;, __FILE__, __LINE__, __func__, __LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="47" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1aed7d411c1797c1b5c76872073f86a287" prot="public" static="no">
        <name>LOUD_NULL</name>
        <initializer>LOG__.LogMsgNullRet(&quot;Returnig null ptr (%s:%d)&quot;, __func__, __LINE__), LogMsgNullRet(bluecolor &quot;Returnig null ptr %s:%d (%s:%d)\n&quot; resetconsole, __FILE__, __LINE__, __func__, __LINE__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="48" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1ad1e85a36a0152cc29d37a8a816e05474" prot="public" static="no">
        <name>LogMsgRet</name>
        <param><defname>ret_val</defname></param>
        <param><defname>format</defname></param>
        <param><defname>...</defname></param>
        <initializer>LOG__.LogMsgRet (ret_val, format __VA_OPT__(,) __VA_ARGS__)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="50" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1a70e9fa70d19bffb59ab97b6c88e686fd" prot="public" static="no">
        <name>CHECK</name>
        <param><defname>condition</defname></param>
        <param><defname>what_to_do_if_false</defname></param>
        <param><defname>...</defname></param>
        <initializer>                                              do                                          \
                                              {                                           \
                                              if (!condition)                             \
                                                {                                         \
                                                logf(&quot;%s:%d::CHECK: &quot; #condition &quot; is false\n&quot;, __func__, __LINE__);  \
                                                what_to_do_if_false ;                     \
                                                __VA_ARGS__ __VA_OPT__(;)                 \
                                                }                                         \
                                              }while (0);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="52" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1ada9d7a0088edeb62d42c061dd0715bb0" prot="public" static="no">
        <name>assertlog</name>
        <param><defname>condition</defname></param>
        <param><defname>error_code</defname></param>
        <param><defname>return_expression</defname></param>
        <initializer>                            do                                                           \
                            {                                                                                            \
                            if (!(condition))                                                                            \
                                {                                                                                        \
                                LOG__.log(&quot;ASSERTLOG:: Condition (%s) is false\n&quot;, #condition);                                      \
                                printf(yellowcolor &quot;ASSERTLOG:: &quot; resetconsole &quot;Condition&quot; purplecolor &quot; (%s) &quot; resetconsole &quot;is &quot; redcolor &quot;false\n&quot; resetconsole, #condition);                \
                                LOG__.log(&quot;\t%s:%d, function: %s\n&quot;,                                      \
                                            __FILE__, __LINE__, __PRETTY_FUNCTION__);                                              \
                                printf(&quot;\t%s:%d, function: %s\n&quot;,                                         \
                                           __FILE__, __LINE__, __PRETTY_FUNCTION__);                                              \
                                LOG__.log(&quot;It matches to error: (code %d) %s\n\n&quot;, error_code, strerror(error_code));    \
                                LOG__.log(&quot;Shutting down the system (%s:%d)&quot;, __func__, __LINE__);                       \
                                                                                                                         \
                                return_expression;                                                                       \
                                }                                                                                        \
                                                                                                                         \
                            } while (0);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="63" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1a744852567b1c37fae5d168c21c7f2727" prot="public" static="no">
        <name>li</name>
        <param><defname>int_var</defname></param>
        <initializer>do { logf (&quot;\t%s: %d\n&quot;, #int_var, int_var);        } while(0);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="82" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1ada147cbea0fe800a9e484303d932e162" prot="public" static="no">
        <name>lzu</name>
        <param><defname>size_t_var</defname></param>
        <initializer>do { logf (&quot;\t%s: %zu\n&quot;, #size_t_var, size_t_var); } while(0);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="83" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1a339f8edd3eeeafbde4193029b4133550" prot="public" static="no">
        <name>lc</name>
        <param><defname>char_var</defname></param>
        <initializer>do { logf (&quot;\t%s: &apos;%c&apos;\n&quot;, #char_var, char_var);    } while(0);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="84" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1abc95d9c185ec1048e5940b5b33012809" prot="public" static="no">
        <name>ld</name>
        <param><defname>double_var</defname></param>
        <initializer>do { logf (&quot;\t%s: %lg\n&quot;, #double_var, double_var); } while(0);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="85" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1ad493f88b5e73c52463d9577a10d2523b" prot="public" static="no">
        <name>ls</name>
        <param><defname>string</defname></param>
        <initializer>do { logf (&quot;\t%s: &lt;%s&gt;\n&quot;, #string, string);      } while(0);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="86" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1a446180e1131cbbfe86008e8e88c2f7f9" prot="public" static="no">
        <name>lp</name>
        <param><defname>pointer</defname></param>
        <initializer>do { logf (&quot;\t%s: %p\n&quot;, #pointer, (void*)pointer); } while(0);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="87" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1a066f78c44d68f94b3a5577f81f122617" prot="public" static="no">
        <name>TODO</name>
        <param><defname>message</defname></param>
        <initializer>                                 printf(cyancolor &quot;#TODO Check this place to improve it (%s:%d)\n%s&quot; resetconsole , __FILE__, __LINE__, message);      \
                                 logf(&quot;#TODO Check this place to improve it (%s:%d)\n%s&quot;,               __FILE__, __LINE__, message);      \
                                 logf(message);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="90" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_log_macroses_8h_1aa4d23bea0f78f3a587784a68c9f44f9d" prot="public" static="no">
        <name>YOU_SHALL_NOT_PASS</name>
        <initializer>                                         printf(purplecolor &quot;You shouldn&apos;t be able to reach this place %s:%d (%s::%d)\n&quot; resetconsole , __FILE__, __LINE__, __func__, __LINE__);     \
                                         logf(&quot;You shouldn&apos;t be able to reach this place %s:%d (%s::%d)\n&quot;,               __FILE__, __LINE__, __func__, __LINE__);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ATC/Logger/LogMacroses.h" line="94" column="9" bodyfile="ATC/Logger/LogMacroses.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Logger.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;FunctionLogger.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;CommonEnums.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LinuxColors.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Utils.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>report(format,<sp/>...)<sp/>printf<sp/>(yellowcolor<sp/>&quot;(%s:%d)&quot;</highlight><highlight class="normal"><sp/>resetconsole<sp/>&quot;<sp/>&quot;<sp/>format,<sp/>__FILE__,<sp/>__LINE__<sp/>__VA_OPT__(,)<sp/>__VA_ARGS__)</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG__<sp/>Logger::getInstance()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>log_function<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG__.log(&quot;%s:<sp/>&quot;</highlight><highlight class="normal">,<sp/>__func__)</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG<sp/>log_function;<sp/><sp/><sp/>LOG__<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>.log(&quot;&quot;)<sp/>to<sp/>set<sp/>indent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>flog<sp/>LOG__.log(&quot;&quot;</highlight><highlight class="normal">);<sp/>LOG__<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>logf(format,<sp/>...)<sp/><sp/><sp/>LOG__.log(format<sp/>__VA_OPT__(,)<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>logf_ni(format,<sp/>...)<sp/><sp/><sp/>LOG__.log_no_indent(format<sp/>__VA_OPT__(,)<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>!!!<sp/>ADD<sp/>CHECKING<sp/>ERRNO<sp/>!!!<sp/>@TODO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CALLOC(number_of_elements,<sp/>size_of_element)<sp/><sp/>LOG__.CAL_LOG<sp/><sp/><sp/>(number_of_elements,<sp/>size_of_element,<sp/>__FILE__,<sp/>__func__,<sp/>__LINE__);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>KILL(ptr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG__.FREE_LOG<sp/><sp/>(ptr,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FILE__,<sp/>__func__,<sp/>__LINE__);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RECALLOC(ptr,<sp/>size)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG__.RECAL_LOG<sp/>(ptr,<sp/>size,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FILE__,<sp/>__func__,<sp/>__LINE__);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PASTE(x,<sp/>y)<sp/>x<sp/>##<sp/>_<sp/>##<sp/>y</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVAL(x,y)<sp/>PASTE(x,y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RAND_NAME(func)<sp/>EVAL(func,<sp/>__LINE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>$log(level)<sp/>FunctionLogger<sp/>RAND_NAME(func)<sp/>{level,<sp/>__func__};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="38"><highlight class="comment">#define<sp/>SUCCESS<sp/><sp/><sp/>LOG__.LogMsgRet<sp/>(SUCCESS,<sp/>&quot;%s:%d<sp/>returned<sp/>SUCCESS<sp/>&quot;,<sp/>__func__,<sp/>__LINE__)</highlight></codeline>
<codeline lineno="39"><highlight class="comment">#define<sp/>FAILURE<sp/><sp/><sp/>LOG__.LogMsgRet<sp/>(FAILURE,<sp/>&quot;Failed<sp/>(%s:%d,<sp/>%s:%d)&quot;,<sp/>__FILE__,<sp/>__LINE__,<sp/>__func__,<sp/>__LINE__)<sp/><sp/></highlight></codeline>
<codeline lineno="40"><highlight class="comment">#define<sp/>NULL_PTR<sp/><sp/>LOG__.LogMsgNullRet(&quot;Returnig<sp/>null<sp/>ptr<sp/>(%s:%d)&quot;,<sp/>__func__,<sp/>__LINE__)<sp/></highlight></codeline>
<codeline lineno="41"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LSUCCESS<sp/>LOG__.LogMsgRet<sp/>(SUCCESS,<sp/>&quot;%s:%d<sp/>returned<sp/>SUCCESS<sp/>&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>__LINE__)</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LFAILURE<sp/>LOG__.LogMsgRet<sp/>(FAILURE,<sp/>&quot;Failed<sp/>(%s:%d,<sp/>%s:%d)&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/>__FILE__,<sp/>__LINE__,<sp/>__func__,<sp/>__LINE__)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LNULL<sp/><sp/><sp/><sp/>LOG__.LogMsgNullRet(&quot;Returnig<sp/>null<sp/>ptr<sp/>(%s:%d,<sp/>%s)&quot;</highlight><highlight class="normal">,<sp/>__FILE__,<sp/>__LINE__,<sp/>__func__)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOUD_FAILURE<sp/>LOG__.LogMsgRet<sp/>(MsgRet(FAILURE,<sp/>redcolor<sp/>&quot;Failed<sp/>%s:%d<sp/>(%s:%d)\n&quot;</highlight><highlight class="normal"><sp/>resetconsole,<sp/>__FILE__,<sp/>__LINE__,<sp/><sp/>__func__,<sp/>__LINE__),<sp/>&quot;Failed<sp/>(%s:%d,<sp/>%s:%d)&quot;,<sp/>__FILE__,<sp/>__LINE__,<sp/>__func__,<sp/>__LINE__)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOUD_NULL<sp/><sp/><sp/><sp/>LOG__.LogMsgNullRet(&quot;Returnig<sp/>null<sp/>ptr<sp/>(%s:%d)&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>__LINE__),<sp/>LogMsgNullRet(bluecolor<sp/>&quot;Returnig<sp/>null<sp/>ptr<sp/>%s:%d<sp/>(%s:%d)\n&quot;<sp/>resetconsole,<sp/>__FILE__,<sp/>__LINE__,<sp/>__func__,<sp/>__LINE__)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LogMsgRet(ret_val,<sp/>format,<sp/>...)<sp/>LOG__.LogMsgRet<sp/>(ret_val,<sp/>format<sp/>__VA_OPT__(,)<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK(condition,<sp/>what_to_do_if_false,<sp/>...)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!condition)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logf(&quot;%s:%d::CHECK:<sp/>&quot;</highlight><highlight class="normal"><sp/>#condition<sp/>&quot;<sp/>is<sp/>false\n&quot;,<sp/>__func__,<sp/>__LINE__);<sp/><sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>what_to_do_if_false<sp/>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__<sp/>__VA_OPT__(;)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}while<sp/>(0);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>assertlog(condition,<sp/>error_code,<sp/>return_expression)<sp/>do<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!(condition))<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG__.log(&quot;ASSERTLOG::<sp/>Condition<sp/>(%s)<sp/>is<sp/>false\n&quot;</highlight><highlight class="normal">,<sp/>#condition);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(yellowcolor<sp/>&quot;ASSERTLOG::<sp/>&quot;<sp/>resetconsole<sp/>&quot;Condition&quot;<sp/>purplecolor<sp/>&quot;<sp/>(%s)<sp/>&quot;<sp/>resetconsole<sp/>&quot;is<sp/>&quot;<sp/>redcolor<sp/>&quot;false\n&quot;<sp/>resetconsole,<sp/>#condition);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG__.log(&quot;\t%s:%d,<sp/>function:<sp/>%s\n&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FILE__,<sp/>__LINE__,<sp/>__PRETTY_FUNCTION__);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;\t%s:%d,<sp/>function:<sp/>%s\n&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FILE__,<sp/>__LINE__,<sp/>__PRETTY_FUNCTION__);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG__.log(&quot;It<sp/>matches<sp/>to<sp/>error:<sp/>(code<sp/>%d)<sp/>%s\n\n&quot;,<sp/>error_code,<sp/>strerror(error_code));<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG__.log(&quot;Shutting<sp/>down<sp/>the<sp/>system<sp/>(%s:%d)&quot;,<sp/>__func__,<sp/>__LINE__);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return_expression;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>$li(int_var)<sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>logf<sp/>(&quot;\t%s:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>#int_var,<sp/>int_var);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while(0);<sp/><sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>$lzu(size_t_var)<sp/>do<sp/>{<sp/>logf<sp/>(&quot;\t%s:<sp/>%zu\n&quot;</highlight><highlight class="normal">,<sp/>#size_t_var,<sp/>size_t_var);<sp/>}<sp/>while(0);<sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>$lc(char_var)<sp/><sp/><sp/><sp/>do<sp/>{<sp/>logf<sp/>(&quot;\t%s:<sp/>&apos;%c&apos;\n&quot;</highlight><highlight class="normal">,<sp/>#char_var,<sp/>char_var);<sp/><sp/><sp/><sp/>}<sp/>while(0);<sp/><sp/></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>$ld(double_var)<sp/><sp/>do<sp/>{<sp/>logf<sp/>(&quot;\t%s:<sp/>%lg\n&quot;</highlight><highlight class="normal">,<sp/>#double_var,<sp/>double_var);<sp/>}<sp/>while(0);<sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>$ls(string)<sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>logf<sp/>(&quot;\t%s:<sp/>&lt;%s&gt;\n&quot;</highlight><highlight class="normal">,<sp/>#string,<sp/>string);<sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while(0);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>$lp(pointer)<sp/><sp/><sp/><sp/><sp/>do<sp/>{<sp/>logf<sp/>(&quot;\t%s:<sp/>%p\n&quot;</highlight><highlight class="normal">,<sp/>#pointer,<sp/>(void*)pointer);<sp/>}<sp/>while(0);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TODO(message)<sp/>printf(cyancolor<sp/>&quot;#TODO<sp/>Check<sp/>this<sp/>place<sp/>to<sp/>improve<sp/>it<sp/>(%s:%d)\n%s&quot;</highlight><highlight class="normal"><sp/>resetconsole<sp/>,<sp/>__FILE__,<sp/>__LINE__,<sp/>message);<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logf(&quot;#TODO<sp/>Check<sp/>this<sp/>place<sp/>to<sp/>improve<sp/>it<sp/>(%s:%d)\n%s&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FILE__,<sp/>__LINE__,<sp/>message);<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logf(message);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>YOU_SHALL_NOT_PASS<sp/>printf(purplecolor<sp/>&quot;You<sp/>shouldn&apos;t<sp/>be<sp/>able<sp/>to<sp/>reach<sp/>this<sp/>place<sp/>%s:%d<sp/>(%s::%d)\n&quot;</highlight><highlight class="normal"><sp/>resetconsole<sp/>,<sp/>__FILE__,<sp/>__LINE__,<sp/>__func__,<sp/>__LINE__);<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logf(&quot;You<sp/>shouldn&apos;t<sp/>be<sp/>able<sp/>to<sp/>reach<sp/>this<sp/>place<sp/>%s:%d<sp/>(%s::%d)\n&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__FILE__,<sp/>__LINE__,<sp/>__func__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IDEAS:<sp/>logif<sp/>(condition,<sp/>smt<sp/>to<sp/>log)<sp/>(basiclly<sp/>its<sp/>assertlog)</highlight></codeline>
<codeline lineno="102"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="105"><highlight class="comment">#define<sp/>dlog(format,<sp/>...)<sp/>do<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(my_log,<sp/>&quot;from<sp/>%s<sp/>(in<sp/>line<sp/>%d,<sp/>file<sp/>%s):\n\t&quot;,<sp/>__func__,<sp/>__LINE__,<sp/>__FILE__);<sp/><sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf<sp/>(my_lof,<sp/>format,<sp/>__VA_ARGS__);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0);</highlight></codeline>
<codeline lineno="110"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>//<sp/>If<sp/>you<sp/>want<sp/>to<sp/>return,<sp/>abort<sp/>or<sp/>exit<sp/>use<sp/>...</highlight></codeline>
<codeline lineno="113"><highlight class="comment">#define<sp/>logif(condition,<sp/>error_code,<sp/>...)<sp/>do<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!condition)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(&quot;Condition<sp/>(%s)<sp/>is<sp/>false\n&quot;,<sp/>#condition);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(&quot;\t(function:<sp/>%s,<sp/>file:<sp/>%s,<sp/>line:<sp/>%d)\n&quot;,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__func__,<sp/><sp/><sp/>__FILE__,<sp/>__LINE__);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log(&quot;It<sp/>matches<sp/>to<sp/>error:<sp/>(code<sp/>%d)<sp/>%s\n\n&quot;,<sp/>error_code,<sp/>strerror(error_code));<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>system(&quot;poweroff&quot;);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__VA_ARGS__;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>while<sp/>(0);</highlight></codeline>
<codeline lineno="127"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="ATC/Logger/LogMacroses.h"/>
  </compounddef>
</doxygen>
