GAS LISTING test.s 			page 1


   1              	.extern puthcar
   2              	.extern exit
   3              	
   4              	.macro MOVE_ARGUMENT_TO_RAX
   5              	    mov (%rbp), %rax
   6              	    add $0x8, %rbp
   7              	.endm
   8              	
   9              	.macro PUTN buffer:req, cnt:req
  10              	    nop
  11              	
  12              	    mov $1, %rax         # write code
  13              	    mov $1, %rdi         # write (buffer = rsi, descriptor = rdi, rdx = count)
  14              	    mov \buffer, %rsi    #
  15              	    mov \cnt, %rdx       #
  16              	    syscall              #
  17              	    
  18              	    nop
  19              	.endm
  20              	
  21              	.text
  22              	
  23              	    .globl main
  24              	    .type main, @function
  25              	
  26              	.data
  27 0000 25252563 	format: .ascii "%%%c %c %f '%s' - Chat\n\0"
  27      20256320 
  27      25662027 
  27      25732720 
  27      2D204368 
  28 0018 53545249 	str:    .ascii "STRIN !\0"
  28      4E202100 
  29              	.text
  30              	main:
  31 0000 68000000 	    push $str
  31      00
  32 0005 6A47     	    pushq $'G'
  33 0007 68656463 	    pushq $0x636465
  33      00
  34 000c 68000000 	    pushq $format
  34      00
  35              	    
  36 0011 E8000000 	    call my_printf
  36      00
  37              	    
  38 0016 4883C420 	    add $(8 * 4), %rsp
  39              	
  40 001a C3       	    ret
  41              	
  42              	.global my_printf
  43              	
  44              	my_printf:          // save rbp, rbx, r12, r13, r14, r15
  45 001b 55       	    push %rbp
  46 001c 4889E5   	    mov %rsp, %rbp
  47              	
  48              	
GAS LISTING test.s 			page 2


  49 001f 488B5D10 	    mov 0x10(%rbp), %rbx   # rbx - format 
  50 0023 4883C518 	    add $0x18, %rbp        # set rbp for addrsing to arguments from stk
  51              	
  52              	.while_not_null:
  53 0027 803B00   	    cmpb $0, (%rbx)
  54 002a 0F84F001 	    je .end_of_while_not_null
  54      0000
  55              	
  56 0030 4831C9   	    xor %rcx, %rcx    # rcx - counter
  57              	
  58              	        .while_not_null_and_not_percent:
  59 0033 8A040B   	            movb (%rbx, %rcx), %al
  60              	            
  61 0036 3C00     	            cmp $0x0, %al
  62 0038 7409     	            je .end_of_while_not_null_and_not_percent
  63              	
  64 003a 3C25     	            cmp $'%', %al
  65 003c 7405     	            je .end_of_while_not_null_and_not_percent
  66              	
  67 003e 48FFC1   	            inc %rcx
  68 0041 EBF0     	            jmp .while_not_null_and_not_percent
  69              	
  70              	    .end_of_while_not_null_and_not_percent:
  71              	
  72              	    ### putn
  73 0043 51       	    push %rcx
  74 0044 53       	    push %rbx
  75              	
  76              	    PUTN buffer = %rbx, cnt = %rcx
  76 0045 90       	>  nop
  76              	> 
  76 0046 48C7C001 	>  mov $1,%rax
  76      000000
  76 004d 48C7C701 	>  mov $1,%rdi
  76      000000
  76 0054 4889DE   	>  mov %rbx,%rsi
  76 0057 4889CA   	>  mov %rcx,%rdx
  76 005a 0F05     	>  syscall 
  76              	>  
  76 005c 90       	>  nop
  77              	
  78 005d 5B       	    pop %rbx
  79 005e 59       	    pop %rcx
  80              	    # CHECK THAT REGISERS rcx and rbx safe !!!!!!!!!
  81              	    ###
  82              	
  83 005f 4801CB   	    add %rcx, %rbx  # rbx += rcx 
  84              	    
  85 0062 803B25   	    cmpb $'%', (%rbx)            # if (ax != '%') 
  86 0065 0F85B501 	    jne .end_of_while_not_null   #     .string 'break;'
  86      0000
  87              	
  88 006b 48FFC3   	    inc %rbx
  89              	
  90 006e 0FB603   	    movzxb (%rbx), %eax # eax = format char
  91 0071 83F825   	    cmp $'%', %eax
  92 0074 0F84D700 	    je .percent_spec_case
GAS LISTING test.s 			page 3


  92      0000
  93              	
  94 007a 83F878   	    cmp $'x', %eax
  95 007d 0F8F7101 	    jg .default_case
  95      0000
  96              	
  97 0083 83F862   	    cmp $'b', %eax
  98 0086 0F8C6801 	    jl .default_case
  98      0000
  99              	
 100 008c 83E862   	    sub $'b', %eax 
 101 008f 488B04C5 	    mov jump_table(,%rax,8), %rax
 101      00000000 
 102 0097 FFE0     	    jmp *%rax
 103              	
 104              	
 105              	jump_table:
 106 0099 00000000 	    .quad   .binary_spec_case
 106      00000000 
 107 00a1 00000000 	    .quad   .char_spec_case
 107      00000000 
 108 00a9 00000000 	    .quad   .decimal_spec_case
 108      00000000 
 109              	
 110 00b1 00000000 	    .quad   .default_case
 110      00000000 
 111 00b9 00000000 	    .quad   .default_case
 111      00000000 
 112 00c1 00000000 	    .quad   .default_case
 112      00000000 
 113 00c9 00000000 	    .quad   .default_case
 113      00000000 
 114 00d1 00000000 	    .quad   .default_case
 114      00000000 
 115 00d9 00000000 	    .quad   .default_case
 115      00000000 
 116 00e1 00000000 	    .quad   .default_case
 116      00000000 
 117 00e9 00000000 	    .quad   .default_case
 117      00000000 
 118 00f1 00000000 	    .quad   .default_case
 118      00000000 
 119 00f9 00000000 	    .quad   .default_case
 119      00000000 
 120              	
 121 0101 00000000 	    .quad   .oct_spec_case
 121      00000000 
 122              	
 123 0109 00000000 	    .quad   .default_case
 123      00000000 
 124 0111 00000000 	    .quad   .default_case
 124      00000000 
 125 0119 00000000 	    .quad   .default_case
 125      00000000 
 126              	
 127 0121 00000000 	    .quad   .string_spec_case
 127      00000000 
GAS LISTING test.s 			page 4


 128              	    
 129 0129 00000000 	    .quad   .default_case
 129      00000000 
 130 0131 00000000 	    .quad   .default_case
 130      00000000 
 131 0139 00000000 	    .quad   .default_case
 131      00000000 
 132 0141 00000000 	    .quad   .default_case
 132      00000000 
 133              	    
 134 0149 00000000 	    .quad   .hex_spec_case
 134      00000000 
 135              	
 136              	
 137              	.percent_spec_case:
 138 0151 C6042500 	    movb $'%', buffer 
 138      00000025 
 139              	    PUTN buffer = $buffer, cnt = $0x1
 139 0159 90       	>  nop
 139              	> 
 139 015a 48C7C001 	>  mov $1,%rax
 139      000000
 139 0161 48C7C701 	>  mov $1,%rdi
 139      000000
 139 0168 48C7C600 	>  mov $buffer,%rsi
 139      000000
 139 016f 48C7C201 	>  mov $0x1,%rdx
 139      000000
 139 0176 0F05     	>  syscall 
 139              	>  
 139 0178 90       	>  nop
 140              	    
 141 0179 E99A0000 	    jmp .end_of_switch  #break;
 141      00
 142              	
 143              	.binary_spec_case:
 144 017e B8FFFFFF 	    mov $-1, %eax   # eax - mask for 1 bit
 144      FF
 145              	
 146 0183 E9900000 	    jmp .end_of_switch #break;
 146      00
 147              	
 148              	.char_spec_case:
 149              	    PUTN buffer = %rbp, cnt = $1
 149 0188 90       	>  nop
 149              	> 
 149 0189 48C7C001 	>  mov $1,%rax
 149      000000
 149 0190 48C7C701 	>  mov $1,%rdi
 149      000000
 149 0197 4889EE   	>  mov %rbp,%rsi
 149 019a 48C7C201 	>  mov $1,%rdx
 149      000000
 149 01a1 0F05     	>  syscall 
 149              	>  
 149 01a3 90       	>  nop
 150              	
GAS LISTING test.s 			page 5


 151 01a4 4883C508 	    add $0x8,%rbp
 152 01a8 EB6E     	    jmp .end_of_switch #break;
 153              	
 154              	x = 10
 155              	.decimal_spec_case:
 156 01aa 488B03   	    mov (%rbx), %rax
 157 01ad 4883C308 	    add $0x8, %rbx
 158              	
 159              	    // mov $buffer, %rax
 160              	    // add $
 161 01b1 48C7C600 	    mov $(buffer + 0x5), %rsi
 161      000000
 162              	
 163 01b8 E8750000 	    call put_decimal_in_buffer
 163      00
 164              	   
 165 01bd 48C7C000 	    mov $(buffer + x), %rax
 165      000000
 166              	   
 167 01c4 EB52     	    jmp .end_of_switch #break;
 168              	
 169              	.oct_spec_case:
 170 01c6 EB50     	    jmp .end_of_switch #break;
 171              	
 172              	.string_spec_case:
 173 01c8 488B7D00 	    mov (%rbp), %rdi 
 174 01cc B000     	    mov $0x0, %al
 175 01ce E84F0000 	    call str_len
 175      00
 176              	
 177              	    PUTN buffer = (%rbp), cnt = %rcx
 177 01d3 90       	>  nop
 177              	> 
 177 01d4 48C7C001 	>  mov $1,%rax
 177      000000
 177 01db 48C7C701 	>  mov $1,%rdi
 177      000000
 177 01e2 488B7500 	>  mov (%rbp),%rsi
 177 01e6 4889CA   	>  mov %rcx,%rdx
 177 01e9 0F05     	>  syscall 
 177              	>  
 177 01eb 90       	>  nop
 178 01ec 4883C508 	    add $0x8, %rbp 
 179 01f0 EB26     	    jmp .end_of_switch #break;
 180              	
 181              	.hex_spec_case:
 182 01f2 EB24     	    jmp .end_of_switch #break;
 183              	
 184              	.default_case:
 185 01f4 48FFCB   	    dec %rbx # to print '%'
 186              	    PUTN buffer = %rbx, cnt = $0x2
 186 01f7 90       	>  nop
 186              	> 
 186 01f8 48C7C001 	>  mov $1,%rax
 186      000000
 186 01ff 48C7C701 	>  mov $1,%rdi
 186      000000
GAS LISTING test.s 			page 6


 186 0206 4889DE   	>  mov %rbx,%rsi
 186 0209 48C7C202 	>  mov $0x2,%rdx
 186      000000
 186 0210 0F05     	>  syscall 
 186              	>  
 186 0212 90       	>  nop
 187 0213 48FFC3   	    inc %rbx
 188              	
 189 0216 EB00     	    jmp .end_of_switch #break;
 190              	
 191              	.end_of_switch:
 192 0218 48FFC3   	    inc %rbx
 193 021b E907FEFF 	    jmp .while_not_null
 193      FF
 194              	
 195              	.end_of_while_not_null:
 196 0220 5D       	    pop %rbp
 197 0221 C3       	    ret
 198              	
 199              	
 200              	######################################################
 201              	# str_len - length of string except terminatimg symbol
 202              	######################################################
 203              	# Entry:  %rdi - buffer addres
 204              	#          %al - terminatin symbol
 205              	# Exit: %rcx - number of symbols        
 206              	######################################################
 207              	str_len: 
 208              	
 209 0222 48C7C1FF 	    mov $-1, %rcx
 209      FFFFFF
 210              	
 211              	.loop:
 212 0229 48FFC1   	    inc %rcx
 213 022c 38040F   	    cmpb %al, (%rdi, %rcx, 1)
 214 022f 75F8     	    jne .loop
 215              	    
 216 0231 C3       	    ret
 217              	
 218              	#%rax - value
 219              	#%rsi - end of buffer buffer
 220              	#%rcx - number of 
 221              	# Overwrites: %rdi
 222              	put_decimal_in_buffer:
 223              	
 224 0232 48C7C70A 	    mov $0xA, %rdi   # set rdi as divisor
 224      000000
 225              	
 226              	.loop$:
 227 0239 48F7F7   	    div %rdi    #RDX:RAX div 
 228              	    
 229 023c 4883C230 	    add $'0', %rdx
 230 0240 488916   	    mov %rdx, (%rsi)
 231 0243 48FFCE   	    dec %rsi
 232              	
 233 0246 4883F800 	    cmpq $0x0, %rax
 234 024a 75ED     	    jne .loop$
GAS LISTING test.s 			page 7


 235              	
 236 024c C3       	    ret
 237              	
 238              	.section    .bss
 239              	    .local buffer
 240              	    .comm buffer, 64
 241              	
GAS LISTING test.s 			page 8


DEFINED SYMBOLS
              test.s:30     .text:0000000000000000 main
              test.s:27     .data:0000000000000000 format
              test.s:28     .data:0000000000000018 str
              test.s:44     .text:000000000000001b my_printf
              test.s:52     .text:0000000000000027 .while_not_null
              test.s:195    .text:0000000000000220 .end_of_while_not_null
              test.s:58     .text:0000000000000033 .while_not_null_and_not_percent
              test.s:70     .text:0000000000000043 .end_of_while_not_null_and_not_percent
              test.s:137    .text:0000000000000151 .percent_spec_case
              test.s:184    .text:00000000000001f4 .default_case
              test.s:105    .text:0000000000000099 jump_table
              test.s:143    .text:000000000000017e .binary_spec_case
              test.s:148    .text:0000000000000188 .char_spec_case
              test.s:155    .text:00000000000001aa .decimal_spec_case
              test.s:169    .text:00000000000001c6 .oct_spec_case
              test.s:172    .text:00000000000001c8 .string_spec_case
              test.s:181    .text:00000000000001f2 .hex_spec_case
                             .bss:0000000000000000 buffer
              test.s:191    .text:0000000000000218 .end_of_switch
              test.s:154    *ABS*:000000000000000a x
              test.s:222    .text:0000000000000232 put_decimal_in_buffer
              test.s:207    .text:0000000000000222 str_len
              test.s:211    .text:0000000000000229 .loop
              test.s:226    .text:0000000000000239 .loop$

NO UNDEFINED SYMBOLS
