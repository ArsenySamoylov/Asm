GAS LISTING test.s 			page 1


   1              	.extern puthcar
   2              	.extern exit
   3              	.extern printf
   4              	#NOTE: RACE BETWEEN RDX and RSI !
   5              	#OVerwrites: RAX, RDI, RSI, RDX (and everything related to syscall)
   6              	.macro PUTN buffer:req, cnt:req
   7              	    nop
   8              	
   9              	    mov \cnt,    %rdx    #
  10              	    mov \buffer, %rsi    #
  11              	    mov $1, %rax         # write code
  12              	    mov $1, %rdi         # write (buffer = rsi, descriptor = rdi, rdx = count)
  13              	    syscall              #
  14              	    
  15              	    nop
  16              	.endm
  17              	
  18              	.macro PRINT_ARGUMENT translating_function:req
  19              	    nop
  20              	
  21              	    mov (%rbp), %rax
  22              	    add $0x8, %rbp
  23              	
  24              	    mov $(buffer + buffer_size - 1), %rsi
  25              	
  26              	    call \translating_function
  27              	   
  28              	    mov $(buffer + buffer_size - 1), %rax
  29              	    sub %rsi, %rax          # after call RSI points to 
  30              	    inc %rsi                # one byte ahead of start of buffer where decimal begins
  31              	
  32              	    PUTN buffer = %rsi, cnt = %rax
  33              	
  34              	    nop
  35              	.endm
  36              	
  37              	
  38              	.text
  39              	
  40              	    .globl main
  41              	    .type main, @function
  42              	
  43              	.data
  44 0000 25640A00 	format: .ascii "%d\n\0"
  45 0004 53545249 	str:    .ascii "STRIN !\0"
  45      4E202100 
  46              	.text
  47              	main:
  48              	    // pushq $0xFFFFFFFE
  49 0000 68C0BDF0 	    push $-1000000
  49      FF
  50              	    // push $str
  51              	    // pushq $'G'
  52              	    // pushq $0x636465
  53 0005 68000000 	    pushq $format
  53      00
  54              	    
GAS LISTING test.s 			page 2


  55 000a E8000000 	    call printf
  55      00
  56 000f E8000000 	    call my_printf
  56      00
  57              	    
  58 0014 4883C410 	    add $(8 * 2), %rsp
  59              	
  60 0018 C3       	    ret
  61              	
  62              	.global my_printf
  63              	
  64              	my_printf:          // save rbp, rbx, r12, r13, r14, r15
  65 0019 55       	    push %rbp
  66 001a 4889E5   	    mov %rsp, %rbp
  67              	
  68              	
  69 001d 488B5D10 	    mov 0x10(%rbp), %rbx   # rbx - format 
  70 0021 4883C518 	    add $0x18, %rbp        # set rbp for addrsing to arguments from stk
  71              	
  72              	.while_not_null:
  73 0025 803B00   	    cmpb $0, (%rbx)
  74 0028 0F84C802 	    je .end_of_while_not_null
  74      0000
  75              	
  76 002e 4831C9   	    xor %rcx, %rcx    # rcx - counter
  77              	
  78              	        .while_not_null_and_not_percent:
  79 0031 8A040B   	            movb (%rbx, %rcx), %al
  80              	            
  81 0034 3C00     	            cmp $0x0, %al
  82 0036 7409     	            je .end_of_while_not_null_and_not_percent
  83              	
  84 0038 3C25     	            cmp $'%', %al
  85 003a 7405     	            je .end_of_while_not_null_and_not_percent
  86              	
  87 003c 48FFC1   	            inc %rcx
  88 003f EBF0     	            jmp .while_not_null_and_not_percent
  89              	
  90              	    .end_of_while_not_null_and_not_percent:
  91              	
  92              	    ### putn
  93 0041 51       	    push %rcx
  94 0042 53       	    push %rbx
  95              	
  96              	    PUTN buffer = %rbx, cnt = %rcx
  96 0043 90       	>  nop
  96              	> 
  96 0044 4889CA   	>  mov %rcx,%rdx
  96 0047 4889DE   	>  mov %rbx,%rsi
  96 004a 48C7C001 	>  mov $1,%rax
  96      000000
  96 0051 48C7C701 	>  mov $1,%rdi
  96      000000
  96 0058 0F05     	>  syscall 
  96              	>  
  96 005a 90       	>  nop
  97              	
GAS LISTING test.s 			page 3


  98 005b 5B       	    pop %rbx
  99 005c 59       	    pop %rcx
 100              	    # CHECK THAT REGISERS rcx and rbx safe !!!!!!!!!
 101              	    ###
 102              	
 103 005d 4801CB   	    add %rcx, %rbx  # rbx += rcx 
 104              	    
 105 0060 803B25   	    cmpb $'%', (%rbx)            # if (ax != '%') 
 106 0063 0F858D02 	    jne .end_of_while_not_null   #     .string 'break;'
 106      0000
 107              	
 108 0069 48FFC3   	    inc %rbx
 109              	
 110 006c 0FB603   	    movzxb (%rbx), %eax # eax = format char
 111 006f 83F825   	    cmp $'%', %eax
 112 0072 0F84D700 	    je .percent_spec_case
 112      0000
 113              	
 114 0078 83F878   	    cmp $'x', %eax
 115 007b 0F8F4902 	    jg .default_case
 115      0000
 116              	
 117 0081 83F862   	    cmp $'b', %eax
 118 0084 0F8C4002 	    jl .default_case
 118      0000
 119              	
 120 008a 83E862   	    sub $'b', %eax 
 121 008d 488B04C5 	    mov jump_table(,%rax,8), %rax
 121      00000000 
 122 0095 FFE0     	    jmp *%rax
 123              	
 124              	
 125              	jump_table:
 126 0097 00000000 	    .quad   .binary_spec_case   #
 126      00000000 
 127 009f 00000000 	    .quad   .char_spec_case     # [0;2]
 127      00000000 
 128 00a7 00000000 	    .quad   .decimal_spec_case  #
 128      00000000 
 129              	
 130              	.rept 10
 130 00af 00000000 	>  .quad .default_case
 130      00000000 
 130              	> 
 130 00b7 00000000 	>  .quad .default_case
 130      00000000 
 130              	> 
 130 00bf 00000000 	>  .quad .default_case
 130      00000000 
 130              	> 
 130 00c7 00000000 	>  .quad .default_case
 130      00000000 
 130              	> 
 130 00cf 00000000 	>  .quad .default_case
 130      00000000 
 130              	> 
 130 00d7 00000000 	>  .quad .default_case
GAS LISTING test.s 			page 4


 130      00000000 
 130              	> 
 130 00df 00000000 	>  .quad .default_case
 130      00000000 
 130              	> 
 130 00e7 00000000 	>  .quad .default_case
 130      00000000 
 130              	> 
 130 00ef 00000000 	>  .quad .default_case
 130      00000000 
 130              	> 
 130 00f7 00000000 	>  .quad .default_case
 130      00000000 
 131              	    .quad   .default_case       # [3, 12]
 132              	.endr    
 133              	
 134 00ff 00000000 	    .quad   .oct_spec_case      # [13]
 134      00000000 
 135              	
 136              	.rept 3
 136 0107 00000000 	>  .quad .default_case
 136      00000000 
 136              	> 
 136 010f 00000000 	>  .quad .default_case
 136      00000000 
 136              	> 
 136 0117 00000000 	>  .quad .default_case
 136      00000000 
 137              	    .quad   .default_case       # [14:16]
 138              	.endr
 139              	
 140 011f 00000000 	    .quad   .string_spec_case   # [17]
 140      00000000 
 141              	    
 142              	.rept 4
 142 0127 00000000 	>  .quad .default_case
 142      00000000 
 142              	> 
 142 012f 00000000 	>  .quad .default_case
 142      00000000 
 142              	> 
 142 0137 00000000 	>  .quad .default_case
 142      00000000 
 142              	> 
 142 013f 00000000 	>  .quad .default_case
 142      00000000 
 143              	    .quad   .default_case       # [18:21]
 144              	.endr    
 145              	
 146 0147 00000000 	    .quad   .hex_spec_case      # [22]
 146      00000000 
 147              	
 148              	
 149              	.percent_spec_case:
 150 014f C6042500 	    movb $'%', buffer 
 150      00000025 
 151              	    PUTN buffer = $buffer, cnt = $0x1
GAS LISTING test.s 			page 5


 151 0157 90       	>  nop
 151              	> 
 151 0158 48C7C201 	>  mov $0x1,%rdx
 151      000000
 151 015f 48C7C600 	>  mov $buffer,%rsi
 151      000000
 151 0166 48C7C001 	>  mov $1,%rax
 151      000000
 151 016d 48C7C701 	>  mov $1,%rdi
 151      000000
 151 0174 0F05     	>  syscall 
 151              	>  
 151 0176 90       	>  nop
 152              	    
 153 0177 E9720100 	    jmp .end_of_switch  #break;
 153      00
 154              	
 155              	.binary_spec_case:
 156              	    PRINT_ARGUMENT translating_function = put_binary_in_buffer
 156 017c 90       	>  nop
 156              	> 
 156 017d 488B4500 	>  mov (%rbp),%rax
 156 0181 4883C508 	>  add $0x8,%rbp
 156              	> 
 156 0185 48C7C600 	>  mov $(buffer+buffer_size - 1),%rsi
 156      000000
 156              	> 
 156 018c E8B80100 	>  call put_binary_in_buffer
 156      00
 156              	>  
 156 0191 48C7C000 	>  mov $(buffer+buffer_size - 1),%rax
 156      000000
 156 0198 4829F0   	>  sub %rsi,%rax
 156 019b 48FFC6   	>  inc %rsi
 156              	> 
 156              	>  PUTN buffer=%rsi,cnt=%rax
 156 019e 90       	>>  nop
 156              	>> 
 156 019f 4889C2   	>>  mov %rax,%rdx
 156 01a2 4889F6   	>>  mov %rsi,%rsi
 156 01a5 48C7C001 	>>  mov $1,%rax
 156      000000
 156 01ac 48C7C701 	>>  mov $1,%rdi
 156      000000
 156 01b3 0F05     	>>  syscall 
 156              	>>  
 156 01b5 90       	>>  nop
 156              	> 
 156 01b6 90       	>  nop
 157 01b7 E9320100 	    jmp .end_of_switch      #break;
 157      00
 158              	
 159              	.char_spec_case:
 160              	    PUTN buffer = %rbp, cnt = $1
 160 01bc 90       	>  nop
 160              	> 
 160 01bd 48C7C201 	>  mov $1,%rdx
GAS LISTING test.s 			page 6


 160      000000
 160 01c4 4889EE   	>  mov %rbp,%rsi
 160 01c7 48C7C001 	>  mov $1,%rax
 160      000000
 160 01ce 48C7C701 	>  mov $1,%rdi
 160      000000
 160 01d5 0F05     	>  syscall 
 160              	>  
 160 01d7 90       	>  nop
 161              	
 162 01d8 4883C508 	    add $0x8,%rbp
 163 01dc E90D0100 	    jmp .end_of_switch       #break;
 163      00
 164              	
 165              	.decimal_spec_case:
 166              	    PRINT_ARGUMENT translating_function = put_decimal_in_buffer
 166 01e1 90       	>  nop
 166              	> 
 166 01e2 488B4500 	>  mov (%rbp),%rax
 166 01e6 4883C508 	>  add $0x8,%rbp
 166              	> 
 166 01ea 48C7C600 	>  mov $(buffer+buffer_size - 1),%rsi
 166      000000
 166              	> 
 166 01f1 E8120100 	>  call put_decimal_in_buffer
 166      00
 166              	>  
 166 01f6 48C7C000 	>  mov $(buffer+buffer_size - 1),%rax
 166      000000
 166 01fd 4829F0   	>  sub %rsi,%rax
 166 0200 48FFC6   	>  inc %rsi
 166              	> 
 166              	>  PUTN buffer=%rsi,cnt=%rax
 166 0203 90       	>>  nop
 166              	>> 
 166 0204 4889C2   	>>  mov %rax,%rdx
 166 0207 4889F6   	>>  mov %rsi,%rsi
 166 020a 48C7C001 	>>  mov $1,%rax
 166      000000
 166 0211 48C7C701 	>>  mov $1,%rdi
 166      000000
 166 0218 0F05     	>>  syscall 
 166              	>>  
 166 021a 90       	>>  nop
 166              	> 
 166 021b 90       	>  nop
 167 021c E9CD0000 	    jmp .end_of_switch       #break;
 167      00
 168              	
 169              	.oct_spec_case:
 170              	    PRINT_ARGUMENT translating_function = put_oct_in_buffer
 170 0221 90       	>  nop
 170              	> 
 170 0222 488B4500 	>  mov (%rbp),%rax
 170 0226 4883C508 	>  add $0x8,%rbp
 170              	> 
 170 022a 48C7C600 	>  mov $(buffer+buffer_size - 1),%rsi
GAS LISTING test.s 			page 7


 170      000000
 170              	> 
 170 0231 E8300100 	>  call put_oct_in_buffer
 170      00
 170              	>  
 170 0236 48C7C000 	>  mov $(buffer+buffer_size - 1),%rax
 170      000000
 170 023d 4829F0   	>  sub %rsi,%rax
 170 0240 48FFC6   	>  inc %rsi
 170              	> 
 170              	>  PUTN buffer=%rsi,cnt=%rax
 170 0243 90       	>>  nop
 170              	>> 
 170 0244 4889C2   	>>  mov %rax,%rdx
 170 0247 4889F6   	>>  mov %rsi,%rsi
 170 024a 48C7C001 	>>  mov $1,%rax
 170      000000
 170 0251 48C7C701 	>>  mov $1,%rdi
 170      000000
 170 0258 0F05     	>>  syscall 
 170              	>>  
 170 025a 90       	>>  nop
 170              	> 
 170 025b 90       	>  nop
 171 025c E98D0000 	    jmp .end_of_switch       #break;
 171      00
 172              	
 173              	.string_spec_case:
 174 0261 488B7D00 	    mov (%rbp), %rdi 
 175 0265 B000     	    mov $0x0, %al
 176 0267 E88C0000 	    call str_len
 176      00
 177              	
 178              	    PUTN buffer = (%rbp), cnt = %rcx
 178 026c 90       	>  nop
 178              	> 
 178 026d 4889CA   	>  mov %rcx,%rdx
 178 0270 488B7500 	>  mov (%rbp),%rsi
 178 0274 48C7C001 	>  mov $1,%rax
 178      000000
 178 027b 48C7C701 	>  mov $1,%rdi
 178      000000
 178 0282 0F05     	>  syscall 
 178              	>  
 178 0284 90       	>  nop
 179 0285 4883C508 	    add $0x8, %rbp 
 180 0289 EB63     	    jmp .end_of_switch #break;
 181              	
 182              	.hex_spec_case:
 183 028b 53       	    push %rbx
 184              	    PRINT_ARGUMENT translating_function = put_hex_in_buffer
 184 028c 90       	>  nop
 184              	> 
 184 028d 488B4500 	>  mov (%rbp),%rax
 184 0291 4883C508 	>  add $0x8,%rbp
 184              	> 
 184 0295 48C7C600 	>  mov $(buffer+buffer_size - 1),%rsi
GAS LISTING test.s 			page 8


 184      000000
 184              	> 
 184 029c E8E30000 	>  call put_hex_in_buffer
 184      00
 184              	>  
 184 02a1 48C7C000 	>  mov $(buffer+buffer_size - 1),%rax
 184      000000
 184 02a8 4829F0   	>  sub %rsi,%rax
 184 02ab 48FFC6   	>  inc %rsi
 184              	> 
 184              	>  PUTN buffer=%rsi,cnt=%rax
 184 02ae 90       	>>  nop
 184              	>> 
 184 02af 4889C2   	>>  mov %rax,%rdx
 184 02b2 4889F6   	>>  mov %rsi,%rsi
 184 02b5 48C7C001 	>>  mov $1,%rax
 184      000000
 184 02bc 48C7C701 	>>  mov $1,%rdi
 184      000000
 184 02c3 0F05     	>>  syscall 
 184              	>>  
 184 02c5 90       	>>  nop
 184              	> 
 184 02c6 90       	>  nop
 185 02c7 5B       	    pop %rbx
 186              	
 187 02c8 EB24     	    jmp .end_of_switch #break;
 188              	
 189              	.default_case:
 190 02ca 48FFCB   	    dec %rbx # to print '%'
 191              	    PUTN buffer = %rbx, cnt = $0x2
 191 02cd 90       	>  nop
 191              	> 
 191 02ce 48C7C202 	>  mov $0x2,%rdx
 191      000000
 191 02d5 4889DE   	>  mov %rbx,%rsi
 191 02d8 48C7C001 	>  mov $1,%rax
 191      000000
 191 02df 48C7C701 	>  mov $1,%rdi
 191      000000
 191 02e6 0F05     	>  syscall 
 191              	>  
 191 02e8 90       	>  nop
 192 02e9 48FFC3   	    inc %rbx
 193              	
 194 02ec EB00     	    jmp .end_of_switch #break;
 195              	
 196              	.end_of_switch:
 197 02ee 48FFC3   	    inc %rbx
 198 02f1 E92FFDFF 	    jmp .while_not_null
 198      FF
 199              	
 200              	.end_of_while_not_null:
 201 02f6 5D       	    pop %rbp
 202 02f7 C3       	    ret
 203              	
 204              	
GAS LISTING test.s 			page 9


 205              	######################################################
 206              	# str_len - length of string except terminatimg symbol
 207              	######################################################
 208              	# Entry:  %rdi - buffer addres
 209              	#          %al - terminatin symbol
 210              	# Exit: %rcx - number of symbols        
 211              	######################################################
 212              	str_len: 
 213              	
 214 02f8 48C7C1FF 	    mov $-1, %rcx
 214      FFFFFF
 215              	
 216              	1:
 217 02ff 48FFC1   	    inc %rcx
 218 0302 38040F   	    cmpb %al, (%rdi, %rcx, 1)
 219 0305 750E     	    jne 1f
 220              	    
 221 0307 C3       	    ret
 222              	
 223              	#%rax - value
 224              	#%rsi - end of buffer buffer
 225              	# Overwrites: %rdi. %rdx. 
 226              	put_decimal_in_buffer:
 227 0308 89C1     	    mov %eax, %ecx
 228 030a E80D0000 	    call put_abs_decimal_in_buffer
 228      00
 229              	
 230 030f 83F900   	    cmp $0, %ecx
 231 0312 7C01     	    jl 1f
 232 0314 C3       	    ret
 233              	1:
 234 0315 C6062D   	    movb $'-', (%rsi)
 235 0318 48FFCE   	    dec %rsi
 236              	
 237 031b C3       	    ret
 238              	
 239              	put_abs_decimal_in_buffer:
 240 031c 48C7C70A 	    mov $0xA, %rdi   # set rdi as divisor
 240      000000
 241              	    
 242 0323 83F800   	    cmp $0, %eax
 243 0326 7C16     	    jl 2f
 244              	
 245              	1:
 246 0328 4831D2   	    xor %rdx, %rdx
 247 032b 48F7F7   	    div %rdi    #RDX:RAX div 
 248              	    
 249 032e 4883C230 	    add $'0', %rdx
 250 0332 8816     	    mov %dl, (%rsi)
 251 0334 48FFCE   	    dec %rsi
 252              	
 253 0337 4883F800 	    cmpq $0x0, %rax
 254 033b 75EB     	    jne 1b
 255              	
 256 033d C3       	    ret
 257              	
 258              	2:  # abs(x) = (x XOR y) - y; y = x >>> 31
GAS LISTING test.s 			page 10


 259 033e 89C2     	    mov %eax, %edx      #  
 260 0340 C1FA1F   	    sarl $31, %edx      # %edx = y
 261              	    
 262 0343 31D0     	    xor %edx, %eax      # %eax = x xor y
 263              	
 264 0345 29D0     	    sub %edx, %eax      # %eax = (x xor y) - %edx
 265              	
 266 0347 EBDF     	    jmp 1b
 267              	
 268              	#%rax - value
 269              	#%rsi - end of buffer buffer
 270              	put_binary_in_buffer:
 271              	  1:
 272 0349 48C7C201 	    mov $1, %rdx
 272      000000
 273 0350 4821C2   	    and %rax, %rdx
 274              	    
 275 0353 4883C230 	    add $'0', %rdx
 276 0357 8816     	    mov %dl, (%rsi)
 277              	
 278 0359 48FFCE   	    dec %rsi
 279 035c 48D1E8   	    shr $1, %rax 
 280              	
 281 035f 4883F800 	    cmp $0, %rax
 282 0363 75E4     	    jne 1b
 283              	
 284 0365 C3       	    ret
 285              	
 286              	put_oct_in_buffer:
 287              	  1:
 288 0366 48C7C207 	    mov $7, %rdx
 288      000000
 289 036d 4821C2   	    and %rax, %rdx
 290              	    
 291 0370 4883C230 	    add $'0', %rdx
 292 0374 8816     	    mov %dl, (%rsi)
 293              	
 294 0376 48FFCE   	    dec %rsi
 295 0379 48C1E803 	    shr $3, %rax 
 296              	
 297 037d 4883F800 	    cmp $0, %rax
 298 0381 75E3     	    jne 1b
 299              	
 300 0383 C3       	    ret
 301              	
 302              	#Overwrites: RBX, RSI
 303              	#Note: XLAT Uses ds
 304              	put_hex_in_buffer:
 305 0384 48C7C300 	    mov $hex_table, %rbx
 305      000000
 306 038b 4892     	    xchg %rax, %rdx
 307              	  
 308              	  1:
 309 038d 48C7C00F 	    mov $0xF, %rax
 309      000000
 310 0394 4821D0   	    and %rdx, %rax
 311              	    
GAS LISTING test.s 			page 11


 312 0397 D7       	    xlat        # AL := (RBX + ZeroExtend(AL))
 313 0398 8806     	    mov %al, (%rsi)
 314              	
 315 039a 48FFCE   	    dec %rsi
 316 039d 48C1EA04 	    shr $4, %rdx 
 317              	
 318 03a1 4883FA00 	    cmp $0, %rdx
 319 03a5 75E6     	    jne 1b
 320              	
 321 03a7 C3       	    ret
 322              	
 323              	
 324              	.section .data
 325 000c 30313233 	hex_table: .ascii "0123456789ABCDEF"
 325      34353637 
 325      38394142 
 325      43444546 
 326              	
 327              	buffer_size = 64
 328              	.section    .bss
 329              	    .local buffer
 330              	    .comm buffer, buffer_size
GAS LISTING test.s 			page 12


DEFINED SYMBOLS
              test.s:47     .text:0000000000000000 main
              test.s:44     .data:0000000000000000 format
              test.s:45     .data:0000000000000004 str
              test.s:64     .text:0000000000000019 my_printf
              test.s:72     .text:0000000000000025 .while_not_null
              test.s:200    .text:00000000000002f6 .end_of_while_not_null
              test.s:78     .text:0000000000000031 .while_not_null_and_not_percent
              test.s:90     .text:0000000000000041 .end_of_while_not_null_and_not_percent
              test.s:149    .text:000000000000014f .percent_spec_case
              test.s:189    .text:00000000000002ca .default_case
              test.s:125    .text:0000000000000097 jump_table
              test.s:155    .text:000000000000017c .binary_spec_case
              test.s:159    .text:00000000000001bc .char_spec_case
              test.s:165    .text:00000000000001e1 .decimal_spec_case
              test.s:169    .text:0000000000000221 .oct_spec_case
              test.s:173    .text:0000000000000261 .string_spec_case
              test.s:182    .text:000000000000028b .hex_spec_case
                             .bss:0000000000000000 buffer
              test.s:196    .text:00000000000002ee .end_of_switch
                            *ABS*:0000000000000040 buffer_size
              test.s:270    .text:0000000000000349 put_binary_in_buffer
              test.s:226    .text:0000000000000308 put_decimal_in_buffer
              test.s:286    .text:0000000000000366 put_oct_in_buffer
              test.s:212    .text:00000000000002f8 str_len
              test.s:304    .text:0000000000000384 put_hex_in_buffer
              test.s:239    .text:000000000000031c put_abs_decimal_in_buffer
              test.s:325    .data:000000000000000c hex_table

UNDEFINED SYMBOLS
printf
